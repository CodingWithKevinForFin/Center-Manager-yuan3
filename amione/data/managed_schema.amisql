/* DO NOT MODIFY THIS FILE WHILE AMI IS RUNNING, CONTENTS ARE MODIFIED BY AMI  */

/*CUSTOM METHODS*/

CREATE METHOD {
  Integer alterShockDisplayTables(Map tableConfigs){
   for (String tbl : tableConfigs.getKeys()) {
        Map conf = tableConfigs.get(tbl);
        String alterCol = (String)(conf.get("alterColumnDefinition"));
        if (strIsnt(alterCol)) continue;
        logInfo("ALTERING TABLE ${tbl} WITH ALTER COLUMN ${alterCol}");
        ALTER TABLE ${tbl} ${alterCol};
    }
    return 1;
};

  Integer checkForInstrumentChanges(){
    List tables = new List();
    tables.add("riskInstrumentInputAssumptionsAQON");
    tables.add("riskInstrumentInputAssumptionsAQOFF");

    Table inst = USE ds="AMI" EXECUTE SELECT instruments.baseAsset AS symbol
        FROM instruments LEFT ONLY JOIN ${tables.get(0)}
        ON instruments.baseAsset == ${tables.get(0)}.I
        WHERE instruments.instrumentType=="PERPETUAL_FUTURE";
    List rows = inst.getRows();
    if (null == rows || 0 == rows.size()) return 0;
    String values = "VALUES";
    for (Row row : rows) {
        String sym = row.getValue("symbol");
        values += "(\"${sym}\",\"${sym}\", 0.0, 0.0),";
    }
    values = values.beforeLast(",", false) + ";";
    if (null == values) return;

    for (String targetTable : tables) {
        String stmnt = "INSERT INTO ${targetTable} (I, symbol, thirtyADQNotional, lspCapacityNotional) " + values;
        USE ds="AMI" EXECUTE ${stmnt};
    }
    return 1;
};

  Table fetchTableauHyper(String tableauServerDS,String hyperDS,String shellDS,String tableauSiteName,String tableauDataSourceName){
 
  Map credentials = new Map();
  Map site = new Map();
  Map params = new Map();
 
  String user = use ds=AMI EXECUTE SELECT US FROM __DATASOURCE WHERE NM == "${tableauServerDS}";
  String password = use ds=AMI EXECUTE SELECT strDecrypt(Password) FROM __DATASOURCE WHERE NM == "${tableauServerDS}";
 
  site.put("contentUrl", tableauSiteName);
  credentials.put("name", user);
  credentials.put("password", password);
  credentials.put("site", site);
  params.put("credentials", credentials);
 
  CREATE TABLE signin,headers AS USE ds="${tableauServerDS}" _method="POST" _urlExtension="/auth/signin" _header_Accept="application/json" _params="${params.toJson()}" _delim="||||" _returnHeaders="true" EXECUTE SELECT * FROM signin;
 
  String json = select credentials from signin limit 1;
  String siteId = jsonExtract(json, "site.id");
  String token = jsonExtract(json, "token");
 
  Map headers = new Map();
  headers.put("X-Tableau-Auth", token);
  headers.put("Accept", "application/json");
 
  CREATE TABLE getDataSources,headers AS USE ds="${tableauServerDS}" _method="GET" _urlExtension="/sites/${siteId}/datasources" _header_Accept="application/json" _headers="${headers.toJson()}" _param_pageSize="1000" _delim="||||" _returnHeaders="true" EXECUTE SELECT * FROM getDataSources;
 
  String dataSourcesJson = select datasources from getDataSources;
 
  Map dataSourceMap = parseJson(dataSourcesJson);
 
  List dataSourceList = dataSourceMap.get("datasource");
 
  String dataSourceId = "";
  for(int i = 0; i < dataSourceList.size(); i++) {
    Map dataSource = dataSourceList.get(i);
    if(dataSource.get("name") == tableauDataSourceName) {
      dataSourceId = dataSource.get("id");
    }
  }
 
  String tableauServer = use ds=AMI EXECUTE SELECT UR FROM __DATASOURCE WHERE NM == "${tableauServerDS}";
 
  String curlCommand = "curl -v -H 'X-Tableau-Auth: ${token}' -o ${tableauDataSourceName}.tdsx ${tableauServer}/sites/${siteId}/datasources/${dataSourceId}/content?includeExtract=true";
 
  String unzipCommand = "unzip -o -d ${tableauDataSourceName} ${tableauDataSourceName}.tdsx";
 
  CREATE TABLE stdoutCurl,stderrCurl,exitCodeCurl AS USE ds="${shellDS}" _cmd="${curlCommand}" EXECUTE SELECT * FROM cmd;
 
  CREATE TABLE stdoutZip,stderrZip,exitCodeZip AS USE ds="${shellDS}" _cmd="${unzipCommand}" EXECUTE SELECT * FROM cmd;
 
  List zipOutput = select line from stdoutZip;
 
  List hyperFiles = new List();
 
  for(int i = 0; i < zipOutput.size(); i++) {
    String line = zipOutput.get(i);
    if(line =~ ".hyper") {
      List lineTokens = line.split(" ");
      for(int j = 0; j < lineTokens.size(); j++) {
        if(lineTokens.get(j) =~ ".hyper$") {
          hyperFiles.add(lineTokens.get(j));
        }
      }
    }
 
  }
  String dir = use ds=AMI EXECUTE SELECT UR FROM __DATASOURCE WHERE NM == "${shellDS}";
 
  String fullPathToHyper = dir + "/" + hyperFiles.get(0);
 
  CREATE TABLE HyperOutput as use ds=${hyperDS} _file="${fullPathToHyper}" EXECUTE SELECT * FROM "Extract"."Extract";
 
  Table returnTable = select * from HyperOutput;
 
  return returnTable;
 
}
;

  Integer foo(Integer a){return 0;};

  Integer hello(Integer a,Integer b){return a+b;};

  Integer hello2(Integer a,Integer b){return a+b;};

  Integer hello3(Integer a,Integer b){return a+b;};

  Integer initAndSetupConfigs(){
    syncScenarios();
    syncInitRiskConfigurations();
    syncActiveInstrumentAssumptions();
    checkForInstrumentChanges();
    return 1;
};

  boolean isScenarioDisabled(Map scenario,String callerName){
    String name = scenario.get("scenarioName");
    if ("DISABLED" == name) {
       logInfo("Scenario is disabled, skipping timer task ${callerName}");
       return true;
    }
    return false;
};

  Integer loadInstrumentAssumptions(Map instrumentAssumptions,String tableName){
    Table instAssumptions = USE DS="AMI" EXECUTE SELECT * FROM ${tableName};
    for (Row row : instAssumptions.getRows()) {
        Map rowMap = new Map();
        rowMap.put("thirtyADQNotional", row.getValue("thirtyADQNotional"));
        rowMap.put("lspCapacityNotional", row.getValue("lspCapacityNotional"));
        instrumentAssumptions.put(row.getValue("symbol"), rowMap);
    }
    return 1;
};

  Integer syncActiveInstrumentAssumptions(){
    CREATE TABLE risk_ins_assum AS USE ds="StarbasePostgresDB" EXECUTE SELECT * FROM risk_instrument_input_assumptions;
    Table ins = SELECT * FROM risk_ins_assum;
    List rows = ins.getRows();
    if (null == rows || rows.size() == 0) return 0;
    List vals = new List();
    vals.add("");
    vals.add("");
    for (Row row : rows) {
        String scenarioName = row.getValue("scenario_name");
        String symbol = row.getValue("symbol");
        Double thirtyAdq = row.getValue("thirty_adq_notional");
        Double lspCap = row.getValue("lsp_capacity_notional");
        String val = "(\"${symbol}\",\"${symbol}\",${thirtyAdq},${lspCap}),";
        if ("ALIQ_ON" == scenarioName) {
            vals.set(0,vals.get(0) + val);
        } else {
            vals.set(1,vals.get(1) + val);
        }
    }
    String v = vals.get(0);
    if (strIs(v)) {
        v = v.beforeLast(",", false) + ";";
        INSERT INTO riskInstrumentInputAssumptionsAQON VALUES ${v};
    }
    v = vals.get(1);
    if (strIs(v)) {
        v = v.beforeLast(",", false) + ";";
        INSERT INTO riskInstrumentInputAssumptionsAQOFF VALUES ${v};
    }
    return 1;
};

  Integer syncInitRiskConfigurations(){
    CREATE TABLE risk_configs_ins AS USE ds="StarbasePostgresDB" EXECUTE SELECT * FROM risk_configuration_input_assumptions;
    Table configs = SELECT * FROM risk_configs_ins;
    List configRows = configs.getRows();
    if (null == configRows || configRows.size() == 0) return 0;
    List vals = new List();
    vals.add("");
    vals.add("");
    for (Row r : configRows) {
        String scenarioName = r.getValue("scenario_name");
        String val = "(\"default\",${(Double)(r.getValue("adq_breach"))},${(Double)(r.getValue("adq_liq_pcnt_of_adq_breach"))},
            ${(Double)(r.getValue("adq_liq_pcnt_of_adq_not_breach"))},${(Double)(r.getValue("lsp_positive_equity"))},${(Double)(r.getValue("lsp_negative_equity"))},
            ${(Double)(r.getValue("lsp_locked_cap_notional"))},${(Double)(r.getValue("insurance_fund_contrib"))},${(Double)(r.getValue("insurance_absorb_pcnt"))}),";
        if ("ALIQ_ON" == scenarioName) {
            vals.set(0,vals.get(0) + val);
        } else {
            vals.set(1,vals.get(1) + val);
        }
    }
    String v = vals.get(0);
    if (strIs(v)) {
        v = v.beforeLast(",", false) + ";";
        INSERT INTO riskConfigurationInputAssumptionsAQON (I,adqBreach,autoLiqPcntOfADQBreach,autoLiqPcntOfADQNotBreach,lspPositiveEquity,lspNegativeEquity,lspLockedCapNotional,insuranceFundContrib,insuranceAbsorbPcnt)
        VALUES ${v};
    }
        v = vals.get(1);
    if (strIs(v)) {
        v = v.beforeLast(",", false) + ";";
        INSERT INTO riskConfigurationInputAssumptionsAQOFF (I,adqBreach,autoLiqPcntOfADQBreach,autoLiqPcntOfADQNotBreach,lspPositiveEquity,lspNegativeEquity,lspLockedCapNotional,insuranceFundContrib,insuranceAbsorbPcnt)
        VALUES ${v};
    }
    return 1;
};

  Integer syncScenarios(){
    CREATE TABLE scenario_tmp AS USE ds="StarbasePostgresDB" EXECUTE SELECT * FROM risk_scenarios;
    Table sc = SELECT * FROM scenario_tmp;
    List rows = sc.getRows();
    for (Row r : rows) {
        String name = r.getValue("scenario_name");
        INSERT INTO scenarios (active,scenarioName,activeConfigInputsAssumptionsTable,activeInstrumentAssumptionsTable, activeConfigCMLIQPercentsTable,I)
        VALUES(r.getValue("active"),name,r.getValue("config_inputs_assumptions_table"),r.getValue("instrument_inputs_assumptions_table"),r.getValue("config_cm_liq_percents_table"),name);
    }
    return 1;
};
}

/*TABLES AND INDEXES*/

CREATE PUBLIC TABLE Accounts(account String,region2 Boolean,qty Integer,px Double) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE Accounts1(account String,region String,qty Integer,px Double) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE Accounts2(account String,region String,qty Integer,px Double) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE actionAudit(user String,dashboard String,time UTC,msg String) USE PersistEngine="TEXT" RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE b(order_id String,processing_date Integer) USE RefreshPeriodMs="100" OnUndefColumn="ADD" InitialCapacity="1000";


CREATE PUBLIC TABLE BackupEquityODD(Deal String,Ticker String,Quantity Long,DailyPNL Double,MTDPNL Double,
                                    YTDPNL Double,LastPrice Double,NotionalAmount Double,Bundle String,BundleGroup String,
                                    BusinessStrategy String,Custom1 String,Custom2 String,ForecastVol Double,MarginalVol Double,
                                    _1D95VaR Double,MarginalVaR Double,StressVaR Double,M Long,W Long,
                                    MarginalVaRSubPM Double,MarginalVolSubPM Double) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";
CREATE TRIGGER abv OFTYPE AMISCRIPT ON BackupEquityODD PRIORITY 0 USE canMutateRow="true" onInsertedScript="123";


CREATE PUBLIC TABLE BackupFirmwideODD(BundleGroup String,BusinessStrategy String,DailyPNL Double,MTDPNL Double,YTDPNL Double,
                                      AllocatedCapital Double,Drawdown Double,DrawdownLimit Double,BGDailyPNL Double,BSDailyPNL Double,
                                      BGMTDPNL Double,BSMTDPNL Double,BGYTDPNL Double,BSYTDPNL Double,BGAllocatedCapital Double,
                                      BSAllocatedCapital Double,BGDrawdown Double,BSDrawdown Double,BGDrawdownLimit Double,BSDrawdownLimit Double) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE BackupMacroODD(Deal String,Description String,InstrumentType String,DailyPNL Double,MTDPNL Double,
                                   YTDPNL Double,FXExposure Double,Delta Double,Gamma Double,Vega Double,
                                   Theta Long,Bundle String,BundleGroup String,BusinessStrategy String,Custom1 String,
                                   Custom2 String,ForecastVol Double,MarginalVol Double,_1D95VaR Double,MarginalVaR Double,
                                   StressVaR Double,MarginalVaRSubPM Double,MarginalVolSubPM Double,M Long) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE BarraBundle_nuw(BusinessUnit String,Subbook String,SpecificRisk Long) USE PersistEngine="TEXT" RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE BarraPortfolioMetrics(BundleGroup String,SpecificRisk Long,MV Long,LSIdioTils Double) USE PersistEngine="TEXT" RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE BarraSecurityMetrics(SecurityCode String,SumOfShares Double,MV Long,Idio Long) USE PersistEngine="TEXT" RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE BarraTree(Style String,Name String,MV Long,SignedVolume Long) USE PersistEngine="TEXT" RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE BatchFileUpload_nuw(sessionId String,symbol String,quantity Double,price Double,side String,
                                        order_type String,position_group String,notes String,broker String,manual_fill String,
                                        time_in_force String,instructions String,auto_route String,urgency String,Mifid_timestamp String) USE PersistEngine="TEXT" RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE BloombergMarketDataSubscription(Symbol String,Field String,Value Float,Timestamp Long) USE PersistEngine="FAST" RefreshPeriodMs="100" OnUndefColumn="ADD" InitialCapacity="1000";
CREATE INDEX SubscriptionSymbolField_nuw3 ON BloombergMarketDataSubscription(Symbol HASH,Field HASH,Timestamp SORT,Value SORT) USE Constraint="PRIMARY";


CREATE PUBLIC TABLE BloombergMarketDataUsage(User String,Symbol String,Date String,Timestamp Long) USE PersistEngine="FAST" RefreshPeriodMs="100" OnUndefColumn="ADD" InitialCapacity="1000";
CREATE INDEX SubscriptionUserSymbolDate_nuw ON BloombergMarketDataUsage(User HASH,Symbol HASH,Date HASH) USE Constraint="PRIMARY";


CREATE PUBLIC TABLE BundleLevelPositions(Book String,`Bundle ID` Integer,`Business Unit` String,`Bundle Group` String,`Daily Vol $ mm` Float,
                                         `Worst Stress` Float,`Gamma $` Float,`Portfolio Vol Contribution %` Float,`Marginal Vol Contribution %` Float,`VaR 95% Daily %` Float,
                                         `Marginal Var %` Float) USE PersistEngine="TEXT" RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE BundleMapping(`Trade ID` String,Description String,Bundle String,`Sub PM` String,PM String,
                                  `Business Strategy` String,Business String,Region String,`Custom 1` String,`Custom 2` String,
                                  `Cutstom 3` String,Risk2 String,Risk String) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE BundleMetadata(bundle String,custom_1 String,custom_2 String,custom_3 String,sub_pm String,
                                   pm String,business_strategy String,firm String) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE BusinessLevelAgg(Tca Double,BundleGroup String,PnlMTD Double,DailyVol Double,TcaUtilized Double,
                                     PnlYTD Double,PnlQTD Double,LivePnl Double,WorstStress Double) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE BusinessLevelData(Book String,`Bundle Group` String,`Daily Vol $ mm` Float,`Worst Stress` Float,`Gamma $` Float,
                                      `Portfolio Vol Contribution %` Float,`Marginal Vol Contribution %` Float,`VaR 95% Daily %` Float,`Marginal Var %` Float) USE PersistEngine="TEXT" RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE CHILD_ORDERS(SplitID String,MergeID String,RoundLot String BITMAP,OrdStatus String BITMAP,AllowedActions String BITMAP,
                                 OrderID String,OrdLinkID String,CumQty Long,AvgPx Double,Account String,
                                 ClOrdID String,Currency String BITMAP,OrderQty Long,Price Double,PriceAtClose Double,
                                 OrdType String BITMAP,Side String BITMAP,Symbol String,SecurityID String,IDSource String BITMAP,
                                 SecurityAltID String,OrderCapacity String BITMAP,TimeInForce String BITMAP,SubCustomerName String,PrimarySales String,
                                 SecondarySales String,CustomerSlang String,TradeDate String BITMAP,ConnectionName String BITMAP,InstanceName String BITMAP,
                                 OrderPlacer String,RoutingHub String BITMAP,ExDestination String BITMAP,HandlInst String BITMAP,Text String,
                                 Customer String BITMAP,OrderFlowCategory String BITMAP,ReceiveTime Long,LastUpdatedTime Long,InboundLatency Long,
                                 OutboundLatency Long,TicketStatus String BITMAP,TicketingRejectReason String,LegalEntity String BITMAP,SettlementCurrency String BITMAP,
                                 SettlementType String BITMAP,SettlementDate String BITMAP,CommissionType String BITMAP,Commission Double,SettlCurrFxRate Double,
                                 SettlCurrFxRateCalc String BITMAP,SettlCurrFxAmt Double,SettlCurrFxTotalAmt Double,LeavesQty Long,SmartStrategy String BITMAP,
                                 SourceRegion String BITMAP,DestinationRegion String BITMAP,SrcSystemID Long,TotalCommission Double,NetMoney Double,
                                 BloomBergCode String BITMAP,ChannelName String BITMAP,Country String BITMAP,Isin String BITMAP,RicCode String BITMAP,
                                 SecurityType String BITMAP,Sedol String BITMAP,Ticker String BITMAP,USDRate Double,CustomerID String BITMAP,
                                 MaxFloor Long,ClientTraderID String BITMAP,RerouteStatus String BITMAP,RerouteText String BITMAP,AutoMergeF String BITMAP,
                                 SubAccount String BITMAP,AlgoConstraint String BITMAP,SUTFAccount String BITMAP,SMCPID String,RestrictedCategory String BITMAP,
                                 FlowType String BITMAP,SwapFlag String BITMAP,OddLot Long,SalesPersonID String,ISOCode String,
                                 ParentSide String,Swag String,LHEligible String,SynOrdQty Long,SynExecQty Long,
                                 SynAvgPx Double,InMktOrdQty Long,InMktExecQty Long,MinPctVol Double,MaxPctVol Double,
                                 TargetRate Double,AggressionLevel String,OpenCloseFlag String,OMSVendor String BITMAP,CommFactor Double,
                                 ONCInstance String BITMAP,AvgDailyVol Double,ADVPercentage Double,TransactTime Long,StopPx Double,
                                 CrossStartTime Long,CrossEndTime Long,OrigExpireTime Long) USE PersistEngine="FAST" NoBroadcast RefreshPeriodMs="100" OnUndefColumn="IGNORE" InitialCapacity="100";
CREATE INDEX CHILD_ORDERLINKID_IDX ON CHILD_ORDERS(OrdLinkID HASH) USE Constraint="NONE";
CREATE INDEX SplitID_IDX ON CHILD_ORDERS(SplitID HASH) USE Constraint="NONE";
CREATE INDEX CHILD_ORDERID_IDX ON CHILD_ORDERS(OrderID HASH) USE Constraint="PRIMARY";
CREATE INDEX MergeID_IDX ON CHILD_ORDERS(MergeID HASH) USE Constraint="NONE";
CREATE INDEX ClOrdID_IDX ON CHILD_ORDERS(ClOrdID HASH) USE Constraint="NONE";
CREATE INDEX TRADEDATE_IDX ON CHILD_ORDERS(TradeDate HASH) USE Constraint="NONE";


CREATE PUBLIC TABLE ColChange(c1renamed_nuw String NoNull Ascii NoBroadcast Compact Cache="2TB",c2 Integer,c3 Double) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE CommodDelta(Bundle String,Deal_ID String,Spin_ID String,Instrument_Type String,Option String,
                                Commodity String,Description String,Family String,Shape String,Contract String,
                                Pricing_Date String,Expiration_Date String,Price_Type String,Location String,Unit String,
                                Delta Double,Price Double,Parent_Location String,ReportIndex Double,M Long,
                                C Long,V Integer) USE RefreshPeriodMs="100" OnUndefColumn="IGNORE" InitialCapacity="1000";


CREATE PUBLIC TABLE CommodGamma(Bundle String,Deal_ID String,Spin_ID String,Instrument_Type String,Option String,
                                Commodity String,Description String,Family String,Shape String,Contract String,
                                Pricing_Date String,Expiration_Date String,Price_Type String,Location String,Unit String,
                                Gamma Double,Price Double,ReportIndex Double) USE RefreshPeriodMs="100" OnUndefColumn="IGNORE" InitialCapacity="100";


CREATE PUBLIC TABLE Commodities(Ticker String BITMAP,Currency String BITMAP,Price Double,ContractValue Double,PriceUSD Double,
                                DeltaTMinusOne Double) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";
CREATE INDEX Commodities_Idx ON Commodities(Ticker HASH) USE Constraint="PRIMARY";


CREATE PUBLIC TABLE CommoditiesAgg(Name String BITMAP,CommoditiesPnL Double) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";
CREATE TRIGGER fooo OFTYPE AMISCRIPT ON CommoditiesAgg PRIORITY 0 USE onInsertedScript="123";
CREATE TRIGGER fooo22 OFTYPE AMISCRIPT ON CommoditiesAgg PRIORITY 0 USE onInsertedScript="123";
CREATE TRIGGER fooo223 OFTYPE AMISCRIPT ON CommoditiesAgg PRIORITY 0 USE onInsertedScript="123";
CREATE TRIGGER fooTrigger OFTYPE AMISCRIPT ON CommoditiesAgg PRIORITY 0 USE onInsertedScript="logWarn(123)";
CREATE TRIGGER fooTrigger2 OFTYPE AMISCRIPT ON CommoditiesAgg PRIORITY 0 USE onInsertedScript="logWarn(123)";


CREATE PUBLIC TABLE CommoditiesData(Ticker String BITMAP,Currency String BITMAP,Price Double,nuwcol Boolean NoNull,ContractValue String,
                                    DeltaTMinusOne Double) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";
CREATE INDEX CommoditiesData_Idx_nuw ON CommoditiesData(Ticker HASH) USE Constraint="PRIMARY";


CREATE PUBLIC TABLE CommoditiesJoin(Category String BITMAP,Name String BITMAP,FXPnL Double,RatesPnL Double,VolPnL Double,
                                    CommoditiesPnL Double) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";
CREATE TRIGGER testTrigger OFTYPE AMISCRIPT ON CommoditiesJoin PRIORITY 0 USE onInsertedScript="123;";


CREATE PUBLIC TABLE CommoditiesPnL(Name String BITMAP,Ticker String BITMAP,Size Integer,CommDelta Double,PnL Double) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE CommoditiesTickerSize(Ticker String BITMAP,PortfolioManager String BITMAP,Size Integer) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE CommodPnL(Bundle String,Customer String,Deal_Type String,Asset String,Deal String,
                              Deal_ID String,Traded_Date String,Traded_Time String,Position_Tag String,Position_Type String,
                              Direction String,Instrument String,Description String,Market String,Underlying String,
                              Shape String,Contract String,Start_Date String,End_Date String,Leg_Type String,
                              Option_Type String,Quantity Double,Traded_Lots Double,Conversion String,Lot_Size String,
                              Quantity_Unit String,Ticker String,Traded_Price Double,Realized String,Denominated_Currency String,
                              Settlement_Date String,Settlement_Price Double,Total_PNL Double,Last_Trading_Date String,Instrument_Type String,
                              Expiration_Date String,Strike Double,Trader String,Strategy String,Market_Description String,
                              Is_Future String,Open_Lots Double,Open_Quantity Double,Open_MTM Double,Realized_PNL Double) USE RefreshPeriodMs="100" OnUndefColumn="IGNORE" InitialCapacity="1000";
CREATE INDEX CommodPnL_Index ON CommodPnL(Bundle HASH,Deal_ID HASH,Instrument_Type HASH) USE Constraint="PRIMARY";


CREATE PUBLIC TABLE CommodPnLExpl(Bundle String,Deal_ID String,Old_NPV Double,Theta Double,Fixing_Restate Double,
                                  Mkt_Restate Double,Other_Restate Double,Fixing Double,Credit_Event Double,Phys Double,
                                  Phys_Spot Double,Carry Double,Eq_Spot Double,Eq_Futures_Basis Double,FX_Spot Double,
                                  Rates Double,Inflation Double,Bond Double,Credit Double,Credit_Vol Double,
                                  FX_Vol Double,Swo_Vol Double,Cap_Vol Double,Div Double,Eq_Vol Double,
                                  Commods Double,Shaping Double,Futures Double,Fut_Vol Double,Commod_Vol Double,
                                  Commod_Vol_By_Strike Double,Heat_Rate_Vol Double,Cross_Asset_Corr Double,FCM_Params Double,Description String,
                                  Instrument String,Broker String,Option_Type String,Family String,Contract String,
                                  Old_Quantity Double,New_Quantity Double,Trade_Amendment Double,Execution_Type String,Spin_ID String,
                                  Instrument_Type String,Residual Double,Trades Double,Total Double,New_NPV Double) USE RefreshPeriodMs="100" OnUndefColumn="IGNORE" InitialCapacity="1000";
CREATE INDEX CommodPnLExpl_Index ON CommodPnLExpl(Bundle HASH,Deal_ID HASH,Instrument_Type SORT) USE Constraint="PRIMARY";


CREATE PUBLIC TABLE CommodRho(Bundle String,Deal_ID String,Spin_ID String,Ccy String,Tenor String,
                              Instrument_Type String,Option String,Commodity String,Description String,Family String,
                              Shape String,Contract String,Strategy String,Pricing_Date String,Expiration_Date String,
                              Price_Type String,Location String,Parent_Location String,Unit String,Broker String,
                              Execution_Type String,Rho Double,Price Double) USE RefreshPeriodMs="100" OnUndefColumn="IGNORE" InitialCapacity="100";
CREATE INDEX CommodRho_Index ON CommodRho(Bundle HASH,Deal_ID HASH,Instrument_Type HASH) USE Constraint="PRIMARY";


CREATE PUBLIC TABLE CommodTheta(Bundle String,Deal_ID String,Spin_ID String,Instrument_Type String,Option String,
                                Commodity String,Description String,Family String,Shape String,Contract String,
                                Pricing_Date String,Expiration_Date String,Price_Type String,Parent_Location String,Location String,
                                Unit String,Theta Double,Price Double) USE RefreshPeriodMs="100" OnUndefColumn="IGNORE" InitialCapacity="100";
CREATE INDEX CommodTheta_Index ON CommodTheta(Bundle HASH,Deal_ID HASH,Instrument_Type HASH) USE Constraint="PRIMARY";


CREATE PUBLIC TABLE CommodVega(Bundle String,Deal_ID String,Spin_ID String,Instrument_Type String,Option String,
                               Commodity String,Description String,Family String,Shape String,Contract String,
                               Pricing_Date String,Expiration_Date String,Price_Type String,Location String,Unit String,
                               Vega Double,Price Double) USE RefreshPeriodMs="100" OnUndefColumn="IGNORE" InitialCapacity="100";
CREATE INDEX CommodVega_Index ON CommodVega(Bundle HASH,Deal_ID HASH) USE Constraint="PRIMARY";


CREATE PUBLIC TABLE ComplianceAlerts(User String BITMAP,OrderId String BITMAP,Level String BITMAP,Name String BITMAP,Description String BITMAP) USE PersistEngine="FAST" RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE crudDemo(id Long,v1 String,v2 String) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE CUSTOMER_DETAILS(CustomerID String BITMAP,CustomerName String BITMAP,Alias String BITMAP,ConnectionID String BITMAP,Slangs String BITMAP,
                                     Status String BITMAP,CreatedDate String BITMAP,ModifiedDate String BITMAP,ModifiedBy String BITMAP,OmsVendor String BITMAP,
                                     Region String BITMAP) USE PersistEngine="FAST" RefreshPeriodMs="100" OnUndefColumn="IGNORE" InitialCapacity="100";
CREATE INDEX CUSTOMERID_IDX ON CUSTOMER_DETAILS(CustomerID HASH) USE Constraint="PRIMARY";
CREATE INDEX CONNECTIONID_IDX ON CUSTOMER_DETAILS(ConnectionID HASH) USE Constraint="NONE";


CREATE PUBLIC TABLE DataFilterColumns(colName String) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE DataFilterEnabled(val Boolean) USE PersistEngine="TEXT" RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE DataFilterPluginAudit(ColumnName String,TableName String,Operation String,Time String,Description String) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE DataFilterPluginAudit2(col1 String,col2 String,col3 String,col4 String) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE DDQEquities(`Business Unit` String,`Bundle Group` String,Bundle String,Description String,`PNL Daily $ mm` Float,
                                `PNL MTD $ mm` Float,`PNL YTD $ mm` Float,`Position Size (Shares)` Float,`Position Size (Notional)` Float,`Delta $` Float,
                                `Gamma $` Float,`Vega $` Float,`Theta $` Float,`Forecast Vol $ mm` Float,`Marginal Vol Contribution %` Float,
                                `Forecast Idiosyncratic Vol $ mm` Float,`Forecast Common Factor Vol $ mm` Float,`VaR 95% Daily %` Float,`Marginal Var %` Float,`Worst Stress` Float) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE DemoTable(Symbol String NoNull,Quantity Float) USE PersistEngine="TEXT" RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";
CREATE INDEX DemoTable_idx1 ON DemoTable(Symbol HASH) USE Constraint="PRIMARY";


CREATE PUBLIC TABLE DESTINATIONS(DestinationName String,RouteName String,TimeslotName String,MultiFieldsMap String,TagValueMap String,
                                 OpenTime String,CloseTime String,TimeZone String BITMAP,State String BITMAP,Override String BITMAP,
                                 AllowedActions String BITMAP,isPassThruDestination String BITMAP) USE PersistEngine="FAST" RefreshPeriodMs="100" OnUndefColumn="IGNORE" InitialCapacity="100";
CREATE INDEX IDX ON DESTINATIONS(DestinationName HASH,RouteName HASH,TimeslotName HASH) USE Constraint="PRIMARY";


CREATE PUBLIC TABLE DetailSampleTradeExtract(bundle String,date String,instrument_id String,asset_class String,instrument String,
                                             description String,currency String,quantity Double,underlying String,USD_pv Double,
                                             eod_underlying_price Double,underlying_price Double,eod_underlying_vol Double,underlying_vol Double,eod_local_price Double,
                                             live_local_price Double,USD_rates_dv01 Double,USD_fx_delta Double,USD_equity_delta Double,USD_commodity_delta Double,
                                             USD_inflation_dv01 Double,USD_credit_cs01 Double,USD_credit_cs10 Double,USD_gamma Double,USD_vega Double,
                                             USD_theta Double,USD_dtd_live_pnl Double,USD_intraday_trading_pnl Double,USD_mtd_pnl Double,USD_ytd_pnl Double,
                                             USD_itd_pnl Double,USD_dtd_delta_pnl Double,USD_dtd_gamma_pnl Double,USD_dtd_vega_pnl Double,USD_dtd_theta_pnl Double,
                                             USD_dtd_unexplained_pnl Double,USD_var Double,USD_forecast_vol Double,USD_stress_var Double,USD_marginal_var Double,
                                             USD_marginal_vol Double,issuer String,USD_eod_price Double,USD_live_prive Double,local_cost Double,
                                             USD_cost Double,local_unit_cost Double,USD_unit_cost Double,local_accrued_interest Double,USD_accrued_interest Double,
                                             traded_quantity Double,local_notional Double,USD_notional Double,longshort String,USD_realized_price_pnl Double,
                                             USD_realized_fx_pnl Double,USD_unrealized_price_pnl Double,USD_unrealized_fx_pnl Double,USD_dividend_pnl Double,USD_interest_pnl Double,
                                             USD_other_pnl Double,one_day_price_return Double,one_day_simple_alpha Double,skill_factor_pnl Double,residual_factor_pnl Double,
                                             sector_factor_pnl Double,beta Double,USD_vol Double,USD_dtd_residual_pnl Double,USD_mtd_residual_pnl Double,
                                             USD_ytd_residual_pnl Double,fx_rate Double,usdccy_fx_rate Double,STATUS String) USE PersistEngine="FAST" RefreshPeriodMs="100" OnUndefColumn="IGNORE" InitialCapacity="100";
CREATE INDEX DetailSampleTradeExtract_Index ON DetailSampleTradeExtract(bundle HASH,instrument_id HASH) USE Constraint="PRIMARY";


CREATE PUBLIC TABLE DROPPED_EXECUTIONS(ClOrdID String,ExecID String,ExecRefID String,ExecType String BITMAP,LastMkt String BITMAP,
                                       LastShares Double,LastPx Double,LastCapacity String BITMAP,OrderID String,Side String BITMAP,
                                       Symbol String,TransactTime Long,TradeDate String BITMAP,Status String BITMAP,SourceRegion String BITMAP,
                                       DestinationRegion String BITMAP,ContraBroker String BITMAP,AllowedActions String BITMAP,InstanceName String BITMAP,SwapFlag String BITMAP,
                                       PrimarySales String,OrderFlowCategory String BITMAP,SalesPersonID String,Account String BITMAP,AvgPriceAcct String BITMAP,
                                       CustomerSlang String BITMAP,Customer String BITMAP,CustomerAccount String BITMAP,FlowType String BITMAP) USE PersistEngine="FAST" RefreshPeriodMs="100" OnUndefColumn="IGNORE" InitialCapacity="100";
CREATE INDEX EXECTYPE_IDX ON DROPPED_EXECUTIONS(ExecType HASH) USE Constraint="NONE";
CREATE INDEX STATUS_IDX ON DROPPED_EXECUTIONS(Status HASH) USE Constraint="NONE";
CREATE INDEX EXECID_IDX ON DROPPED_EXECUTIONS(ExecID HASH,OrderID HASH) USE Constraint="PRIMARY";
CREATE INDEX TRADEDATE_IDX ON DROPPED_EXECUTIONS(TradeDate HASH) USE Constraint="NONE";


CREATE PUBLIC TABLE EqRiskLadder(deal String,`-10.0%` String,`1.0%` String,description String,instrument String,
                                 `5.0%` String,`0.5%` String,currency String,`2.5%` String,bundle String,
                                 quantity Double,`0.0%` String,asset_class String,Ticker String,`-15.0%` String,
                                 `-2.5%` String,`-5.0%` String,`-0.5%` String,instrument_id String,`10.0%` String,
                                 `-1.0%` String,`20.0%` String,`15.0%` String,Value String,`-20.0%` String,
                                 ReportIndex Integer,SPN String,Bundle String,Error String,Vega Double,
                                 Spot Double,Gamma Double,Delta Double,position Double,batch_id Long) USE RefreshPeriodMs="100" OnUndefColumn="ADD" InitialCapacity="1000";
CREATE INDEX EqRiskLadder_idx1 ON EqRiskLadder(Bundle HASH,SPN HASH,Ticker HASH) USE Constraint="PRIMARY";
CREATE TRIGGER EqRiskLadderStatus OFTYPE AMISCRIPT ON EqRiskLadder PRIORITY 0 USE canMutateRow="true" onInsertingScript="if (strIs(Ticker)) {insert into EqRiskLadderStatus values(Bundle, SPN, Ticker, Error);return true;} else {insert into EqRiskLadderStatus values(Bundle, SPN, Ticker, Error);return false;}";
CREATE TRIGGER EqRiskLadderStatus2 OFTYPE AMISCRIPT ON EqRiskLadder PRIORITY 0 USE canMutateRow="true" onInsertingScript="if (strIs(Ticker)) {insert into EqRiskLadderStatus values(Bundle, SPN, Ticker, Error);return true;} else {insert into EqRiskLadderStatus values(Bundle, SPN, Ticker, Error);return false;}" vars="table temp,list r_list";


CREATE PUBLIC TABLE EqRiskLadderStatus(Bundle String BITMAP,SPN String BITMAP,Ticker String,Error String BITMAP) USE PersistEngine="FAST" RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";
CREATE INDEX EqRiskLadderStatusIdx ON EqRiskLadderStatus(Bundle HASH,SPN HASH) USE Constraint="PRIMARY";


CREATE PUBLIC TABLE Equities(Ticker String BITMAP,Currency String BITMAP,Price Double,ContractValue Double,PriceUSD Double,
                             DeltaTMinusOne Double) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE EquitiesAgg(Name String BITMAP,EquitiesPnL Double) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE EquitiesData(Ticker String BITMAP,Currency String BITMAP,Price Double,ContractValue String,DeltaTMinusOne Double) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";
CREATE INDEX EquitiesData_Idx ON EquitiesData(Ticker HASH) USE Constraint="PRIMARY";


CREATE PUBLIC TABLE EquitiesPnL(Name String BITMAP,Ticker String BITMAP,Size Integer,EquityDelta Double,PnL Double) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE EquitiesTickerSize(Ticker String BITMAP,PortfolioManager String BITMAP,Size Integer) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE EquityODD(Deal String,Ticker String,Quantity Long,DailyPNL Double,MTDPNL Double,
                              YTDPNL Double,LastPrice Double,NotionalAmount Double,Bundle String,BundleGroup String,
                              BusinessStrategy String,Custom1 String,Custom2 String,ForecastVol Double,MarginalVol Double,
                              `1D95VaR` Double,MarginalVaR Double,StressVaR Double,M Long,W Long,
                              MarginalVaRSubPM Double,MarginalVolSubPM Double) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE EquityODDAgg(BundleGroup String,BusinessStrategy String,DailyPNL Double,MTDPNL Double,YTDPNL Double) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE EquityODDIntermediate(Deal String,Ticker String,Quantity Long,DailyPNL Double,MTDPNL Double,
                                          YTDPNL Double,LastPrice Double,NotionalAmount Double,Bundle String,BundleGroup String,
                                          BusinessStrategy String,Custom1 String,Custom2 String,ForecastVol Double,MarginalVol Double,
                                          `1D95VaR` Double,MarginalVaR Double,StressVaR Double) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE EquityODDReport(Deal String,Ticker String,Quantity Long,DailyPNL Double,MTDPNL Double,
                                    YTDPNL Double,LastPrice Double,NotionalAmount Double,Bundle String,BundleGroup String,
                                    BusinessStrategy String,Custom1 String,Custom2 String) USE PersistEngine="TEXT" RefreshPeriodMs="100" OnUndefColumn="ADD" InitialCapacity="1000";
CREATE INDEX EquityODDReportDealIndex ON EquityODDReport(Deal HASH) USE Constraint="PRIMARY";
CREATE TRIGGER EquityODDReportLR OFTYPE AMISCRIPT ON EquityODDReport PRIORITY 0 USE onUpdatedScript="INSERT INTO LastReceivedODD VALUES (\"EquityODDReport\",timestamp())" onInsertedScript="INSERT INTO LastReceivedODD VALUES (\"EquityODDReport\",timestamp())";


CREATE PUBLIC TABLE EquityODDSubPMContribution(Deal String,Custom1 String,Custom2 String,BusinessStrategy String,MarginalVol Float,
                                               Bundle String,Ticker String,BundleGroup String,MarginalVaR Float) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE EquityODDVaRReport(Deal String,Ticker String,ForecastVol Double,`1D95VaR` Double,StressVaR Double,
                                       MarginalVol Double,MarginalVaR Double) USE PersistEngine="TEXT" RefreshPeriodMs="100" OnUndefColumn="ADD" InitialCapacity="1000";
CREATE INDEX EquityODDVaRReportDealIndex ON EquityODDVaRReport(Deal HASH) USE Constraint="PRIMARY";
CREATE TRIGGER EquityODDVaRReportLR OFTYPE AMISCRIPT ON EquityODDVaRReport PRIORITY 0 USE onUpdatedScript="INSERT INTO LastReceivedODD VALUES (\"EquityODDVaRReport\",timestamp())" onInsertedScript="INSERT INTO LastReceivedODD VALUES (\"EquityODDVaRReport\",timestamp())";


CREATE PUBLIC TABLE EXCHANGES(PrimaryExchangeCode String BITMAP,NumberOfProducts Long,LastUpdateTimestamp Long) USE PersistEngine="FAST" RefreshPeriodMs="5000" OnUndefColumn="IGNORE" InitialCapacity="100";
CREATE INDEX EXCHANGES_PrimaryExchangeCode_HASH_IDX ON EXCHANGES(PrimaryExchangeCode HASH) USE Constraint="PRIMARY";
CREATE INDEX EXCHANGES_LastUpdateTimestamp_SERIES_IDX_nuw ON EXCHANGES(LastUpdateTimestamp SERIES,NumberOfProducts HASH) USE Constraint="NONE";
CREATE INDEX EXCHANGES_PrimaryExchangeCode_LastUpdateTimestamp_COMPOSITE_IDX ON EXCHANGES(PrimaryExchangeCode HASH,LastUpdateTimestamp SERIES) USE Constraint="NONE";
CREATE TRIGGER EXCHANGES2_nuw OFTYPE AMISCRIPT ON EXCHANGES PRIORITY 0 USE onInsertedScript="logWarn(123)";
CREATE TRIGGER testTee OFTYPE AMISCRIPT ON EXCHANGES PRIORITY 0 USE onInsertedScript="table t = select * from EXCHANGES; logWarn(t);";
CREATE TRIGGER EXCHANGES_amiscirpt2 OFTYPE AMISCRIPT ON EXCHANGES PRIORITY 20 USE onInsertedScript="logWarn(123)";


CREATE PUBLIC TABLE EXECUTION_SUMMARY(Symbol String,Side String BITMAP,LastMkt String BITMAP,Count Integer,ExecQty Long,
                                      ExecNotional Double,SourceRegion String BITMAP,DestinationRegion String BITMAP,SwapFlag String BITMAP,PrimarySales String,
                                      OrderFlowCategory String BITMAP,SalesPersonID String) USE PersistEngine="FAST" NoBroadcast RefreshPeriodMs="100" OnUndefColumn="IGNORE" InitialCapacity="100";


CREATE PUBLIC TABLE EXECUTIONS(ClOrdID String,ExecID String,ExecRefID String,ExecType String BITMAP,LastMkt String BITMAP,
                               LastShares Double,LastPx Double,LastCapacity String BITMAP,OrderID String,Side String BITMAP,
                               Symbol String,TransactTime Long,TradeDate String BITMAP,Status String BITMAP,SourceRegion String BITMAP,
                               DestinationRegion String BITMAP,ContraBroker String BITMAP,AllowedActions String BITMAP,InstanceName String BITMAP,SwapFlag String BITMAP,
                               PrimarySales String,OrderFlowCategory String BITMAP,SalesPersonID String,SwagFill String,LHEligible String,
                               ClientTraderID String BITMAP,CustomerSlang String BITMAP,Customer String BITMAP,CustomerAccount String BITMAP,ConnectionName String BITMAP,
                               Currency String BITMAP,SMCPID String,CumQty Long,NettedID String,HasDK Boolean) USE PersistEngine="FAST" NoBroadcast RefreshPeriodMs="100" OnUndefColumn="IGNORE" InitialCapacity="100";
CREATE INDEX EXECTYPE_IDX ON EXECUTIONS(ExecType HASH) USE Constraint="NONE";
CREATE INDEX STATUS_IDX ON EXECUTIONS(Status HASH) USE Constraint="NONE";
CREATE INDEX EXECID_IDX ON EXECUTIONS(ExecID HASH,OrderID HASH) USE Constraint="PRIMARY";
CREATE INDEX TRADEDATE_IDX ON EXECUTIONS(TradeDate HASH) USE Constraint="NONE";


CREATE PUBLIC TABLE fakeOrderIds(id String) USE PersistEngine="FAST" RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE fakeorders(t Integer,orderId String,group String,val Integer) USE PersistEngine="FAST" RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE FEPortfolio(bundle String,instrument_id Integer,instrument String,currency String,exchange String,
                                description String,`1d_return` Float,`1d_simple_alpha` Float,`$_dtd_live_pnl` Float,`$_dtd_live_trading_pnl` Float,
                                `$_dtd_live_skill_pnl` Float,quantity Integer,active_orders Integer,price_prior_day_local Float,`price_prior_day_$` Float,
                                price_local Float,`price_$` Float,beta Float,`$_notional` Float,`$_vol` Float,
                                `$_dtd_total_pnl` Float,`$_dtd_residual_pnl` Float,`$_mtd_total_pnl` Float,`$_mtd_residual_pnl` Float,`$_ytd_total_pnl` Float,
                                `$_ytd_residual_pnl` Float,longshort String,asset_class String,custom_2 String,custom_1 String,
                                custom_3 String,pm String,business_strategy String) USE PersistEngine="FAST" RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE FirmwideODD(BundleGroup String,BusinessStrategy String,DailyPNL Double,MTDPNL Double,YTDPNL Double,
                                AllocatedCapital Double,Drawdown Double,DrawdownLimit Double,BGDailyPNL Double,BSDailyPNL Double,
                                BGMTDPNL Double,BSMTDPNL Double,BGYTDPNL Double,BSYTDPNL Double,BGAllocatedCapital Double,
                                BSAllocatedCapital Double,BGDrawdown Double,BSDrawdown Double,BGDrawdownLimit Double,BSDrawdownLimit Double) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE FirmwideODD2(BundleGroup String,BusinessStrategy String,DailyPNL Double,MTDPNL Double,YTDPNL Double,
                                 AllocatedCapital Double,Drawdown Double,DrawdownLimit Double,BGDailyPNL Double,BSDailyPNL Double,
                                 BGMTDPNL Double,BSMTDPNL Double,BGYTDPNL Double,BSYTDPNL Double,BGAllocatedCapital Double,
                                 BSAllocatedCapital Double,BGDrawdown Double,BSDrawdown Double,BGDrawdownLimit Double,BSDrawdownLimit Double) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE FirmwideODDTemp(BundleGroup String,BusinessStrategy String,DailyPNL Double,MTDPNL Double,YTDPNL Double) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE FIX_CONNECTION_ATTRIBUTES(SessionID String BITMAP,AttrName String,AttrValue String) USE PersistEngine="FAST" RefreshPeriodMs="100" OnUndefColumn="IGNORE" InitialCapacity="100";
CREATE INDEX SESSIONID_ATTRNAME_IDX ON FIX_CONNECTION_ATTRIBUTES(SessionID HASH,AttrName HASH) USE Constraint="PRIMARY";


CREATE PUBLIC TABLE FIX_CONNECTION_EVENTS(SessionID String BITMAP,Text String,SessionStatus Boolean,ConnectionStatus String BITMAP,IncomingMsgSeqNum Integer,
                                          OutgoingMsgSeqNum Integer,EventTime Long) USE PersistEngine="FAST" NoBroadcast RefreshPeriodMs="100" OnUndefColumn="IGNORE" InitialCapacity="100";


CREATE PUBLIC TABLE FIX_CONNECTION_SCHEDULES(SessionID String BITMAP,StartDay String BITMAP,StartTime String BITMAP,EndDay String BITMAP,EndTime String BITMAP,
                                             TimeZone String BITMAP) USE PersistEngine="FAST" RefreshPeriodMs="100" OnUndefColumn="IGNORE" InitialCapacity="100";
CREATE INDEX SESSIONID_STARTDAY_IDX ON FIX_CONNECTION_SCHEDULES(SessionID HASH,StartDay HASH) USE Constraint="PRIMARY";


CREATE PUBLIC TABLE FIX_CONNECTIONS(AllowedActions String BITMAP,SessionID String BITMAP,NetworkVendor String BITMAP,ServerName String BITMAP,IsActive Integer,
                                    IsConnected Integer,IncomingMsgSeqNum Integer,OutgoingMsgSeqNum Integer,EventTime Long,InstanceName String BITMAP,
                                    Region String BITMAP) USE PersistEngine="FAST" RefreshPeriodMs="100" OnUndefColumn="IGNORE" InitialCapacity="100";
CREATE INDEX SESSIONID_IDX ON FIX_CONNECTIONS(SessionID HASH) USE Constraint="PRIMARY";


CREATE PUBLIC TABLE FIX_MESSAGES(MsgType String BITMAP,ParentOrChild String BITMAP,MsgSource String BITMAP,ClOrdID String,OrigClOrdID String,
                                 OrderID String,OrdLinkID String,ExecID String,ExecType String BITMAP,OrdStatus String BITMAP,
                                 AvgPx Double,CumQty Double,TransactTime Long,Side String BITMAP,Symbol String,
                                 OrdType String BITMAP,ConnectionName String BITMAP,InstanceName String BITMAP,OrderQty Double,Price Double,
                                 RawFix String OnDisk Cache="1GB",FixMsg String OnDisk Cache="1GB",InboundLatency Long,OutboundLatency Long,TradeDate String BITMAP,
                                 Text String,ExecTransType String BITMAP,MessageTime Long,LastMkt String BITMAP,LastShares Double,
                                 LastPx Double) USE PersistEngine="FAST" NoBroadcast RefreshPeriodMs="100" OnUndefColumn="IGNORE" InitialCapacity="2500000";
CREATE INDEX OrdLinkID_IDX ON FIX_MESSAGES(OrdLinkID HASH) USE Constraint="NONE";
CREATE INDEX ORDID_IDX ON FIX_MESSAGES(OrderID HASH) USE Constraint="NONE";


CREATE PUBLIC TABLE FIX_TAGS(Key String BITMAP,Tag String BITMAP,LastUpdatedTime String BITMAP) USE PersistEngine="FAST" NoBroadcast RefreshPeriodMs="100" OnUndefColumn="IGNORE" InitialCapacity="100";
CREATE INDEX Key_IDX ON FIX_TAGS(Key HASH) USE Constraint="PRIMARY";


CREATE PUBLIC TABLE flex_pm_view(`Pro Forma Target Quantity` Double,Group String,`Px Change %` Double,Prime String,`Long Exp` Double,
                                 Symbol String,`HCur Exp` Double,`Order Qty` Double,`Mkt Px` Double,`Mkt Prev Close Px` Double,
                                 `HCur Total` Double,`Gross Exp` Double,Qty Double,Total Double,`Pos Side` String,
                                 Exp Double,`Target Qty` Double,`Account Type` String,FIGI String,`Bloomberg Unique ID` String,
                                 `Pro Forma HCur Short Exp` Double,`FX Rate` Double,`Pro Forma HCur Long Exp` Double,`Pro Forma Qty` Double,`Pro Forma HCur Gross Exp` Double,
                                 `Pro Forma HCur Short Beta MV` Double,`Pro Forma HCur Net MV` Double,`Open Order HCur Exp` Double,`Pro Forma HCur Short MV` Double,`Pro Forma HCur Long MV` Double,
                                 `Pro Forma HCur Short Beta Exp` Double,`HCur Short Exp` Double,`HCur Gross Exp` Double,`HCur Long Beta Exp` Double,`HCur Gross Beta Exp` Double,
                                 `HCur LMV` Double,`Open Order Qty` Double,`Pro Forma HCur Gross Beta Exp` Double,`Pro Forma HCur Net Beta MV` Double,`HCur Short Beta Exp` Double,
                                 `HCur MV` Double,`Pro Forma HCur Long Beta Exp` Double,`Open Order HCur MV` Double,`Pro Forma HCur Net Exp` Double,`Beta Multiplier` Double,
                                 `Pro Forma HCur Long Beta MV` Double,`Pro Forma HCur Net Beta Exp` Double,`HCur SMV` Double,`Pro Forma HCur Gross Beta MV` Double,`Pro Forma HCur Gross MV` Double,
                                 `HCur Beta Exp` Double,`HCur GMV` Double,`HCur Long Exp` Double,External String,Underlying String,
                                 `Legal Entity` String,Timestamp String,`Sec Type` String,`SOD FX Rate` Double) USE RefreshPeriodMs="100" OnUndefColumn="ADD" InitialCapacity="1000";
CREATE INDEX flex_pm_view_idx1 ON flex_pm_view(Symbol HASH,Group HASH,Prime HASH,`Account Type` HASH) USE Constraint="PRIMARY";


CREATE PUBLIC TABLE flex_pm_view_audit(C Long,RecordsRemoved Integer) USE PersistEngine="FAST" RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE FlexSecurities(Id Integer,Symbol String,Alias String,AliasType String,SecurityType String) USE PersistEngine="TEXT" RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="10000";


CREATE PUBLIC TABLE fp2(`Pro Forma Target Quantity` Double,Group String,`Px Change %` Double,Prime String,`Long Exp` Double,
                        Symbol String,`HCur Exp` Double,`Order Qty` Double,`Mkt Px` Double,`Mkt Prev Close Px` Double,
                        `HCur Total` Double,`Gross Exp` Double,Qty Double,Total Double,`Pos Side` String,
                        Exp Double,`Target Qty` Double,`Account Type` String,FIGI String,`Bloomberg Unique ID` String,
                        `Pro Forma HCur Short Exp` Double,`FX Rate` String,`Pro Forma HCur Long Exp` Double,`Pro Forma Qty` Double,`Pro Forma HCur Gross Exp` Double,
                        `Pro Forma HCur Short Beta MV` Double,`Pro Forma HCur Net MV` Double,`Open Order HCur Exp` Double,`Pro Forma HCur Short MV` Double,`Pro Forma HCur Long MV` Double,
                        `Pro Forma HCur Short Beta Exp` Double,`HCur Short Exp` Double,`HCur Gross Exp` Double,`HCur Long Beta Exp` Double,`HCur Gross Beta Exp` Double,
                        `HCur LMV` Double,`Open Order Qty` Double,`Pro Forma HCur Gross Beta Exp` Double,`Pro Forma HCur Net Beta MV` Double,`HCur Short Beta Exp` Double,
                        `HCur MV` Double,`Pro Forma HCur Long Beta Exp` Double,`Open Order HCur MV` Double,`Pro Forma HCur Net Exp` Double,`Beta Multiplier` Double,
                        `Pro Forma HCur Long Beta MV` Double,`Pro Forma HCur Net Beta Exp` Double,`HCur SMV` Double,`Pro Forma HCur Gross Beta MV` Double,`Pro Forma HCur Gross MV` Double,
                        `HCur Beta Exp` Double,`HCur GMV` Double,`HCur Long Exp` Double,External String,Underlying String,
                        `Legal Entity` String,Timestamp String,`Sec Type` String,`SOD FX Rate` String) USE RefreshPeriodMs="100" OnUndefColumn="ADD" InitialCapacity="1000";


CREATE PUBLIC TABLE FX(Currency String BITMAP,Spot Double,DeltaTMinusOne Double) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";
CREATE INDEX FX_Idx ON FX(Currency HASH) USE Constraint="PRIMARY";


CREATE PUBLIC TABLE FX_Greeks(bundle String,custom_1 String,custom_2 String,custom_3 String,pm String,
                              business_strategy String,currency_pair String,moneyNess String,position String,description String,
                              _spot Integer,_1w Integer,_2w Integer,_1m Integer,_2m Integer,
                              _3m Integer,_6m Integer,_9m Integer,_1y Integer,_2y Integer,
                              _5y Integer,_10y Integer) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE FXAgg(Name String BITMAP,FXPnL Double) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE FXDelta(Currency String BITMAP,Name String BITMAP,Delta Double) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";
CREATE INDEX FXDelta_Idx ON FXDelta(Currency HASH,Name HASH) USE Constraint="PRIMARY";


CREATE PUBLIC TABLE FXDeltaExtract(bundle String,custom_1 String,custom_2 String,custom_3 String,deal String,
                                   asset_class String,pm String,business_strategy String,instrument String,description String,
                                   currency String,spot Double,_1w Double,_2w Double,_1m Double,
                                   _2m Double,_3m Double,_6m Double,_9m Double,_1y Double,
                                   _2y Double,_3y Double,_5y Double,_10y Double,STATUS String) USE PersistEngine="FAST" RefreshPeriodMs="100" OnUndefColumn="IGNORE" InitialCapacity="100";
CREATE INDEX FXDeltaExtract_Index ON FXDeltaExtract(deal HASH,currency HASH) USE Constraint="PRIMARY";


CREATE PUBLIC TABLE FXDV01PnL(Name String BITMAP,Currency String BITMAP,OneMonth Double,ThreeMonth Double,SixMonth Double,
                              OneYear Double,ThreeYear Double,FiveYear Double,Total Double) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE FXDV01Risks(Name String BITMAP,Currency String BITMAP,OneMonth Double,ThreeMonth Double,SixMonth Double,
                                OneYear Double,ThreeYear Double,FiveYear Double,Total Double) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";
CREATE INDEX FXDV01Risks_Idx ON FXDV01Risks(Name HASH,Currency HASH) USE Constraint="PRIMARY";


CREATE PUBLIC TABLE FXJoin(Category String BITMAP,Name String BITMAP,FXPnL Double) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE FXPnL(Currency String BITMAP,Name String BITMAP,PnL Double) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE FxPriceTestMA(Id Integer,Period Integer,Symbol String,SOD Float,Price Float) USE RefreshPeriodMs="100" OnUndefColumn="ADD" InitialCapacity="1000";


CREATE PUBLIC TABLE FXRisk(ReportIndex Integer,Vega_9m Double,Spot Double,Bundle String,asset_class String,
                           Vega_6m Double,description String,instrument String,SPN String,Gamma Double,
                           Vega_2w Double,CcyPair String,Vega_1y Double,Delta Double,Vega_1w Double,
                           Vega_2y Double,Vega_1m Double,Vega_3m Double,currency String,Vega_2m Double,
                           position Double,Error String,batch_id Long) USE RefreshPeriodMs="100" OnUndefColumn="ADD" InitialCapacity="1000";
CREATE INDEX FXRisk_idx1 ON FXRisk(Bundle HASH,SPN HASH,CcyPair HASH) USE Constraint="PRIMARY";
CREATE TRIGGER FXRiskStatus OFTYPE AMISCRIPT ON FXRisk PRIORITY 0 USE canMutateRow="true" onInsertingScript="if (strIs(CcyPair)) {insert into FXRiskStatus values(Bundle, SPN, CcyPair, Error);return true;} else {insert into FXRiskStatus values(Bundle, SPN, CcyPair, Error);return false;}";


CREATE PUBLIC TABLE FXRiskStatus(Bundle String BITMAP,SPN String BITMAP,CcyPair String BITMAP,Error String BITMAP) USE PersistEngine="FAST" RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";
CREATE INDEX FXRiskStatusIdx ON FXRiskStatus(Bundle HASH,SPN HASH) USE Constraint="PRIMARY";


CREATE PUBLIC TABLE galaxyView(galaxy String,system String,planet String,totalEnergy Double) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE Groups(id Long,symbol String,user String) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE HomeUseCases(name String,url String,icon String,id String) USE PersistEngine="TEXT" RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE IRSPnL(Name String BITMAP,Currency String BITMAP,OneYear Double,TwoYear Double,ThreeYear Double,
                           FiveYear Double,TenYear Double,TwentyYear Double,Total Double) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE IRSRates(Currency String BITMAP,OneYear Double,TwoYear Double,ThreeYear Double,FiveYear Double,
                             TenYear Double,TwentyYear Double) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";
CREATE INDEX IRSRates_Idx ON IRSRates(Currency HASH) USE Constraint="PRIMARY";


CREATE PUBLIC TABLE IrsRates(FloatingRate String,Type String,BloombergTicker String,RateTenor String,ClearingMethod String,
                             Spread String,Currency String,PaymentCalendar String,PaymentLag String,BusinessDayConvention String,
                             CouponTenorFltLeg String,DayCountConventionFltLeg String,Compounding String,FixingCalendar String,FixingLag String,
                             DayCountConventionFixLeg String,CouponRateTypeCouponRateType2 String,CouponRateTypeIdCouponRateType2Id String,Country String,CountryId String,
                             Market String,MarketId String) USE PersistEngine="FAST" RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";
CREATE INDEX RateIndexField ON IrsRates(FloatingRate HASH) USE Constraint="PRIMARY";


CREATE PUBLIC TABLE IRSRisks(Name String BITMAP,Currency String BITMAP,OneYear Double,TwoYear Double,ThreeYear Double,
                             FiveYear Double,TenYear Double,TwentyYear Double,Total Double) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";
CREATE INDEX IRSRisks_Idx ON IRSRisks(Name HASH,Currency HASH) USE Constraint="PRIMARY";


CREATE PUBLIC TABLE IRVolPnL(Name String BITMAP,Currency String BITMAP,Period String BITMAP,OneYear Double,TwoYear Double,
                             ThreeYear Double,FourYear Double,FiveYear Double,SevenYear Double,TenYear Double,
                             FifteenYear Double,TwentyYear Double,ThirtyYear Double) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";
CREATE INDEX IRVolPnL_Idx ON IRVolPnL(Name HASH,Currency HASH,Period HASH) USE Constraint="PRIMARY";


CREATE PUBLIC TABLE IRZeroDelta(ReportIndex Integer,SPN String,Delta Double,Bundle String,asset_class String,
                                Currency String,Curve String,description String,instrument String,currency String,
                                position Double,Tenor String,Error String,batch_id Long) USE RefreshPeriodMs="100" OnUndefColumn="ADD" InitialCapacity="1000";
CREATE INDEX IRZeroDelta_idx1 ON IRZeroDelta(Bundle HASH,SPN HASH,Currency HASH,Curve HASH,Tenor HASH) USE Constraint="PRIMARY";
CREATE TRIGGER IRZeroDeltaStatus OFTYPE AMISCRIPT ON IRZeroDelta PRIORITY 0 USE canMutateRow="true" onInsertingScript="if (strIs(Currency) && strIs(Curve) && strIs(Tenor)) {insert into IRZeroDeltaStatus values(Bundle, SPN, Currency, Curve, Tenor, Error);return true;} else {insert into EqRiskLadderStatus values(Bundle, SPN, Currency, Curve, Tenor, Error);return false;}";


CREATE PUBLIC TABLE IRZeroDeltaStatus(Bundle String BITMAP,SPN String BITMAP,Currency String BITMAP,Curve String BITMAP,Tenor String BITMAP,
                                      Error String BITMAP) USE PersistEngine="FAST" RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";
CREATE INDEX IRZeroDeltaStatusIdx ON IRZeroDeltaStatus(Bundle HASH,SPN HASH) USE Constraint="PRIMARY";


CREATE PUBLIC TABLE JainDataFilterColumns(ColumnName String) USE PersistEngine="FAST" RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE `jg-flex-order_2`(symbol String,orderType String,inputQuantity Double,orderId String,complianceStatus String,
                                      settleDate String,batchId String,filledQuantity Double,sequenceId Integer,accountTargets String,
                                      tradingCurrency String,finalizationStatus String,streetOrders String,createdTime String,id Integer,
                                      clientBatchIdentifier String,owner String,side String,quantity Double,limitPrice Double,
                                      fixTags String,trader String,tradeDate String,settlementCurrency String,weightedAvgPrice Double,
                                      attributes String,user String,status String,notes String,claimed Boolean,
                                      complianceIssues String,accountType String,rejectionReason String,timeInForce String,replacedOrderIds String,
                                      isPending Boolean,replaceStatus String,cancelStatus String,locates String,grossUpMode String,
                                      apiUser String,primeBroker String,bundle String,buySell String,fund String,
                                      securityType String,urgency String,instructions String,C Long) USE PersistEngine="FAST" RefreshPeriodMs="100" OnUndefColumn="ADD" InitialCapacity="1000";
CREATE INDEX OrderOrderId ON `jg-flex-order_2`(orderId HASH) USE Constraint="PRIMARY";
CREATE TRIGGER filterOrders OFTYPE AMISCRIPT ON `jg-flex-order_2` PRIORITY 0 USE onInsertingScript="if (isPending == \"true\" && replaceStatus == null){return false;}if (replacedOrderIds != null){if (replacedOrderIds.length() > 0){String reps = replacedOrderIds.replaceAll(\"[\",\"(\\\"\").replaceAll(\", \",\"\\\", \\\"\").replaceAll(\"]\",\"\\\")\");DELETE FROM `jg-flex-order_2_filtered` WHERE orderId in ${reps};}}insert into `jg-flex-order_2_filtered` values (symbol,orderType,inputQuantity,orderId,complianceStatus,settleDate,batchId,filledQuantity,sequenceId,accountTargets,tradingCurrency,finalizationStatus,streetOrders,createdTime,id,clientBatchIdentifier,owner,side,quantity,limitPrice,fixTags,trader,tradeDate,settlementCurrency,weightedAvgPrice,attributes,user,status,notes,claimed,complianceIssues,accountType,rejectionReason,timeInForce,replacedOrderIds,isPending,replaceStatus,cancelStatus,locates,grossUpMode,apiUser,primeBroker,bundle,buySell,fund,securityType,urgency,instructions);return true;";


CREATE PUBLIC TABLE `jg-flex-order_2_filtered`(symbol String,orderType String,inputQuantity Double,orderId String,complianceStatus String,
                                               settleDate String,batchId String,filledQuantity Double,sequenceId Integer,accountTargets String,
                                               tradingCurrency String,finalizationStatus String,streetOrders String,createdTime String,id Integer,
                                               clientBatchIdentifier String,owner String,side String,quantity Double,limitPrice Double,
                                               fixTags String,trader String,tradeDate String,settlementCurrency String,weightedAvgPrice Double,
                                               attributes String,user String,status String,notes String,claimed Boolean,
                                               complianceIssues String,accountType String,rejectionReason String,timeInForce String,replacedOrderIds String,
                                               isPending Boolean,replaceStatus String,cancelStatus String,locates String,grossUpMode String,
                                               apiUser String,primeBroker String,bundle String,buySell String,fund String,
                                               securityType String,urgency String,instructions String) USE PersistEngine="FAST" RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";
CREATE INDEX OrderOrderId ON `jg-flex-order_2_filtered`(orderId HASH) USE Constraint="PRIMARY";


CREATE PUBLIC TABLE `jg-flex-position_2`(symbol String,weightedAveragePrice Double,transmissionTime String,quantity Double,fund String,
                                         unsettledQuantity Double,attributes String,currency String,primeBroker String,primeBrokerAccount String,
                                         account String,settledQuantity Double,accountType String) USE RefreshPeriodMs="100" OnUndefColumn="ADD" InitialCapacity="1000";


CREATE PUBLIC TABLE LastReceivedODD(tableName String,time UTC) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";
CREATE INDEX LRIndex ON LastReceivedODD(tableName HASH) USE Constraint="PRIMARY";


CREATE PUBLIC TABLE LOG_TRAIL(OrderID String,Timestamp Long,Log String OnDisk Cache="256MB",Latency Long) USE PersistEngine="FAST" NoBroadcast RefreshPeriodMs="100" OnUndefColumn="IGNORE" InitialCapacity="100";
CREATE INDEX ORDERID_IDX ON LOG_TRAIL(OrderID HASH) USE Constraint="NONE";


CREATE PUBLIC TABLE `LR-PNL-Equities`(ReportIndex Integer,Spot Double,asset_class String,description String,instrument String,
                                      `Positional PnL` Double,Deal String,`Trades PnL` Double,Theta Double,SPN String,
                                      USD_Delta Double,Delta Double,HedgeDelta Double,Price Double,Book String,
                                      Qty Double,Instrument String,Rho Double,currency String,USD_Gamma Double,
                                      Arcesium String) USE RefreshPeriodMs="100" OnUndefColumn="ADD" InitialCapacity="1000";
CREATE INDEX idx_LR_PNL_Equities ON `LR-PNL-Equities`(Book HASH,Deal HASH,Instrument HASH) USE Constraint="PRIMARY";


CREATE PUBLIC TABLE MacroFxDelta(bundle String,custom_1 String,custom_2 String,custom_3 String,deal String,
                                 asset_class String,pm String,business_strategy String,instrument String,description String,
                                 currency String,spot Double,_1w Double,_2w Double,_1m Double,
                                 _2m Double,_3m Double,_6m Double,_9m Double,_1y Double,
                                 _2y Double,_3y Double,_5y Double,_10y Double) USE PersistEngine="FAST" RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";
CREATE INDEX MacroFxDelta_idx1 ON MacroFxDelta(deal HASH,description HASH,bundle HASH,currency HASH) USE Constraint="PRIMARY";


CREATE PUBLIC TABLE MacroODD(Deal String,Description String,InstrumentType String,DailyPNL Double,MTDPNL Double,
                             YTDPNL Double,FXExposure Double,Delta Double,Gamma Double,Vega Double,
                             Theta Long,Bundle String,BundleGroup String,BusinessStrategy String,Custom1 String,
                             Custom2 String,ForecastVol Double,MarginalVol Double,`1D95VaR` Double,MarginalVaR Double,
                             StressVaR Double,MarginalVaRSubPM Double,MarginalVolSubPM Double,M Long) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE MacroODDAgg(BundleGroup String,BusinessStrategy String,DailyPNL Double,MTDPNL Double,YTDPNL Double) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE MacroODDIntermediate(Deal String,Description String,InstrumentType String,DailyPNL Double,MTDPNL Double,
                                         YTDPNL Double,FXExposure Double,Delta Double,Gamma Double,Vega Double,
                                         Theta Long,Bundle String,BundleGroup String,BusinessStrategy String,Custom1 String,
                                         Custom2 String,ForecastVol Double,MarginalVol Double,`1D95VaR` Double,MarginalVaR Double,
                                         StressVaR Double) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE MacroODDReport(Deal String,Description String,InstrumentType String,DailyPNL Double,MTDPNL Double,
                                   YTDPNL Double,FXExposure Double,Delta Double,Theta Long,Bundle String,
                                   BundleGroup String,BusinessStrategy String,Custom1 String,Custom2 String,Gamma Double,
                                   Vega Double) USE PersistEngine="TEXT" RefreshPeriodMs="100" OnUndefColumn="ADD" InitialCapacity="1000";
CREATE INDEX MacroODDReportDealIndex ON MacroODDReport(Deal HASH) USE Constraint="PRIMARY";
CREATE TRIGGER MacroODDReportLR OFTYPE AMISCRIPT ON MacroODDReport PRIORITY 0 USE onUpdatedScript="INSERT INTO LastReceivedODD VALUES (\"MacroODDReport\",timestamp())" onInsertedScript="INSERT INTO LastReceivedODD VALUES (\"MacroODDReport\",timestamp())";


CREATE PUBLIC TABLE MacroODDSubPMContribution(Description String,Deal String,Custom1 String,Custom2 String,InstrumentType String,
                                              BusinessStrategy String,MarginalVol Float,Bundle String,BundleGroup String,MarginalVaR Float) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE MacroODDVaRReport(Deal String,Description String,InstrumentType String,ForecastVol Double,MarginalVol Double,
                                      `1D95VaR` Double,MarginalVaR Double,StressVaR Double) USE PersistEngine="TEXT" RefreshPeriodMs="100" OnUndefColumn="ADD" InitialCapacity="1000";
CREATE INDEX MacroODDVaRReportDealIndex ON MacroODDVaRReport(Deal HASH) USE Constraint="PRIMARY";
CREATE TRIGGER MacroODDVaRReportLR OFTYPE AMISCRIPT ON MacroODDVaRReport PRIORITY 0 USE onUpdatedScript="INSERT INTO LastReceivedODD VALUES (\"MacroODDVaRReport\",timestamp())" onInsertedScript="INSERT INTO LastReceivedODD VALUES (\"MacroODDVaRReport\",timestamp())";


CREATE PUBLIC TABLE MacroPortfolio(bundle String,custom_1 String,custom_2 String,custom_3 String,pm String,
                                   business_strategy String,`$_date` String,instrument_id String,asset_class String,instrument String,
                                   description String,currency String,notional String,underlying String,`$_pv` Integer,
                                   eod_underlying_price String,underlying_price String,eod_underlying_vol String,underlying_vol String,eod_price String,
                                   live_prive String,`$_rates_dv01` Integer,`$_fx_delta` Integer,`$_equity_delta` Integer,`$_commodity_delta` Integer,
                                   `$_inflation_dv01` Integer,`$_credit_cs01` Integer,`$_gamma` Integer,`$_vega` Integer,`$_theta` Integer,
                                   `$_dtd_live_pnl` Integer,`$_intraday_trading` Integer,`$_Mtd` String,`$_Ytd` String,`$_Itd` String,
                                   `$_dtd_delta_pnl` Integer,`$_dtd_gamma_pnl` Integer,`$_dtd_vega_pnl` Integer,`$_dtd_theta_pnl` Integer,`$_dtd_unexplained_pnl` Integer) USE PersistEngine="FAST" RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";
CREATE INDEX MacroPortfolio_idx1 ON MacroPortfolio(bundle HASH,instrument HASH) USE Constraint="PRIMARY";


CREATE PUBLIC TABLE MissingRegion(account String,value Double) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE MktData(sym String,price Double) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE Order(qty Integer,filled Integer,status String,I String,E Long) USE RefreshPeriodMs="100" OnUndefColumn="ADD" InitialCapacity="1000";


CREATE PUBLIC TABLE ORDER_SUMMARY(OrdStatus String BITMAP,TimeInForce String BITMAP,OrdType String BITMAP,TradeDate String BITMAP,Symbol String,
                                  OrderCapacity String BITMAP,RoutingHub String BITMAP,Customer String BITMAP,ConnectionName String BITMAP,Currency String BITMAP,
                                  CustomerSlang String,ExDestination String BITMAP,InstanceName String BITMAP,SubCustomerName String,Side String BITMAP,
                                  Account String,OrderFlowCategory String BITMAP,OrderQty Long,ExecQty Long,OpenQty Long,
                                  Notional Double,ExecNotional Double,OpenNotional Double,TotalOrders Integer,Active Integer,
                                  Rejected Integer,Canceled Integer,OrderLatency Long,ResponseLatency Long,OrderLatencyCount Integer,
                                  ResponseLatencyCount Integer,SourceRegion String BITMAP,DestinationRegion String BITMAP,Country String BITMAP,SmartStrategy String BITMAP,
                                  BloomBergCode String BITMAP,ChannelName String BITMAP,SettlementCurrency String BITMAP,TicketStatus String BITMAP,ClientTraderID String BITMAP,
                                  ListID String BITMAP,SwapFlag String BITMAP,TotalNotionalExclCxld Double,NotionalValueUSD Double,ExecNotionalUSD Double,
                                  OpenNotionalUSD Double,TotalNotionalExclCxldUSD Double,OddLot Long,PrimarySales String,SalesPersonID String,
                                  Text String,FlowType String,HasDK Boolean,Swag String,LHEligible String,
                                  SynOrdQty Long,SynExecQty Long,SynAvgPx Double,InMktOrdQty Long,InMktExecQty Long,
                                  SynExecNotional Double,SynExecNotionalUSD Double,CustomerAccount String BITMAP,CustomerID String BITMAP,OMSVendor String BITMAP,
                                  TotalEstimatedCommission Double,SecurityType String BITMAP,ONCInstance String BITMAP,Market String BITMAP,TotalCommission Double) USE PersistEngine="FAST" RefreshPeriodMs="100" OnUndefColumn="IGNORE" InitialCapacity="100";
CREATE INDEX CUSTOMER_IDX ON ORDER_SUMMARY(Customer HASH) USE Constraint="NONE";
CREATE INDEX ROUTINGHUB_IDX ON ORDER_SUMMARY(RoutingHub HASH) USE Constraint="NONE";
CREATE INDEX INSTANCENAME_IDX ON ORDER_SUMMARY(InstanceName HASH) USE Constraint="NONE";
CREATE INDEX CONNECTIONNAME_IDX ON ORDER_SUMMARY(ConnectionName HASH) USE Constraint="NONE";
CREATE INDEX SYMBOL_IDX ON ORDER_SUMMARY(Symbol HASH) USE Constraint="NONE";


CREATE PUBLIC TABLE ORDERS(AllowedActions String BITMAP,OrdStatus String BITMAP,SwapFlag String BITMAP,OrderID String,OrdLinkID String,
                           CumQty Long,RoundLot String BITMAP,LeavesQty Long,AvgPx Double,Account String,
                           ClOrdID String,Currency String BITMAP,OrderQty Long,Price Double,PriceAtClose Double,
                           OrdType String BITMAP,Side String BITMAP,Symbol String,SecurityID String,IDSource String BITMAP,
                           SecurityAltID String,OrderCapacity String BITMAP,TimeInForce String BITMAP,SubCustomerName String,PrimarySales String,
                           SecondarySales String,CustomerSlang String,TradeDate String BITMAP,ConnectionName String BITMAP,InstanceName String BITMAP,
                           OrderPlacer String,RoutingHub String BITMAP,ExDestination String BITMAP,HandlInst String BITMAP,Text String,
                           Customer String BITMAP,OrderFlowCategory String BITMAP,ReceiveTime Long,LastUpdatedTime Long,InboundLatency Long,
                           OutboundLatency Long,InterruptionType String BITMAP,SmartStrategy String BITMAP,CustomerAccount String,TicketStatus String BITMAP,
                           TicketingRejectReason String,LegalEntity String BITMAP,SettlementCurrency String BITMAP,SettlementType String BITMAP,SettlementDate String BITMAP,
                           CommissionType String BITMAP,Commission Double,SettlCurrFxRate Double,SettlCurrFxRateCalc String BITMAP,SettlCurrFxAmt Double,
                           SettlCurrFxTotalAmt Double,SplitID String,MergeID String,SourceRegion String BITMAP,DestinationRegion String BITMAP,
                           PriceRounding Integer,SrcSystemID Long,TotalCommission Double,NetMoney Double,BloomBergCode String BITMAP,
                           ChannelName String BITMAP,Country String BITMAP,Isin String BITMAP,RicCode String BITMAP,SecurityType String BITMAP,
                           Sedol String BITMAP,Ticker String BITMAP,USDRate Double,CustomerSettlementCurrency String BITMAP,CustomerID String BITMAP,
                           MaxFloor Long,ClientTraderID String BITMAP,RerouteStatus String BITMAP,RerouteText String BITMAP,AutoMergeF String BITMAP,
                           SubAccount String BITMAP,AlgoConstraint String BITMAP,SUTFAccount String BITMAP,EstimatedCommission Double,CustomerSettlementType String BITMAP,
                           CustomerSettlementDate String BITMAP,AvgDailyVol Double,ConnectionID String BITMAP,SMCPID String,RestrictedCategory String BITMAP,
                           ListID String BITMAP,FlowType String BITMAP,OddLot Long,SalesPersonID String,ExpireTime Long,
                           ISOCode String,HasDK Boolean,DKReason String,ParentSide String,Swag String,
                           LHEligible String,SynOrdQty Long,SynExecQty Long,SynAvgPx Double,InMktOrdQty Long,
                           InMktExecQty Long,MinPctVol Double,MaxPctVol Double,TargetRate Double,AggressionLevel String,
                           OpenCloseFlag String,OMSVendor String BITMAP,CommFactor Double,InvestorID String BITMAP,VenueOrderID String,
                           OptionDesc String BITMAP,ContractType String BITMAP,StrikePrice Double,ONCInstance String BITMAP,OncStatus String BITMAP,
                           Market String BITMAP,OriginCode String BITMAP,Position String BITMAP,ADVPercentage Double,NetMoney_Temp Double,
                           AeeInstruction String BITMAP,TransactTime Long,StopPx Double,CrossStartTime Long,CrossEndTime Long,
                           OrigExpireTime Long,LastRejectedTime Long,LastModifiedTime Long,OMSNetwork String BITMAP,SecondaryClOrdID String BITMAP) USE PersistEngine="FAST" RefreshPeriodMs="100" OnUndefColumn="IGNORE" InitialCapacity="100";
CREATE INDEX CUSTOMER_IDX ON ORDERS(Customer HASH) USE Constraint="NONE";
CREATE INDEX SplitID_IDX ON ORDERS(SplitID HASH) USE Constraint="NONE";
CREATE INDEX ORDERID_IDX ON ORDERS(OrderID HASH) USE Constraint="PRIMARY";
CREATE INDEX ROUTINGHUB_IDX ON ORDERS(RoutingHub HASH) USE Constraint="NONE";
CREATE INDEX INSTANCENAME_IDX ON ORDERS(InstanceName HASH) USE Constraint="NONE";
CREATE INDEX MergeID_IDX ON ORDERS(MergeID HASH) USE Constraint="NONE";
CREATE INDEX RECEIVETIME_IDX ON ORDERS(ReceiveTime HASH) USE Constraint="NONE";
CREATE INDEX CONNECTIONNAME_IDX ON ORDERS(ConnectionName HASH) USE Constraint="NONE";
CREATE INDEX SYMBOL_IDX ON ORDERS(Symbol HASH) USE Constraint="NONE";


CREATE PUBLIC TABLE Orders(id String,sym String,price Double) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE orders(order_id Integer,customer_id String,product_id String,category String,price Double,
                           quantity Integer,order_date String) USE PersistEngine="FAST" RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE orders1(id Integer,date Integer,name String,price Double) USE PersistEngine="FAST" RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";
CREATE INDEX orders1_idx1223123 ON orders1(id HASH) USE Constraint="PRIMARY";
CREATE INDEX orders1_idx2_nuw ON orders1(date HASH) USE Constraint="NONE";
CREATE TRIGGER relayTrigger OFTYPE RELAY ON orders1 PRIORITY 0 USE port="3289" host="localhost" derivedValues="id=id,date=date,name=name,price=price" where="price>100.0" login="demo" updates="id,name" target="orders2";


CREATE PUBLIC TABLE orders2(id Integer,date Integer,name String,price Double) USE PersistEngine="FAST" RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";
CREATE INDEX orders2_idx2 ON orders2(date HASH) USE Constraint="NONE";
CREATE INDEX orders2_idx1 ON orders2(id HASH) USE Constraint="PRIMARY";


CREATE PUBLIC TABLE PARENT_EXECUTIONS(ClOrdID String,ExecID String,ExecRefID String,ExecType String BITMAP,LastMkt String BITMAP,
                                      LastShares Double,LastPx Double,LastCapacity String BITMAP,OrderID String,Side String BITMAP,
                                      Symbol String,TransactTime Long,TradeDate String BITMAP,Status String BITMAP,SourceRegion String BITMAP,
                                      DestinationRegion String BITMAP,ContraBroker String BITMAP,AllowedActions String BITMAP,InstanceName String BITMAP,SwapFlag String BITMAP,
                                      PrimarySales String,OrderFlowCategory String BITMAP,SalesPersonID String,SwagFill String,LHEligible String) USE PersistEngine="FAST" NoBroadcast RefreshPeriodMs="100" OnUndefColumn="IGNORE" InitialCapacity="100";
CREATE INDEX EXECTYPE_IDX ON PARENT_EXECUTIONS(ExecType HASH) USE Constraint="NONE";
CREATE INDEX STATUS_IDX ON PARENT_EXECUTIONS(Status HASH) USE Constraint="NONE";
CREATE INDEX EXECID_IDX ON PARENT_EXECUTIONS(ExecID HASH,OrderID HASH) USE Constraint="PRIMARY";
CREATE INDEX TRADEDATE_IDX ON PARENT_EXECUTIONS(TradeDate HASH) USE Constraint="NONE";


CREATE PUBLIC TABLE Permissions(user_email String,is_dev Boolean,is_admin Boolean,default_layout String,layouts String,
                                ami_db_permissions String) USE PersistEngine="FAST" RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE PermissionTest(bundle String,value Double) USE PersistEngine="FAST" RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE planetView(planet String,totalEnergy Double) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE PMCategory(Name String,Category String BITMAP) USE PersistEngine="FAST" RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";
CREATE INDEX PMCategory_Idx ON PMCategory(Name HASH) USE Constraint="PRIMARY";


CREATE PUBLIC TABLE PMLevelData(Book String,`Business Unit` String,`Daily Vol $ mm` Float,`Worst Stress` Float,`Gamma $` Float,
                                `Portfolio Vol Contribution %` Float,`Marginal Vol Contribution %` Float,`VaR 95% Daily %` Float,`Marginal Var %` Float) USE PersistEngine="TEXT" RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE PNLExplainedDetail(OldNPV Double,Theta Double,FixingRestate Long,MktRestate Long,OtherRestate Long,
                                       Fixing Long,CreditEvent Long,Phys Long,PhysSpot Long,Carry Double,
                                       EqSpot Long,EqFuturesBasis Long,FXSpot Long,Rates Long,Inflation Long,
                                       Bond Long,Credit Long,CreditVol Long,FXVol Long,SwoVol Long,
                                       CapVol Long,Div Long,EqVol Long,Commods Long,Shaping Long,
                                       Futures Long,FutVol Long,CommodVol Long,CommodVolByStrike Long,HeatRateVol Long,
                                       CrossAssetCorr Long,FCMParams Long,Residual Long,Trades Long,Total Double,
                                       NewNPV Double,Instrument String,Description String) USE RefreshPeriodMs="100" OnUndefColumn="ADD" InitialCapacity="1000";


CREATE PUBLIC TABLE PnLSummary(Category String BITMAP,Name String BITMAP,TotalPnL Double,FXPnL Double,RatesPnL Double,
                               VolPnL Double,CommoditiesPnL Double,EquitiesPnL Double) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";
CREATE INDEX PnLSummary_Idx ON PnLSummary(Name HASH) USE Constraint="PRIMARY";


CREATE PUBLIC TABLE PortfolioLevelData(r String,`Daily Vol $ mm` Float,`Worst Stress` Float,`Gamma $` Float,`Portfolio Vol Contribution %` Float,
                                       `Marginal Vol Contribution %` Float,`VaR 95% Daily %` Float,`Marginal Var %` Float) USE PersistEngine="TEXT" RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE PortfolioManagers(Name String,Category String) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";
CREATE INDEX PortfolioManagers_Idx ON PortfolioManagers(Name HASH) USE Constraint="PRIMARY";


CREATE PUBLIC TABLE PortfolioMonitoring(Hierarchy_BusinessStrategy String,Hierarchy_BundleGroup String,Hierarchy_BusinessUnit String,Hierarchy_Bundle String,Hierarchy_BundleRisk1 String,
                                        Hierarchy_BundleRisk2 String,Hierarchy_BundleCustom1 String,Hierarchy_BundleCustom2 String,Hierarchy_BundleCustom3 String,Hierarchy_Region String,
                                        Security_SPN Integer,Security_Ticker String,Security_Exchange String,Security_Sector String,Security_Issuer String,
                                        Security_Factor Float,Position_LongShort String,Position_QuantityLocal Float,Delta_DeltaUsd Float,Delta_DeltaDealAdjUsd Float,
                                        Greeks_GammaUsd Float,Greeks_VegaUsd Float,Greeks_ThetaUsd Float,Credit_Dv01Usd Float,Credit_Cs01Usd Float,
                                        Credit_Cs10Usd Float,Position_CostAvgUnit Float,Price_LastPrice Float,Price_PriorDay Float,`P&L_TotalDTD` Float,
                                        `P&L_TotalMTD` Float,`P&L_TotalYTD` Float,`P&L_TotalITD` Float,Permission_SecurityGroup String) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE PortfolioMonitoringAgg(`#` Integer,bundle String,custom_1 String,custom_2 String,custom_3 String,
                                           sub_pm String,pm String,business_strategy String,firm String,`bundle-var` Double,
                                           `bundle-forecast_vol` Double,`bundle-stress_var` Double,`bundle-marginal_var` Double,`bundle-marginal_vol` Double,`bundle-1d_price_return` Double,
                                           `bundle-1d_simple_alpha` Double,`bundle-beta` Double,`bundle-$_vol` Double,`bundle-$_idio_vol` Double,`custom_1-var` Double,
                                           `custom_1-forecast_vol` Double,`custom_1-stress_var` Double,`custom_1-marginal_var` Double,`custom_1-marginal_vol` Double,`custom_1-1d_price_return` Double,
                                           `custom_1-1d_simple_alpha` Double,`custom_1-beta` Double,`custom_1-$_vol` Double,`custom_1-$_idio_vol` Double,`custom_2-var` Double,
                                           `custom_2-forecast_vol` Double,`custom_2-stress_var` Double,`custom_2-marginal_var` Double,`custom_2-marginal_vol` Double,`custom_2-1d_price_return` Double,
                                           `custom_2-1d_simple_alpha` Double,`custom_2-beta` Double,`custom_2-$_vol` Double,`custom_2-$_idio_vol` Double,`custom_3-var` Double,
                                           `custom_3-forecast_vol` Double,`custom_3-stress_var` Double,`custom_3-marginal_var` Double,`custom_3-marginal_vol` Double,`custom_3-1d_price_return` Double,
                                           `custom_3-1d_simple_alpha` Double,`custom_3-beta` Double,`custom_3-$_vol` Double,`custom_3-$_idio_vol` Double,`sub_pm-var` Double,
                                           `sub_pm-forecast_vol` Double,`sub_pm-stress_var` Double,`sub_pm-marginal_var` Double,`sub_pm-marginal_vol` Double,`sub_pm-1d_price_return` Double,
                                           `sub_pm-1d_simple_alpha` Double,`sub_pm-beta` Double,`sub_pm-$_vol` Double,`sub_pm-$_idio_vol` Double,`pm-var` Double,
                                           `pm-forecast_vol` Double,`pm-stress_var` Double,`pm-marginal_var` Double,`pm-marginal_vol` Double,`pm-1d_price_return` Double,
                                           `pm-1d_simple_alpha` Double,`pm-beta` Double,`pm-$_vol` Double,`pm-$_idio_vol` Double,`business_strategy-var` Double,
                                           `business_strategy-forecast_vol` Double,`business_strategy-stress_var` Double,`business_strategy-marginal_var` Double,`business_strategy-marginal_vol` Double,`business_strategy-1d_price_return` Double,
                                           `business_strategy-1d_simple_alpha` Double,`business_strategy-beta` Double,`business_strategy-$_vol` Double,`business_strategy-$_idio_vol` Double,`firm-var` Double,
                                           `firm-forecast_vol` Double,`firm-stress_var` Double,`firm-marginal_var` Double,`firm-marginal_vol` Double,`firm-1d_price_return` Double,
                                           `firm-1d_simple_alpha` Double,`firm-beta` Double,`firm-$_vol` Double,`firm-$_idio_vol` Double) USE PersistEngine="FAST" RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE PortfolioMonitoringDetail(`#` Integer,bundle String,custom_1 String,custom_2 String,custom_3 String,
                                              sub_pm String,pm String,business_strategy String,date Integer,instrument_id Long,
                                              asset_class String,instrument String,description String,currency String,quantity Double,
                                              underlying String,`$_pv` Double,eod_underlying_price Double,underlying_price Double,eod_underlying_vol Double,
                                              underlying_vol Double,eod_local_price Double,live_local_price Double,`$_rates_dv01` Integer,`$_fx_delta` Integer,
                                              `$_equity_delta` Double,`$_commodity_delta` Double,`$_inflation_dv01` Double,`$_credit_cs01` Double,`$_credit_cs10` Double,
                                              `$_gamma` Double,`$_vega` Double,`$_theta` Double,`$_dtd_live_pnl` Double,`$_intraday_trading_pnl` Double,
                                              `$_mtd_pnl` Double,`$_ytd_pnl` Double,`$_itd_pnl` Double,`$_dtd_delta_pnl` Double,`$_dtd_gamma_pnl` Double,
                                              `$_dtd_vega_pnl` Double,`$_dtd_theta_pnl` Double,`$_dtd_unexplained_pnl` Boolean,`$_var` Double,`$_forecast_vol` Double,
                                              `$_stress_var` Double,`$_marginal_var` Double,`$_marginal_vol` Double,issuer String,`$_eod_price` Double,
                                              `$_live_prive` Double,local_cost Double,`$_cost` Double,local_unit_cost Double,`$_unit_cost` Double,
                                              local_accrued_interest Double,`$_accrued_interest` Double,traded_quantity Integer,local_notional Double,`$_notional` Double,
                                              longshort String,`$_realized_price_pnl` Double,`$_realized_fx_pnl` Double,`$_unrealized_price_pnl` Double,`$_unrealized_fx_pnl` Double,
                                              `$_dividend_pnl` Double,`$_interest_pnl` Double,`$_other_pnl` Double,`1d_price_return` Double,`1d_simple_alpha` Double,
                                              skill_factor_pnl Double,residual_factor_pnl Double,sector_factor_pnl Double,beta Double,`$_vol` Double,
                                              `$_dtd_residual_pnl` Double,`$_mtd_residual_pnl` Double,`$_ytd_residual_pnl` Double,fx_rate Double,usdccy_fx_rate Double) USE PersistEngine="FAST" RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE positionCountsByPortfolio(portfolioID Long,cnt Integer) USE PersistEngine="FAST" RefreshPeriodMs="10000" OnUndefColumn="ADD" InitialCapacity="1000";


CREATE PUBLIC TABLE PositionReport(DealID String,Book String,LastEventTime String,Pos String,Description String,
                                   Type String,Quantity Double,DealObj String,NextLD String,FinalSettle String,
                                   NumEvents Long,InstrumentClass String,Asset String,BasketEventDate String,Class String,
                                   ClearingHouse String,Contract String,Denominated String,ExpirationDate String,Market String,
                                   MarketType String,OptionType String,Pair String,SettlementDate String,SplitEventDate String,
                                   Strike String,Tenor String,Ticker String,ValueDate String,ID String,
                                   ReferenceDescription String,TradedPrice Double) USE RefreshPeriodMs="100" OnUndefColumn="ADD" InitialCapacity="1000";
CREATE INDEX PositionIndex ON PositionReport(DealID HASH,Pos HASH) USE Constraint="PRIMARY";


CREATE PUBLIC TABLE PRODUCT_DATA(SMCP String,FII String,Description String,CUSP String,REUT String,
                                 TCKR String,BLOT String,BLOM String,ISIN String,SMBS String,
                                 TKRS String,SEDL String,QUIK String,RICC String,SettlementDays String BITMAP,
                                 ClosingPrice Double,ExchangeCountry String BITMAP,IssueCurrency String BITMAP,IssuingCountry String BITMAP,SettlementCountry String BITMAP,
                                 ClosingBidPrice Double,ClosingAskPrice Double,PrimaryExchangeCode String BITMAP,PrimaryExchangeRoundLot Double,InstrumentType String BITMAP,
                                 IntlType String BITMAP,IntlSubType String BITMAP,OutstandingShares Long,ProductSubType String BITMAP,ProductType String BITMAP,
                                 RestrictedCategory String BITMAP,SecurityType String BITMAP,AvgVol20D Double,AvgVol5D Double,EasyToBorrowIndicator String BITMAP,
                                 MarketMakerFlag String BITMAP,LastTraded Double,GMDClosingPrice Double,ExchangeTimestamp Long,Timestamp Long,
                                 IsRegSHO204Eligible String BITMAP,AllowedActions String BITMAP,EditedBy String BITMAP) USE PersistEngine="FAST" NoBroadcast RefreshPeriodMs="100" OnUndefColumn="IGNORE" InitialCapacity="100";
CREATE INDEX PRIMARYEXCHANGECODE_IDX ON PRODUCT_DATA(PrimaryExchangeCode HASH) USE Constraint="NONE";
CREATE INDEX PRODUCT_FII_IDX ON PRODUCT_DATA(FII HASH) USE Constraint="PRIMARY";


CREATE PUBLIC TABLE RatesAgg(Name String BITMAP,RatesPnL Double) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE RatesBbgMapping(Currency String,Period String,BbgTicker String) USE PersistEngine="FAST" RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";
CREATE INDEX RatesBbgMapping_Idx ON RatesBbgMapping(Currency HASH,Period HASH) USE Constraint="PRIMARY";


CREATE PUBLIC TABLE RatesDV01(bundle String NoNull,custom_1 String,custom_2 String,custom_3 String,pm String,
                              business_strategy String,bucketed_nominal_rate String,asset_class String,instrument String,description String,
                              currency String,curve String,position String,deal String,_1m Double,
                              _2m Double,_3m Double,_6m Double,_9m Double,_18m Double,
                              _1y Double,_2y Double,_3y Double,_5y Double,_10y Double,
                              _20y Double,_30y Double,_40y Double,_50y Double) USE PersistEngine="FAST" RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";
CREATE INDEX RatesDV01_idx1 ON RatesDV01(bundle HASH,deal HASH) USE Constraint="PRIMARY";


CREATE PUBLIC TABLE RatesDV01V2(bundle String,custom_1 String,custom_2 String,custom_3 String,pm String,
                                business_strategy String,bucketed_nominal_rate String,asset_class String,instrument String,description String,
                                currency String,curve String,position String,deal String,_1m Double,
                                _2m Double,_3m Double,_6m Double,_9m Double,_18m Double,
                                _1y Double,_2y Double,_3y Double,_5y Double,_10y Double,
                                _20y Double,_30y Double,_40y Double,_50y Double,STATUS String) USE PersistEngine="FAST" RefreshPeriodMs="100" OnUndefColumn="IGNORE" InitialCapacity="100";
CREATE INDEX RatesDV01V2_Index ON RatesDV01V2(deal HASH) USE Constraint="PRIMARY";


CREATE PUBLIC TABLE RatesJoin(Category String BITMAP,Name String BITMAP,FXPnL Double,RatesPnL Double) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE RatesPnL(Name String BITMAP,Currency String BITMAP,PnL Double) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE RatesXccyBbgMapping(Currency String,Period String,BbgTicker String) USE PersistEngine="FAST" RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";
CREATE INDEX RatesXccyBbgMapping_Idx ON RatesXccyBbgMapping(Currency HASH,Period HASH) USE Constraint="PRIMARY";


CREATE PUBLIC TABLE RAW_FIX_MESSAGES(SessionID String BITMAP,Message String,EventTime Long) USE PersistEngine="FAST" NoBroadcast RefreshPeriodMs="100" OnUndefColumn="IGNORE" InitialCapacity="100";
CREATE INDEX SESSIONID_IDX ON RAW_FIX_MESSAGES(SessionID HASH) USE Constraint="NONE";


CREATE PUBLIC TABLE RealtimePrice(Symbol String,Last Float,Ask Float,Bid Float) USE RefreshPeriodMs="100" OnUndefColumn="ADD" InitialCapacity="1000";


CREATE PUBLIC TABLE RestrictedList(rc String,idBbCompany Long,longCompName String,idBbParentCo Long) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";
CREATE INDEX idIdx ON RestrictedList(idBbCompany HASH) USE Constraint="NONE";
CREATE INDEX parentIdx ON RestrictedList(idBbParentCo HASH) USE Constraint="NONE";


CREATE PUBLIC TABLE riskConfigAggdCMLIQPercentsConfig(cmPercent Double,liqPercent Double,cmLiqPrecent Double,cmSquare Double,liqSquare Double,
                                                      cnt Integer,I String) USE PersistEngine="FAST" RefreshPeriodMs="1000" OnUndefColumn="ADD" InitialCapacity="1000";


CREATE PUBLIC TABLE riskConfigCMLIQPercentsConfig(index Integer,aggID Integer,currentMarginPercent Double,liquidationPercent Double) USE PersistEngine="FAST" RefreshPeriodMs="1000" OnUndefColumn="ADD" InitialCapacity="1000";


CREATE PUBLIC TABLE riskConfigInputsAssumptions(adqBreach Double,autoLiqPcntOfADQBreach Double,autoLiqPcntOfADQNotBreach Double,lspPositiveEquity Double,lspNegativeEquity Double,
                                                insuranceFund Double,lspLockedCapNotional Double,insuranceFundContrib Double,insuranceAbsorbPcnt Double,thirtyADQNotionalBTC Double,
                                                thirtyADQNotionalETH Double,lspCapacityNotionalBTC Double,lspCapacityNotionalETH Double,thirtyADQNotionalXRP Double,thirtyADQNotionalLTC Double,
                                                lspCapacityNotionalXRP Double,lspCapacityNotionalLTC Double) USE PersistEngine="FAST" RefreshPeriodMs="1000" OnUndefColumn="ADD" InitialCapacity="100";


CREATE PUBLIC TABLE riskDisplayFirmLevelInstrumentShocks(neg_75_shockPnl Double,neg_75_currentMargin Double,neg_75_liquidationAmount Double,neg_75_autoLiquidation Double,neg_75_lspAutoDeleverage Double,
                                                         neg_75_insuranceFundClawback Double,neg_75_lspBalance Double,neg_50_shockPnl Double,neg_50_currentMargin Double,neg_50_liquidationAmount Double,
                                                         neg_50_autoLiquidation Double,neg_50_lspAutoDeleverage Double,neg_50_insuranceFundClawback Double,neg_50_lspBalance Double,neg_35_shockPnl Double,
                                                         neg_35_currentMargin Double,neg_35_liquidationAmount Double,neg_35_autoLiquidation Double,neg_35_lspAutoDeleverage Double,neg_35_insuranceFundClawback Double,
                                                         neg_35_lspBalance Double,neg_25_shockPnl Double,neg_25_currentMargin Double,neg_25_liquidationAmount Double,neg_25_autoLiquidation Double,
                                                         neg_25_lspAutoDeleverage Double,neg_25_insuranceFundClawback Double,neg_25_lspBalance Double,neg_10_shockPnl Double,neg_10_currentMargin Double,
                                                         neg_10_liquidationAmount Double,neg_10_autoLiquidation Double,neg_10_lspAutoDeleverage Double,neg_10_insuranceFundClawback Double,neg_10_lspBalance Double,
                                                         neg_5_shockPnl Double,neg_5_currentMargin Double,neg_5_liquidationAmount Double,neg_5_autoLiquidation Double,neg_5_lspAutoDeleverage Double,
                                                         neg_5_insuranceFundClawback Double,neg_5_lspBalance Double,pos_5_shockPnl Double,pos_5_currentMargin Double,pos_5_liquidationAmount Double,
                                                         pos_5_autoLiquidation Double,pos_5_lspAutoDeleverage Double,pos_5_insuranceFundClawback Double,pos_5_lspBalance Double,pos_10_shockPnl Double,
                                                         pos_10_currentMargin Double,pos_10_liquidationAmount Double,pos_10_autoLiquidation Double,pos_10_lspAutoDeleverage Double,pos_10_insuranceFundClawback Double,
                                                         pos_10_lspBalance Double,pos_25_shockPnl Double,pos_25_currentMargin Double,pos_25_liquidationAmount Double,pos_25_autoLiquidation Double,
                                                         pos_25_lspAutoDeleverage Double,pos_25_insuranceFundClawback Double,pos_25_lspBalance Double,pos_35_shockPnl Double,pos_35_currentMargin Double,
                                                         pos_35_liquidationAmount Double,pos_35_autoLiquidation Double,pos_35_lspAutoDeleverage Double,pos_35_insuranceFundClawback Double,pos_35_lspBalance Double,
                                                         pos_50_shockPnl Double,pos_50_currentMargin Double,pos_50_liquidationAmount Double,pos_50_autoLiquidation Double,pos_50_lspAutoDeleverage Double,
                                                         pos_50_insuranceFundClawback Double,pos_50_lspBalance Double,pos_100_shockPnl Double,pos_100_currentMargin Double,pos_100_liquidationAmount Double,
                                                         pos_100_autoLiquidation Double,pos_100_lspAutoDeleverage Double,pos_100_insuranceFundClawback Double,pos_100_lspBalance Double,notional Double,
                                                         unRealizedPnl Double,currentMargin Double,currentMarginUsd Double,maintenanceMargin Double,instrumentID Long,
                                                         baseSymbol String BITMAP,I String) USE PersistEngine="FAST" RefreshPeriodMs="500" OnUndefColumn="ADD" InitialCapacity="1000";


CREATE PUBLIC TABLE riskDisplayProgramBalancesShocks(neg_75_lspCapacity Double,neg_50_lspCapacity Double,neg_35_lspCapacity Double,neg_25_lspCapacity Double,neg_10_lspCapacity Double,
                                                     neg_5_lspCapacity Double,pos_5_lspCapacity Double,pos_10_lspCapacity Double,pos_25_lspCapacity Double,pos_35_lspCapacity Double,
                                                     pos_50_lspCapacity Double,pos_100_lspCapacity Double,neg_75_insFundBal Double,neg_50_insFundBal Double,neg_35_insFundBal Double,
                                                     neg_25_insFundBal Double,neg_10_insFundBal Double,neg_5_insFundBal Double,pos_5_insFundBal Double,pos_10_insFundBal Double,
                                                     pos_25_insFundBal Double,pos_35_insFundBal Double,pos_50_insFundBal Double,pos_100_insFundBal Double,symbol String BITMAP,
                                                     I String) USE PersistEngine="FAST" RefreshPeriodMs="1000" OnUndefColumn="ADD" InitialCapacity="1000";


CREATE PUBLIC TABLE riskDisplayShockedPositions(neg_75_shockPnl Double,neg_75_currentMargin Double,neg_75_liquidationAmount Double,neg_75_autoLiquidation Double,neg_75_autoLiquidationCurrentMargin Double,
                                                neg_75_lspAutoDeleverage Double,neg_75_assignmentsCurrentMargin Double,neg_75_insuranceFundClawback Double,neg_50_shockPnl Double,neg_50_currentMargin Double,
                                                neg_50_liquidationAmount Double,neg_50_autoLiquidation Double,neg_50_autoLiquidationCurrentMargin Double,neg_50_lspAutoDeleverage Double,neg_50_assignmentsCurrentMargin Double,
                                                neg_50_insuranceFundClawback Double,neg_35_shockPnl Double,neg_35_currentMargin Double,neg_35_liquidationAmount Double,neg_35_autoLiquidation Double,
                                                neg_35_autoLiquidationCurrentMargin Double,neg_35_lspAutoDeleverage Double,neg_35_assignmentsCurrentMargin Double,neg_35_insuranceFundClawback Double,neg_25_shockPnl Double,
                                                neg_25_currentMargin Double,neg_25_liquidationAmount Double,neg_25_autoLiquidation Double,neg_25_autoLiquidationCurrentMargin Double,neg_25_lspAutoDeleverage Double,
                                                neg_25_assignmentsCurrentMargin Double,neg_25_insuranceFundClawback Double,neg_10_shockPnl Double,neg_10_currentMargin Double,neg_10_liquidationAmount Double,
                                                neg_10_autoLiquidation Double,neg_10_autoLiquidationCurrentMargin Double,neg_10_lspAutoDeleverage Double,neg_10_assignmentsCurrentMargin Double,neg_10_insuranceFundClawback Double,
                                                neg_5_shockPnl Double,neg_5_currentMargin Double,neg_5_liquidationAmount Double,neg_5_autoLiquidation Double,neg_5_autoLiquidationCurrentMargin Double,
                                                neg_5_lspAutoDeleverage Double,neg_5_assignmentsCurrentMargin Double,neg_5_insuranceFundClawback Double,pos_5_shockPnl Double,pos_5_currentMargin Double,
                                                pos_5_liquidationAmount Double,pos_5_autoLiquidation Double,pos_5_autoLiquidationCurrentMargin Double,pos_5_lspAutoDeleverage Double,pos_5_assignmentsCurrentMargin Double,
                                                pos_5_insuranceFundClawback Double,pos_10_shockPnl Double,pos_10_currentMargin Double,pos_10_liquidationAmount Double,pos_10_autoLiquidation Double,
                                                pos_10_autoLiquidationCurrentMargin Double,pos_10_lspAutoDeleverage Double,pos_10_assignmentsCurrentMargin Double,pos_10_insuranceFundClawback Double,pos_25_shockPnl Double,
                                                pos_25_currentMargin Double,pos_25_liquidationAmount Double,pos_25_autoLiquidation Double,pos_25_autoLiquidationCurrentMargin Double,pos_25_lspAutoDeleverage Double,
                                                pos_25_assignmentsCurrentMargin Double,pos_25_insuranceFundClawback Double,pos_35_shockPnl Double,pos_35_currentMargin Double,pos_35_liquidationAmount Double,
                                                pos_35_autoLiquidation Double,pos_35_autoLiquidationCurrentMargin Double,pos_35_lspAutoDeleverage Double,pos_35_assignmentsCurrentMargin Double,pos_35_insuranceFundClawback Double,
                                                pos_50_shockPnl Double,pos_50_currentMargin Double,pos_50_liquidationAmount Double,pos_50_autoLiquidation Double,pos_50_autoLiquidationCurrentMargin Double,
                                                pos_50_lspAutoDeleverage Double,pos_50_assignmentsCurrentMargin Double,pos_50_insuranceFundClawback Double,pos_100_shockPnl Double,pos_100_currentMargin Double,
                                                pos_100_liquidationAmount Double,pos_100_autoLiquidation Double,pos_100_autoLiquidationCurrentMargin Double,pos_100_lspAutoDeleverage Double,pos_100_assignmentsCurrentMargin Double,
                                                pos_100_insuranceFundClawback Double,positionNotional Double,unRealizedPnl Double,initialMargin Double,currentMargin Double,
                                                currentMarginUsd Double,instrumentID Long,portfolioID Long,isLong Boolean,symbol String BITMAP,
                                                portfolioName String BITMAP,I String) USE PersistEngine="FAST" RefreshPeriodMs="500" OnUndefColumn="ADD" InitialCapacity="1000";


CREATE PUBLIC TABLE riskDisplaySimulatedPortfolioShocks(neg_75_shockPnl Double,neg_75_currentMargin Double,neg_75_liquidationAmount Double,neg_75_autoLiquidation Double,neg_75_autoLiquidationCurrentMargin Double,
                                                        neg_75_lspAutoDeleverage Double,neg_75_assignmentsCurrentMargin Double,neg_75_insuranceFundClawback Double,neg_50_shockPnl Double,neg_50_currentMargin Double,
                                                        neg_50_liquidationAmount Double,neg_50_autoLiquidation Double,neg_50_autoLiquidationCurrentMargin Double,neg_50_lspAutoDeleverage Double,neg_50_assignmentsCurrentMargin Double,
                                                        neg_50_insuranceFundClawback Double,neg_35_shockPnl Double,neg_35_currentMargin Double,neg_35_liquidationAmount Double,neg_35_autoLiquidation Double,
                                                        neg_35_autoLiquidationCurrentMargin Double,neg_35_lspAutoDeleverage Double,neg_35_assignmentsCurrentMargin Double,neg_35_insuranceFundClawback Double,neg_25_shockPnl Double,
                                                        neg_25_currentMargin Double,neg_25_liquidationAmount Double,neg_25_autoLiquidation Double,neg_25_autoLiquidationCurrentMargin Double,neg_25_lspAutoDeleverage Double,
                                                        neg_25_assignmentsCurrentMargin Double,neg_25_insuranceFundClawback Double,neg_10_shockPnl Double,neg_10_currentMargin Double,neg_10_liquidationAmount Double,
                                                        neg_10_autoLiquidation Double,neg_10_autoLiquidationCurrentMargin Double,neg_10_lspAutoDeleverage Double,neg_10_assignmentsCurrentMargin Double,neg_10_insuranceFundClawback Double,
                                                        neg_5_shockPnl Double,neg_5_currentMargin Double,neg_5_liquidationAmount Double,neg_5_autoLiquidation Double,neg_5_autoLiquidationCurrentMargin Double,
                                                        neg_5_lspAutoDeleverage Double,neg_5_assignmentsCurrentMargin Double,neg_5_insuranceFundClawback Double,pos_5_shockPnl Double,pos_5_currentMargin Double,
                                                        pos_5_liquidationAmount Double,pos_5_autoLiquidation Double,pos_5_autoLiquidationCurrentMargin Double,pos_5_lspAutoDeleverage Double,pos_5_assignmentsCurrentMargin Double,
                                                        pos_5_insuranceFundClawback Double,pos_10_shockPnl Double,pos_10_currentMargin Double,pos_10_liquidationAmount Double,pos_10_autoLiquidation Double,
                                                        pos_10_autoLiquidationCurrentMargin Double,pos_10_lspAutoDeleverage Double,pos_10_assignmentsCurrentMargin Double,pos_10_insuranceFundClawback Double,pos_25_shockPnl Double,
                                                        pos_25_currentMargin Double,pos_25_liquidationAmount Double,pos_25_autoLiquidation Double,pos_25_autoLiquidationCurrentMargin Double,pos_25_lspAutoDeleverage Double,
                                                        pos_25_assignmentsCurrentMargin Double,pos_25_insuranceFundClawback Double,pos_35_shockPnl Double,pos_35_currentMargin Double,pos_35_liquidationAmount Double,
                                                        pos_35_autoLiquidation Double,pos_35_autoLiquidationCurrentMargin Double,pos_35_lspAutoDeleverage Double,pos_35_assignmentsCurrentMargin Double,pos_35_insuranceFundClawback Double,
                                                        pos_50_shockPnl Double,pos_50_currentMargin Double,pos_50_liquidationAmount Double,pos_50_autoLiquidation Double,pos_50_autoLiquidationCurrentMargin Double,
                                                        pos_50_lspAutoDeleverage Double,pos_50_assignmentsCurrentMargin Double,pos_50_insuranceFundClawback Double,pos_100_shockPnl Double,pos_100_currentMargin Double,
                                                        pos_100_liquidationAmount Double,pos_100_autoLiquidation Double,pos_100_autoLiquidationCurrentMargin Double,pos_100_lspAutoDeleverage Double,pos_100_assignmentsCurrentMargin Double,
                                                        pos_100_insuranceFundClawback Double,portfolioNotional Double,unRealizedPnl Double,initialMargin Double,currentMargin Double,
                                                        currentMarginUsd Double,portfolioID Long,portfolioName String BITMAP,I String) USE PersistEngine="FAST" RefreshPeriodMs="500" OnUndefColumn="ADD" InitialCapacity="1000";


CREATE PUBLIC TABLE riskDisplayTotalFirmLevelShocks(neg_75_shockPnl Double,neg_75_currentMargin Double,neg_75_liquidationAmount Double,neg_75_autoLiquidation Double,neg_75_lspAutoDeleverage Double,
                                                    neg_75_insuranceFundClawbacks Double,neg_75_lspBalance Double,neg_75_autoDeleverageBalance Double,neg_75_insuranceFundBalance Double,neg_75_clawbacks Double,
                                                    neg_50_shockPnl Double,neg_50_currentMargin Double,neg_50_liquidationAmount Double,neg_50_autoLiquidation Double,neg_50_lspAutoDeleverage Double,
                                                    neg_50_insuranceFundClawbacks Double,neg_50_lspBalance Double,neg_50_autoDeleverageBalance Double,neg_50_insuranceFundBalance Double,neg_50_clawbacks Double,
                                                    neg_35_shockPnl Double,neg_35_currentMargin Double,neg_35_liquidationAmount Double,neg_35_autoLiquidation Double,neg_35_lspAutoDeleverage Double,
                                                    neg_35_insuranceFundClawbacks Double,neg_35_lspBalance Double,neg_35_autoDeleverageBalance Double,neg_35_insuranceFundBalance Double,neg_35_clawbacks Double,
                                                    neg_25_shockPnl Double,neg_25_currentMargin Double,neg_25_liquidationAmount Double,neg_25_autoLiquidation Double,neg_25_lspAutoDeleverage Double,
                                                    neg_25_insuranceFundClawbacks Double,neg_25_lspBalance Double,neg_25_autoDeleverageBalance Double,neg_25_insuranceFundBalance Double,neg_25_clawbacks Double,
                                                    neg_10_shockPnl Double,neg_10_currentMargin Double,neg_10_liquidationAmount Double,neg_10_autoLiquidation Double,neg_10_lspAutoDeleverage Double,
                                                    neg_10_insuranceFundClawbacks Double,neg_10_lspBalance Double,neg_10_autoDeleverageBalance Double,neg_10_insuranceFundBalance Double,neg_10_clawbacks Double,
                                                    neg_5_shockPnl Double,neg_5_currentMargin Double,neg_5_liquidationAmount Double,neg_5_autoLiquidation Double,neg_5_lspAutoDeleverage Double,
                                                    neg_5_insuranceFundClawbacks Double,neg_5_lspBalance Double,neg_5_autoDeleverageBalance Double,neg_5_insuranceFundBalance Double,neg_5_clawbacks Double,
                                                    pos_5_shockPnl Double,pos_5_currentMargin Double,pos_5_liquidationAmount Double,pos_5_autoLiquidation Double,pos_5_lspAutoDeleverage Double,
                                                    pos_5_insuranceFundClawbacks Double,pos_5_lspBalance Double,pos_5_autoDeleverageBalance Double,pos_5_insuranceFundBalance Double,pos_5_clawbacks Double,
                                                    pos_10_shockPnl Double,pos_10_currentMargin Double,pos_10_liquidationAmount Double,pos_10_autoLiquidation Double,pos_10_lspAutoDeleverage Double,
                                                    pos_10_insuranceFundClawbacks Double,pos_10_lspBalance Double,pos_10_autoDeleverageBalance Double,pos_10_insuranceFundBalance Double,pos_10_clawbacks Double,
                                                    pos_25_shockPnl Double,pos_25_currentMargin Double,pos_25_liquidationAmount Double,pos_25_autoLiquidation Double,pos_25_lspAutoDeleverage Double,
                                                    pos_25_insuranceFundClawbacks Double,pos_25_lspBalance Double,pos_25_autoDeleverageBalance Double,pos_25_insuranceFundBalance Double,pos_25_clawbacks Double,
                                                    pos_35_shockPnl Double,pos_35_currentMargin Double,pos_35_liquidationAmount Double,pos_35_autoLiquidation Double,pos_35_lspAutoDeleverage Double,
                                                    pos_35_insuranceFundClawbacks Double,pos_35_lspBalance Double,pos_35_autoDeleverageBalance Double,pos_35_insuranceFundBalance Double,pos_35_clawbacks Double,
                                                    pos_50_shockPnl Double,pos_50_currentMargin Double,pos_50_liquidationAmount Double,pos_50_autoLiquidation Double,pos_50_lspAutoDeleverage Double,
                                                    pos_50_insuranceFundClawbacks Double,pos_50_lspBalance Double,pos_50_autoDeleverageBalance Double,pos_50_insuranceFundBalance Double,pos_50_clawbacks Double,
                                                    pos_100_shockPnl Double,pos_100_currentMargin Double,pos_100_liquidationAmount Double,pos_100_autoLiquidation Double,pos_100_lspAutoDeleverage Double,
                                                    pos_100_insuranceFundClawbacks Double,pos_100_lspBalance Double,pos_100_autoDeleverageBalance Double,pos_100_insuranceFundBalance Double,pos_100_clawbacks Double,
                                                    notional Double,unRealizedPnl Double,currentMargin Double,currentMarginUsd Double,maintenanceMargin Double,
                                                    I String) USE PersistEngine="FAST" RefreshPeriodMs="500" OnUndefColumn="ADD" InitialCapacity="1000";


CREATE PUBLIC TABLE riskFirmInstrumentAggregations(notional Double,unRealizedPnl Double,currentMargin Double,currentMarginUsd Double,maintenanceMargin Double,
                                                   instrumentID Long,aggID Integer,baseSymbol String BITMAP,I String) USE PersistEngine="FAST" RefreshPeriodMs="500" OnUndefColumn="ADD" InitialCapacity="1000";


CREATE PUBLIC TABLE riskFirmInstrumentShocksAggregations(shockPnl Double,currentMargin Double,liquidationAmount Double,autoLiquidation Double,lspAutoDeleverage Double,
                                                         insuranceFundClawback Double,lspBalance Double,shock Double,instrumentID Long,baseSymbol String BITMAP,
                                                         I String) USE PersistEngine="FAST" RefreshPeriodMs="500" OnUndefColumn="ADD" InitialCapacity="1000";


CREATE PUBLIC TABLE riskFirmLevelAggregations(notional Double,unRealizedPnl Double,currentMargin Double,currentMarginUsd Double,maintenanceMargin Double,
                                              I String) USE PersistEngine="FAST" RefreshPeriodMs="500" OnUndefColumn="ADD" InitialCapacity="1000";


CREATE PUBLIC TABLE riskFirmLevelShockAggregations(shockPnl Double,shockCurrentMargin Double,liquidationAmount Double,autoLiquidation Double,lspAutoDeleverage Double,
                                                   insuranceFundClawBacks Double,lspBalance Double,autoDeleverageBalance Double,insuranceFundBalance Double,clawbacks Double,
                                                   shock Double,aggId String BITMAP,I String) USE PersistEngine="FAST" RefreshPeriodMs="500" OnUndefColumn="ADD" InitialCapacity="1000";


CREATE PUBLIC TABLE riskPortfoliosShocks(shockPnl Double,shockMaintenanceMargin Double,shockCurrentMargin Double,shockLiquidationAmount Double,autoLiquidation Double,
                                         autoLiquidationCurrentMargin Double,lspAutoDeleverage Double,assignmentsCurrentMargin Double,insuranceFundClawback Double,shock Double,
                                         portfolioID Long,I String) USE PersistEngine="FAST" RefreshPeriodMs="500" OnUndefColumn="ADD" InitialCapacity="1000";


CREATE PUBLIC TABLE riskPositionsShockImpact(shockPnl Double,currentMargin Double,liquidationAmount Double,autoLiquidation Double,autoLiquidationCurrentMargin Double,
                                             lspAutoDeleverage Double,assignmentsCurrentMargin Double,insuranceFundClawback Double,shock Double,instrumentID Long,
                                             portfolioID Long,baseSymbol String BITMAP,I String) USE PersistEngine="FAST" RefreshPeriodMs="500" OnUndefColumn="ADD" InitialCapacity="1000";


CREATE PUBLIC TABLE riskSimulatorPositions(positionNotional Double,unRealizedPnl Double,initialMargin Double,currentMargin Double,currentMarginUsd Double,
                                           maintenanceMargin Double,portfolioID Long,instrumentID Long,orgID Long,isLong Boolean,
                                           symbol String BITMAP,baseAsset String BITMAP,orgName String BITMAP,portfolioName String BITMAP) USE PersistEngine="FAST" RefreshPeriodMs="500" OnUndefColumn="ADD" InitialCapacity="1000";


CREATE PUBLIC TABLE `RTR-PNL`(ReportIndex Integer,quantity Double,Trades Double,`Deal ID` String,asset_class String,
                              `New NPV` Double,description String,instrument String,`Position PnL` Double,`Old NPV` Double,
                              Total Double,currency String,bundle String,deal String,instrument_id String,
                              Rates Double,`Cap Vol` Double,Futures Double,`Phys Spot` Double,Commods Double,
                              Residual Double,Inflation Double,Credit Double,`Commod Vol` Double,Shaping Double,
                              Phys Double,`Eq Vol` Double,`FCM Params` Double,`Eq Futures Basis` Double,`Cross Asset Corr` Double,
                              `Fixing Restate` Double,`Swo Vol` Double,`Credit Event` Double,Carry Double,`Commod Vol By Strike` Double,
                              Theta Double,Div Double,`Mkt Restate` Double,`Trades Amendment` Double,`Fut Vol` Double,
                              `Heat Rate Vol` Double,`FX Spot` Double,`Credit Vol` Double,`Other Restate` Double,Bond Double,
                              `Eq Spot` Double,Fixing Double,`FX Vol` Double,Errors String,deal_path String,
                              `Bond Future Basis` Double,book_path String) USE RefreshPeriodMs="100" OnUndefColumn="ADD" InitialCapacity="1000";
CREATE INDEX RTRPNL_idx1 ON `RTR-PNL`(bundle HASH,instrument_id HASH) USE Constraint="PRIMARY";


CREATE PUBLIC TABLE rttest(val String) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE SampleEquityReport(Market String,Price Double,Delta Double,Gamma Double,Vega Double,
                                       Theta Double,VegaW Double,VegaF Double,Rho Double,Vanna Double,
                                       Volga Double) USE PersistEngine="FAST" RefreshPeriodMs="100" OnUndefColumn="IGNORE" InitialCapacity="100";
CREATE INDEX MarketIndex ON SampleEquityReport(Market HASH) USE Constraint="PRIMARY";


CREATE PUBLIC TABLE SecBundle(`sec_Bundle ID` Integer,sec_Bundle String,`sec_P&L SPN` Integer,`sec_Contract SPN` String,sec_SPN Integer,
                              sec_Book String,sec_Strategy String,`sec_Front Office Prime Broker` String,`sec_Custodian Account` Integer,`sec_Legal Enttiy` String,
                              `sec_Legal Entity Family` String,`sec_Capital Alloc Fund Family` String,`sec_Business Unit` String,`sec_Bundle Group` String,`sec_BundleGroup Type` String,
                              `sec_Custodian Account Group` String,`sec_Custodian Account Group Type` String,sec_Date String,`sec_Current Face` String,`sec_Trade Date Quantity` Float,
                              sec_Status String,`sec_Settle Date Quantity` Float,sec_Price Float,`sec_Collateral SPN` String,`sec_Collateral Price` String,
                              `sec_Price USD` Float,`sec_Short Mkt. Value` Float,`sec_Long Mkt. Value` Float,`sec_Net Mkt. Value` Float,`sec_Gross Mkt. Value` Float,
                              `sec_Short Mkt. Value USD` Float,`sec_Long Mkt. Value USD` Float,`sec_Net Mkt. Value USD` Float,`sec_Notional Local` Float,`sec_Notional USD` Float,
                              `sec_Notional2 Local` String,`sec_Notional2 USD` String,`sec_Repo Quantity` String,`sec_Repo Type` String,`sec_Counterparty Entity` String,
                              `sec_Exposure Counterparty` String,`sec_Exposure Custodian Account` Integer,sec_Description String,sec_Currency String,sec_Country String,
                              sec_Market String,`sec_FO Type` String,sec_Subtype String,`sec_TCA $MM` Float,`sec_TCA Utilized $mm` Float,
                              `sec_Daily Vol $ mm` Float,`sec_Live PNL $` Float,`sec_PNL MTD $ mm` Float,`sec_PNL QTD $ mm` Float,`sec_PNL YTD $ mm` Float,
                              `sec_Worst Stress` Float,`sec_Intraday PnL$` Float,`sec_Delta $` Float,`sec_Gamma $` Float,`sec_Vega $` Float,
                              `sec_Theta $` Float,`sec_FX Exposure $` Float,`sec_Portfolio Vol Contribution %` Float,`sec_Marginal Vol Contribution %` Float,`sec_VaR 95% Daily %` Float,
                              `sec_Marginal Var %` Float,bun_Book String,`bun_Bundle ID` Integer,`bun_Business Unit` String,`bun_Bundle Group` String,
                              `bun_Daily Vol $ mm` Float,`bun_Worst Stress` Float,`bun_Gamma $` Float,`bun_Portfolio Vol Contribution %` Float,`bun_Marginal Vol Contribution %` Float,
                              `bun_VaR 95% Daily %` Float,`bun_Marginal Var %` Float) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE SecBundlePM(`sec_Bundle ID` Integer,sec_Bundle String,`sec_P&L SPN` Integer,`sec_Contract SPN` String,sec_SPN Integer,
                                sec_Book String,sec_Strategy String,`sec_Front Office Prime Broker` String,`sec_Custodian Account` Integer,`sec_Legal Enttiy` String,
                                `sec_Legal Entity Family` String,`sec_Capital Alloc Fund Family` String,`sec_Business Unit` String,`sec_Bundle Group` String,`sec_BundleGroup Type` String,
                                `sec_Custodian Account Group` String,`sec_Custodian Account Group Type` String,sec_Date String,`sec_Current Face` String,`sec_Trade Date Quantity` Float,
                                sec_Status String,`sec_Settle Date Quantity` Float,sec_Price Float,`sec_Collateral SPN` String,`sec_Collateral Price` String,
                                `sec_Price USD` Float,`sec_Short Mkt. Value` Float,`sec_Long Mkt. Value` Float,`sec_Net Mkt. Value` Float,`sec_Gross Mkt. Value` Float,
                                `sec_Short Mkt. Value USD` Float,`sec_Long Mkt. Value USD` Float,`sec_Net Mkt. Value USD` Float,`sec_Notional Local` Float,`sec_Notional USD` Float,
                                `sec_Notional2 Local` String,`sec_Notional2 USD` String,`sec_Repo Quantity` String,`sec_Repo Type` String,`sec_Counterparty Entity` String,
                                `sec_Exposure Counterparty` String,`sec_Exposure Custodian Account` Integer,sec_Description String,sec_Currency String,sec_Country String,
                                sec_Market String,`sec_FO Type` String,sec_Subtype String,`sec_TCA $MM` Float,`sec_TCA Utilized $mm` Float,
                                `sec_Daily Vol $ mm` Float,`sec_Live PNL $` Float,`sec_PNL MTD $ mm` Float,`sec_PNL QTD $ mm` Float,`sec_PNL YTD $ mm` Float,
                                `sec_Worst Stress` Float,`sec_Intraday PnL$` Float,`sec_Delta $` Float,`sec_Gamma $` Float,`sec_Vega $` Float,
                                `sec_Theta $` Float,`sec_FX Exposure $` Float,`sec_Portfolio Vol Contribution %` Float,`sec_Marginal Vol Contribution %` Float,`sec_VaR 95% Daily %` Float,
                                `sec_Marginal Var %` Float,bun_Book String,`bun_Bundle ID` Integer,`bun_Business Unit` String,`bun_Bundle Group` String,
                                `bun_Daily Vol $ mm` Float,`bun_Worst Stress` Float,`bun_Gamma $` Float,`bun_Portfolio Vol Contribution %` Float,`bun_Marginal Vol Contribution %` Float,
                                `bun_VaR 95% Daily %` Float,`bun_Marginal Var %` Float,pm_Book String,`pm_Business Unit` String,`pm_Daily Vol $ mm` Float,
                                `pm_Worst Stress` Float,`pm_Gamma $` Float,`pm_Portfolio Vol Contribution %` Float,`pm_Marginal Vol Contribution %` Float,`pm_VaR 95% Daily %` Float,
                                `pm_Marginal Var %` Float) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE Securities(id Long,symbol String,groupName String,user String,groupId Long) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE SecurityLevelPositions(`Bundle ID` Integer,Bundle String,`P&L SPN` Integer,`Contract SPN` String,SPN Integer,
                                           Book String,Strategy String,`Front Office Prime Broker` String,`Custodian Account` Integer,`Legal Enttiy` String,
                                           `Legal Entity Family` String,`Capital Alloc Fund Family` String,`Business Unit` String,`Bundle Group` String,`BundleGroup Type` String,
                                           `Custodian Account Group` String,`Custodian Account Group Type` String,Date String,`Current Face` String,`Trade Date Quantity` Float,
                                           Status String,`Settle Date Quantity` Float,Price Float,`Collateral SPN` String,`Collateral Price` String,
                                           `Price USD` Float,`Short Mkt. Value` Float,`Long Mkt. Value` Float,`Net Mkt. Value` Float,`Gross Mkt. Value` Float,
                                           `Short Mkt. Value USD` Float,`Long Mkt. Value USD` Float,`Net Mkt. Value USD` Float,`Notional Local` Float,`Notional USD` Float,
                                           `Notional2 Local` String,`Notional2 USD` String,`Repo Quantity` String,`Repo Type` String,`Counterparty Entity` String,
                                           `Exposure Counterparty` String,`Exposure Custodian Account` Integer,Description String,Currency String,Country String,
                                           Market String,`FO Type` String,Subtype String,`TCA $MM` Float,`TCA Utilized $mm` Float,
                                           `Daily Vol $ mm` Float,`Live PNL $` Float,`PNL MTD $ mm` Float,`PNL QTD $ mm` Float,`PNL YTD $ mm` Float,
                                           `Worst Stress` Float,`Intraday PnL$` Float,`Delta $` Float,`Gamma $` Float,`Vega $` Float,
                                           `Theta $` Float,`FX Exposure $` Float,`Portfolio Vol Contribution %` Float,`Marginal Vol Contribution %` Float,`VaR 95% Daily %` Float,
                                           `Marginal Var %` Float) USE PersistEngine="TEXT" RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE SecurityMaster(Symbol String,RIC String,Ticker String,SecurityType String,EquityType String,
                                   Country String,Currency String,ISIN String,CUSIP String,ExchangeMIC String,
                                   FIGI String,SPN Integer,LegalEntityName String) USE PersistEngine="TEXT" RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE shocks(shock Double) USE PersistEngine="FAST" RefreshPeriodMs="500" OnUndefColumn="ADD" InitialCapacity="1000";


CREATE PUBLIC TABLE SignalReceiver(galaxy String,system String,planet String,distance Integer,energy Double) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE strTest(col1_ String Compact,col2 String Ascii Compact,col3 String BITMAP,col4 Enum,col5 String OnDisk,
                            col6 String OnDisk Cache="2MB",col7 String Compact,col8 String OnDisk Cache="2000") USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE Summary(act String,region String,cnt Integer,value Double) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE SystemColumnsCopy(TableName String,ColumnName String,DataType String,Options String,NoNull Boolean,
                                      Position Integer,DefinedBy String) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";
CREATE TRIGGER TriggerUpdatedDataFilterColumn OFTYPE AMISCRIPT ON SystemColumnsCopy PRIORITY 0 USE onDeletingScript="INSERT INTO DataFilterPluginAudit VALUES (ColumnName, TableName, \"REMOVED\", formatDate(timestamp(), \"yyyy-MM-dd HH:mm:ss.SSS\", \"UTC\") , \"Column ${ColumnName} removed from Table ${TableName}\")" onInsertingScript="INSERT INTO DataFilterPluginAudit VALUES (ColumnName, TableName, \"ADDED\", formatDate(timestamp(), \"yyyy-MM-dd HH:mm:ss.SSS\", \"UTC\") , \"Column ${ColumnName} added to Table ${TableName}\")";


CREATE PUBLIC TABLE systemView(system String,planet String,totalEnergy Double) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE t1(a String,b String) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE t2(c String,d String) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE temp(Deal String,Description String,InstrumentType String,ForecastVol Double,MarginalVol Double,
                         _1D95VaR Double,MarginalVaR Double,StressVaR Double) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE TempEquityODD(Deal String,Ticker String,Quantity Long,DailyPNL Double,MTDPNL Double,
                                  YTDPNL Double,LastPrice Double,NotionalAmount Double,Bundle String,BundleGroup String,
                                  BusinessStrategy String,Custom1 String,Custom2 String,ForecastVol Double,MarginalVol Double,
                                  _1D95VaR Double,MarginalVaR Double,StressVaR Double,M Long,W Long,
                                  MarginalVaRSubPM Double,MarginalVolSubPM Double) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE TempEquityODD2(Deal String,Ticker String,Quantity Long,DailyPNL Double,MTDPNL Double,
                                   YTDPNL Double,LastPrice Double,NotionalAmount Double,Bundle String,BundleGroup String,
                                   BusinessStrategy String,Custom1 String,Custom2 String,ForecastVol Double,MarginalVol Double,
                                   _1D95VaR Double,MarginalVaR Double,StressVaR Double,M Long,W Long,
                                   MarginalVaRSubPM Double,MarginalVolSubPM Double) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE TempMacroODD(Deal String,Description String,InstrumentType String,DailyPNL Double,MTDPNL Double,
                                 YTDPNL Double,FXExposure Double,Delta Double,Gamma Double,Vega Double,
                                 Theta Long,Bundle String,BundleGroup String,BusinessStrategy String,Custom1 String,
                                 Custom2 String,ForecastVol Double,MarginalVol Double,_1D95VaR Double,MarginalVaR Double,
                                 StressVaR Double,MarginalVaRSubPM Double,MarginalVolSubPM Double,M Long) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE TempMacroODD2(Deal String,Description String,InstrumentType String,DailyPNL Double,MTDPNL Double,
                                  YTDPNL Double,FXExposure Double,Delta Double,Gamma Double,Vega Double,
                                  Theta Long,Bundle String,BundleGroup String,BusinessStrategy String,Custom1 String,
                                  Custom2 String,ForecastVol Double,MarginalVol Double,_1D95VaR Double,MarginalVaR Double,
                                  StressVaR Double,MarginalVaRSubPM Double,MarginalVolSubPM Double,M Long) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE test23(BUNDLE2 String) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE TTT(ID Integer) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";
CREATE TRIGGER testTTT OFTYPE AMISCRIPT ON TTT PRIORITY 0 USE onInsertedScript="table t = select * from TTT; logWarn(t);";


CREATE PUBLIC TABLE UnmatchedAccounts(account1 String,account2 String) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE UserBundlePermissions(key String,user_email String,permissions String) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE UserImpersonation(user String,impersonation String) USE PersistEngine="FAST" RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE UserPermissionsLayouts(user String,layout String) USE PersistEngine="FAST" RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE VaR_BundleId(`marginal VaR firm` Double,BundleId String,`marginal VaR sub_pm` Double,`marginal VaR pm` Double,`VaR ES` Double,
                                 `marginal VaR business_strategy` Double,ReportIndex Integer) USE RefreshPeriodMs="100" OnUndefColumn="ADD" InitialCapacity="1000";


CREATE PUBLIC TABLE VaR_business_strategy(`marginal VaR firm` Double,business_strategy String,`VaR ES` Double,ReportIndex Integer) USE RefreshPeriodMs="100" OnUndefColumn="ADD" InitialCapacity="1000";


CREATE PUBLIC TABLE VaR_firm(firm String,`VaR ES` String) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";
CREATE INDEX idx_var_firm ON VaR_firm(firm HASH) USE Constraint="PRIMARY";


CREATE PUBLIC TABLE VaR_pm(`marginal VaR firm` Double,`VaR ES` Double,pm String,`marginal VaR business_strategy` Double,ReportIndex Integer) USE RefreshPeriodMs="100" OnUndefColumn="ADD" InitialCapacity="1000";


CREATE PUBLIC TABLE VaR_position(ReportIndex String,`marginal VaR firm` Double,`marginal VaR sub_pm` Double,`marginal VaR BundleId` Double,`marginal VaR pm` Double,
                                 `VaR ES` Double,`marginal VaR business_strategy` Double,BundleId String,InstrumentSPN String) USE RefreshPeriodMs="100" OnUndefColumn="ADD" InitialCapacity="1000";


CREATE PUBLIC TABLE VaR_sub_pm(sub_pm String,`marginal VaR firm` Double,`marginal VaR pm` Double,`VaR ES` Double,`marginal VaR business_strategy` Double,
                               ReportIndex Integer) USE RefreshPeriodMs="100" OnUndefColumn="ADD" InitialCapacity="1000";


CREATE PUBLIC TABLE VegaRisks(Name String BITMAP,Currency String BITMAP,Period String BITMAP,OneYear Double,TwoYear Double,
                              ThreeYear Double,FourYear Double,FiveYear Double,SevenYear Double,TenYear Double,
                              FifteenYear Double,TwentyYear Double,ThirtyYear Double) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";
CREATE INDEX VegaRisks_Idx ON VegaRisks(Name HASH,Currency HASH,Period HASH) USE Constraint="PRIMARY";


CREATE PUBLIC TABLE VolAgg(Name String BITMAP,VolPnL Double) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE VolBbgMapping(Currency String BITMAP,Period String BITMAP,BbgTicker String) USE PersistEngine="FAST" RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";
CREATE INDEX VolBbgMapping_idx ON VolBbgMapping(Currency HASH,Period HASH) USE Constraint="PRIMARY";


CREATE PUBLIC TABLE VolJoin(Category String BITMAP,Name String BITMAP,FXPnL Double,RatesPnL Double,VolPnL Double) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE VolPnL(Name String BITMAP,Currency String BITMAP,PnL Double) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";


CREATE PUBLIC TABLE Vols(Currency String BITMAP,Period String BITMAP,OneYear Double,TwoYear Double,ThreeYear Double,
                         FourYear Double,FiveYear Double,SevenYear Double,TenYear Double,FifteenYear Double,
                         TwentyYear Double,ThirtyYear Double) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";
CREATE INDEX Vols_Idx ON Vols(Currency HASH,Period HASH) USE Constraint="PRIMARY";


CREATE PUBLIC TABLE VolsChanges(Currency String BITMAP,Period String BITMAP,OneYear Double,TwoYear Double,ThreeYear Double,
                                FourYear Double,FiveYear Double,SevenYear Double,TenYear Double,FifteenYear Double,
                                TwentyYear Double,ThirtyYear Double) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";
CREATE INDEX VolsChanges_Idx ON VolsChanges(Currency HASH,Period HASH) USE Constraint="PRIMARY";


CREATE PUBLIC TABLE XccyRates(Currency String BITMAP,OneMonth Double,ThreeMonth Double,SixMonth Double,OneYear Double,
                              ThreeYear Double,FiveYear Double) USE RefreshPeriodMs="100" OnUndefColumn="REJECT" InitialCapacity="100";
CREATE INDEX XccyRates_Idx ON XccyRates(Currency HASH) USE Constraint="PRIMARY";



/*TIMERS*/
CREATE TIMER DetailSampleTradeExtractRowCleanup_nw OFTYPE AMISCRIPT ON "0 */5 * * * * UTC" PRIORITY 0 USE logging="off" script="DELETE FROM DetailSampleTradeExtract WHERE STATUS == \"DELETE\"" onStartupScript="1234555555526;\"123455\"";

CREATE TIMER FXDeltaExtractRowCleanup_nuwnuw OFTYPE AMISCRIPT ON "0 */5 * * * * UTC" PRIORITY 0 USE logging="verbose" script="DELETE FROM FXDeltaExtract WHERE STATUS == \"DELETE\"" onStartupScript="123;";

CREATE TIMER RatesDV01V2RowCleanup_nuw22 OFTYPE AMISCRIPT ON "0 */5 * * * * UTC" PRIORITY 0 USE logging="off" script="DELETE FROM RatesDV01V2 WHERE STATUS == \"DELETE\"" onStartupScript="123;";

CREATE TIMER fakeordersTimer OFTYPE AMISCRIPT ON "500" PRIORITY 0 USE script="\nlist gs = new list(\"abc2sfa124\",\"asdwrs123\",\"asv12sfnj\",\"zxcm1234w\",\"gdsa255\",\"plkvcn2t1sf\");\nlist orderIds = new list(\"o1\",\"o2\",\"o3\",\"o4\",\"o5\",\"o6\",\"o7\",\"o8\");\ninsert into fakeorders values(timestamp()+rand(1000), orderIds.get(rand(8)), gs.get(rand(6)),rand(500));\n";
DISABLE TIMER fakeordersTimer;

CREATE TIMER firmLevelAggregations OFTYPE AMISCRIPT ON "5500" PRIORITY 1 USE script="\n            inputAssumptions = SELECT * FROM riskConfigInputsAssumptions LIMIT 1;\n            double totalLspCapacity = 0.0;\n            for (String k : inputAssumptions.getKeys()) {\n                if (k.startsWith(\"lspCapacityNotional\", false)) {\n                    double val = inputAssumptions.get(k);\n                    totalLspCapacity = totalLspCapacity + val;\n                }\n            }\n            inputAssumptions.put(\"lspTotalCapacity\", totalLspCapacity);\n            TRUNCATE rowCache;\n            TRUNCATE shockRowCache;\n            Table posAgg = SELECT SUM(positionNotional) AS totNotional,SUM(unrealizedPnlUsd) AS totUnPnl,\n                SUM(currentMarginUsd) AS totCMUsd,SUM(maintenanceMargin)/COUNT(aggID) AS totMM\n            FROM riskPortfolioSummary GROUP BY aggID;\n            Row row = posAgg.getRows().get(0);\n            Double totNotional = row.getValue(\"totNotional\");\n            Double totCMUsd = row.getValue(\"totCMUsd\");\n            Double totCM = totNotional == 0 ? 0 : totCMUsd/totNotional;\n            INSERT INTO rowCache\n            VALUES (totNotional,row.getValue(\"totUnPnl\"),totCM,totCMUsd,row.getValue(\"totMM\"),rowID);\n            SYNC riskFirmLevelAggregations FROM SELECT * FROM rowCache;\n\n            Table instAgg = SELECT SUM(lspBalance) AS totLSPBal,shock FROM riskFirmInstrumentShocksAggregations GROUP BY shock;\n            for (Row balRow : instAgg.getRows()) {\n                shockToLspBal.put(balRow.getValue(\"shock\"),balRow.getValue(\"totLSPBal\"));\n            }\n\n            Table shockAgg = SELECT SUM(shockPnl) AS totShockPnl,SUM(shockLiquidationAmount) AS totLIQAmnt,SUM(autoLiquidation) AS totAutoLIQ,\n                    SUM(lspAutoDeleverage) AS totLSP,SUM(insuranceFundClawback) AS totInsFund, shock\n            FROM riskPortfoliosShocks GROUP BY shock;\n            for (Row row : shockAgg.getRows()) {\n                Double totShockPnl = row.getValue(\"totShockPnl\");\n                Double shockCM = totNotional == 0 ? 0 : (totCMUsd + totShockPnl)/totNotional;\n                Double totInsFundClawback = row.getValue(\"totInsFund\");\n                Double totLspAutoDeleverage = row.getValue(\"totLSP\");\n                Double shock = row.getValue(\"shock\");\n\n                Double lspBalance = shockToLspBal.get(shock);\n                Double lspTotalCapacity = inputAssumptions.get(\"lspTotalCapacity\");\n                Double atuoDNotionaTmp = totLspAutoDeleverage-lspTotalCapacity;\n                Double autoDelevNotional = null == atuoDNotionaTmp || 0.0 > atuoDNotionaTmp ? 0.0 : atuoDNotionaTmp;\n\n                Double negTotInsFundClawback = -1 * totInsFundClawback;\n                Double insFund = inputAssumptions.get(\"insuranceFund\");\n                Double minInsFundBal = insFund < negTotInsFundClawback ? insFund : negTotInsFundClawback;\n                Double insFundBalance = insFund - minInsFundBal;\n\n                Double tmpClawBack = -1*(totInsFundClawback+insFund);\n                Double clawBacks = 0.0 > tmpClawBack ? 0.0 : tmpClawBack;\n\n                INSERT INTO shockRowCache\n                VALUES (totShockPnl,shockCM,row.getValue(\"totLIQAmnt\"),row.getValue(\"totAutoLIQ\"),totLspAutoDeleverage,\n                    totInsFundClawback,lspBalance,autoDelevNotional,insFundBalance,clawBacks,shock,\"${rowID}\",shock+idDelim+rowID);\n            }\n            SYNC riskFirmLevelShockAggregations FROM SELECT * FROM shockRowCache;\n        " vars="Map inputAssumptions,Map shockToLspBal,Table rowCache,Table shockRowCache,String rowID,String idDelim" onStartupScript="\n            idDelim=\"_\";\n            rowID = \"CB\";\n            inputAssumptions = new Map();\n            shockToLspBal = new Map();\n            CREATE TEMPORARY TABLE rowCache (notional DOUBLE,unRealizedPnl DOUBLE,currentMargin DOUBLE,\n                currentMarginUsd DOUBLE,maintenanceMargin DOUBLE,I STRING);\n\n            CREATE TEMPORARY TABLE shockRowCache (shockPnl DOUBLE,shockCurrentMargin DOUBLE,liquidationAmount DOUBLE,\n                autoLiquidation DOUBLE,lspAutoDeleverage DOUBLE,insuranceFundClawBacks DOUBLE,lspBalance DOUBLE,autoDeleverageBalance DOUBLE,\n                insuranceFundBalance DOUBLE,clawbacks DOUBLE,shock DOUBLE,aggId STRING,I STRING);\n            ";
DISABLE TIMER firmLevelAggregations;

CREATE TIMER firmLevelInstrumentShocksAgg OFTYPE AMISCRIPT ON "5000" PRIORITY 1 USE script="\n            inputAssumptions = SELECT * FROM riskConfigInputsAssumptions LIMIT 1;\n            TRUNCATE rowCache;\n            Table inbound = SELECT SUM(shockPnl) AS totalShockPnl,SUM(currentMargin)/COUNT(instrumentID) AS totalCM,SUM(liquidationAmount) AS totatLAM,\n                SUM(autoLiquidation) AS totalAutoLiq,SUM(lspAutoDeleverage) AS totalLSP, SUM(insuranceFundClawback) AS totlInsFundClaw,\n                shock,instrumentID,baseSymbol\n            FROM riskPositionsShockImpact GROUP BY shock,instrumentID;\n\n            for (Row row : inbound.getRows()) {\n                Double totalLSP = row.getValue(\"totalLSP\");\n                String asset = row.getValue(\"baseSymbol\");\n                String colTemplate = \"lspCapacityNotional${asset}\";\n                Double lspCap = inputAssumptions.get(colTemplate);\n                Double lspCapTmp = lspCap < totalLSP ? lspCap : totalLSP;\n                Double lspBalance = lspCap - lspCapTmp;\n\n                Double shock = row.getValue(\"shock\");\n                Long instID = row.getValue(\"instrumentID\");\n                INSERT INTO rowCache (shockPnl, currentMargin, liquidationAmount,autoLiquidation,lspAutoDeleverage,insuranceFundClawback,lspBalance,shock,instrumentID,baseSymbol,I)\n                VALUES (row.getValue(\"totalShockPnl\"),row.getValue(\"totalCM\"),row.getValue(\"totatLAM\"),row.getValue(\"totalAutoLiq\"),\n                    row.getValue(\"totalLSP\"),row.getValue(\"totlInsFundClaw\"),lspBalance,shock,instID,asset,shock+idDelim+instID);\n            }\n\n            SYNC riskFirmInstrumentShocksAggregations FROM SELECT * FROM rowCache;\n        " vars="String idDelim,Map inputAssumptions,Table rowCache" onStartupScript="\n            idDelim=\"_\";\n            inputAssumptions = new Map();\n            CREATE TEMPORARY TABLE rowCache (shockPnl DOUBLE,currentMargin DOUBLE,liquidationAmount DOUBLE,autoLiquidation DOUBLE,\n                lspAutoDeleverage DOUBLE,insuranceFundClawback DOUBLE,lspBalance DOUBLE,shock DOUBLE,instrumentID LONG,baseSymbol STRING,I STRING);\n            ";
DISABLE TIMER firmLevelInstrumentShocksAgg;

CREATE TIMER shocksPortfoliosThenPositionsLevelTimer OFTYPE AMISCRIPT ON "3000" PRIORITY 0 USE script="\n        inputAssumptions = SELECT * FROM riskConfigInputsAssumptions LIMIT 1;\n        liqConfPercents = SELECT cmPercent,liqPercent,cmLiqPrecent,cmSquare,cnt FROM riskConfigAggdCMLIQPercentsConfig LIMIT 1;\n        TRUNCATE portfolioRowCache;\n        TRUNCATE positionRowCache;\n        Table aggPos = SELECT positionNotional, unrealizedPnlUsd, initialMargin, currentMarginUsd, maintenanceMargin, portfolioId FROM riskPortfolioSummary;\n        for (Row row : aggPos.getRows()) {\n            Long portID = row.getValue(\"portfolioId\");\n            List data = aggRows.get(portID);\n            if (null == data) {\n                data = new List(0.0,0.0,0.0,0.0,0.0);\n                aggRows.put(portID, data);\n            }\n            data.set(0,row.getValue(\"positionNotional\"));\n            data.set(1,row.getValue(\"unrealizedPnlUsd\"));\n            data.set(2,row.getValue(\"initialMargin\"));\n            data.set(3,row.getValue(\"currentMarginUsd\"));\n            data.set(4,row.getValue(\"maintenanceMargin\"));\n        }\n\n        Table tbl = SELECT SUM(shockPnl) AS totalShockPnl,shock,portfolioID,baseSymbol FROM riskPositionsShockImpact GROUP BY shock,portfolioID;\n        for (Row row : tbl.getRows()) {\n            Long portID = row.getValue(\"portfolioID\");\n            Double shock = row.getValue(\"shock\");\n            List data = aggRows.get(portID);\n            if (null == data) continue;\n            Double aggNotional = data.get(0);\n            Double aggIM = data.get(2);\n            Double aggCMUsd = data.get(3);\n            Double aggMM = data.get(4);\n            Double totShockPnl = row.getValue(\"totalShockPnl\");\n            Double shockCM = aggNotional == null || aggNotional == 0 ? 0 : (aggCMUsd+totShockPnl)/aggNotional;\n            Double shockMM = shockCM*mmMult;\n\n            Double tmpShockLiqd = aggNotional != null && aggNotional != 0 && shockCM < aggMM ? aggNotional - (aggCMUsd + totShockPnl)/aggIM: 0;\n            Double shockLiquidation = aggNotional != null && aggNotional < tmpShockLiqd ? aggNotional : tmpShockLiqd;\n            shockLiquidation = null == shockLiquidation ? 0.0 : shockLiquidation;\n\n            Double adqBreach = inputAssumptions.get(\"adqBreach\");\n            String baseSymbolValue = row.getValue(\"baseSymbol\");\n            String tmeplate = \"thirtyADQNotional${baseSymbolValue}\";\n            String colName = inputAssumptions.getKeys().contains(tmeplate) ? tmeplate : \"thirtyADQNotionalBTC\";\n            Double thirtyAdq = inputAssumptions.get(colName);\n            Double autoLiquidation = 0.0;\n            if (aggNotional != 0 && shockCM <= aggMM && aggNotional != null) {\n                if (shockLiquidation>=(thirtyAdq*adqBreach)) {\n                    Double mult = inputAssumptions.get(\"autoLiqPcntOfADQBreach\");\n                    autoLiquidation = shockLiquidation * mult;\n                } else {\n                    INT cnt = liqConfPercents.get(\"cnt\");\n                    DOUBLE x = liqConfPercents.get(\"cmPercent\");\n                    DOUBLE y = liqConfPercents.get(\"liqPercent\");\n                    DOUBLE xy = liqConfPercents.get(\"cmLiqPrecent\");\n                    DOUBLE xSq = liqConfPercents.get(\"cmSquare\");\n                    // Following formula y = mx + b where x is the parameter passed in\n                    DOUBLE m = (cnt*xy-x*y)/(cnt*xSq-(x*x));\n                    DOUBLE b = (y-m*x)/cnt;\n                    Double forecast = m * shockCM + b;\n                    // Double forecast = CALL forcastLinear(shockCM);\n                    autoLiquidation = shockLiquidation * forecast;\n                }\n            }\n            autoLiquidation = null == autoLiquidation ? 0.0 : autoLiquidation;\n\n            Double aLqCmDenom = aggNotional != null ? (aggNotional-autoLiquidation) : 0;\n            Double aLqCMTmp = aLqCmDenom != 0 ? (aggCMUsd+totShockPnl)/aLqCmDenom : 0.0;\n            Double aLqCM = aLqCMTmp > shockCM ? aLqCMTmp : shockCM;\n\n            Double comTmp = aggIM*comMult;\n            Double mmTmp = aggMM-comSub;\n            Double closeOutM = comTmp > mmTmp ? comTmp : mmTmp;\n            Double lsp = aLqCM > closeOutM ? 0.0 : shockLiquidation-autoLiquidation;\n\n            Double lspCmDenom = aggNotional != null ? aggNotional-autoLiquidation-lsp : 0;\n            Double lspCM = lspCmDenom==null || abs(lspCmDenom) < 1 ? 0 : (aggCMUsd+totShockPnl)/lspCmDenom;\n\n            Double insAbsorbPcnt = inputAssumptions.get(\"insuranceAbsorbPcnt\");\n            Double insFundTmp = aggNotional == null ? 0 : (totShockPnl*(2*aggNotional-shockLiquidation*insAbsorbPcnt)/2/aggNotional+aggCMUsd)-lsp*(aggIM*closeOutM);\n            Double insFund = insFundTmp < 0 ? insFundTmp : 0;\n\n            INSERT INTO portfolioRowCache (shockPnl,shockMaintenanceMargin,shockCurrentMargin,shockLiquidationAmount,\n                        autoLiquidation,autoLiquidationCurrentMargin,lspAutoDeleverage,assignmentsCurrentMargin,insuranceFundClawback,\n                        shock,portfolioID,I)\n            VALUES(totShockPnl,shockMM,shockCM,shockLiquidation,autoLiquidation,aLqCM,lsp,lspCM,insFund,\n                    shock,portID,shock+idDelim+portID);\n\n            String totalsKey = shock+idDelim+portID;\n            Map totalValues = portfolioTotals.get(totalsKey);\n            if (totalValues == null) {\n                totalValues = new Map();\n                portfolioTotals.put(totalsKey, totalValues);\n            } else { totalValues.clear(); }\n\n            totalValues.put(\"totalShockPnl\",totShockPnl);\n            totalValues.put(\"shockLiquidationAmount\",shockLiquidation);\n            totalValues.put(\"autoLiquidation\",autoLiquidation);\n            totalValues.put(\"lspAutoDeleverage\",lsp);\n        }\n        Table positions = SELECT rpss.shockPnl AS shockPnl,rpss.currentMargin AS shockCurrentMargin,\n                rpss.liquidationAmount AS liquidationAmount,rsp.currentMarginUsd AS currentMarginUsd,\n                rsp.maintenanceMargin AS maintenanceMargin,\n                rsp.currentMargin AS currentMargin,rsp.positionNotional AS positionNotional,rpss.shock AS shock,\n                rsp.instrumentID AS instrumentID,rsp.portfolioID AS portfolioID\n                 FROM riskPositionsShockImpact AS rpss, riskSimulatorPositions AS rsp\n                 WHERE rsp.portfolioID == rpss.portfolioID && rsp.instrumentID == rpss.instrumentID;\n        for (Row pos : positions.getRows()) {\n            Long posPortID = pos.getValue(\"portfolioID\");\n            Double posShock = pos.getValue(\"shock\");\n            Map totalValues = portfolioTotals.get(posShock+idDelim+posPortID);\n            List data = aggRows.get(posPortID);\n            if (totalValues == null || data == null) { continue; }\n            Double totShockPnl = totalValues.get(\"totalShockPnl\");\n            Double shockLiquidation = totalValues.get(\"shockLiquidationAmount\");\n            Double autoLiquidation = totalValues.get(\"autoLiquidation\");\n            Double lsp = totalValues.get(\"lspAutoDeleverage\");\n            Double aggNotional = data.get(0);\n\n            Long instID = pos.getValue(\"instrumentID\");\n            Double posShockPnl = pos.getValue(\"shockPnl\");\n            Double posShockCM = pos.getValue(\"shockCurrentMargin\");\n            Double posShockLQ = pos.getValue(\"liquidationAmount\");\n            Double posCMUsd = pos.getValue(\"currentMarginUsd\");\n            Double posNotional = pos.getValue(\"positionNotional\");\n            Double posMM = pos.getValue(\"maintenanceMargin\");\n            Double posCM = pos.getValue(\"currentMargin\");\n            Double insAbsorbPcnt = inputAssumptions.get(\"insuranceAbsorbPcnt\");\n\n            Double attribution = posNotional/aggNotional;\n            Double liquidationAmount = minimum(posNotional, attribution*shockLiquidation);\n            Double posAutoLiq = minimum(posNotional, attribution*autoLiquidation);\n            Double posLsp = minimum(posNotional, attribution*lsp);\n\n            Double posALqCMDenom = posNotional == null ? 0 : (posNotional-posAutoLiq);\n            Double posALqCMTmp = posALqCMDenom == null || posALqCMDenom == 0 ? 0.0 : (posCMUsd+posShockPnl)/posALqCMDenom;\n            Double posALqCM = posALqCMTmp > posShockCM ? posALqCMTmp : posShockCM;\n\n            Double posLSPCmDenom = posNotional == null ? 0 : posNotional-posAutoLiq-posLsp;\n            Double posLSPCM = posLSPCmDenom == null || abs(posLSPCmDenom) < 1.0 ? 0.0 : (posCMUsd+posShockPnl)/posLSPCmDenom;\n\n            Double posCOMTmp = posCM*comMult;\n            Double psMMTmp = posMM-comSub;\n            Double posCloseOutM = posCOMTmp > psMMTmp ? posCOMTmp : psMMTmp;\n            Double posInsFundTmp = posNotional == null ? 0 : (posShockPnl*(2*posNotional-posShockLQ*insAbsorbPcnt)/2/posNotional+posCMUsd)-lsp*(posCM*posCloseOutM);\n            Double posInsFund = posInsFundTmp < 0 ? posInsFundTmp : 0;\n\n            INSERT INTO positionRowCache (liquidationAmount,autoLiquidation,autoLiquidationCurrentMargin,lspAutoDeleverage,\n                assignmentsCurrentMargin,insuranceFundClawback,shock,instrumentID,portfolioID,I)\n            VALUES(liquidationAmount,posAutoLiq,posALqCM,posLsp,posLSPCM,posInsFund,posShock,instID,posPortID,posShock+idDelim+instID+idDelim+posPortID);\n        }\n\n        SYNC riskPortfoliosShocks FROM SELECT * FROM portfolioRowCache;\n        \n    " vars="Map aggRows,Map portfolioTotals,Map inputAssumptions,Map liqConfPercents,String idDelim,Double mmMult,Double comMult,Double comSub,Table portfolioRowCache,Table positionRowCache" onStartupScript="aggRows=new Map();portfolioTotals=new Map();inputAssumptions=new Map();liqConfPercents=new Map();idDelim = \"_\";mmMult=0.6667;comMult=0.3333;comSub=0.12;\n            CREATE TEMPORARY TABLE portfolioRowCache (shockPnl DOUBLE,shockMaintenanceMargin DOUBLE,shockCurrentMargin DOUBLE,shockLiquidationAmount DOUBLE,\n            autoLiquidation DOUBLE,autoLiquidationCurrentMargin DOUBLE,lspAutoDeleverage DOUBLE,assignmentsCurrentMargin DOUBLE,insuranceFundClawback DOUBLE,\n            shock DOUBLE, portfolioID LONG, I STRING);\n\n            CREATE TEMPORARY TABLE positionRowCache (liquidationAmount DOUBLE, autoLiquidation DOUBLE,autoLiquidationCurrentMargin DOUBLE,lspAutoDeleverage DOUBLE,assignmentsCurrentMargin DOUBLE,\n            insuranceFundClawback DOUBLE,shock DOUBLE, instrumentID LONG, portfolioID LONG, I STRING);\n    ";
DISABLE TIMER shocksPortfoliosThenPositionsLevelTimer;


/*PROCEDURES*/
CREATE PROCEDURE ARCHIVE_AND_PURGE_FIX_MESSAGES_NEW OFTYPE AMISCRIPT USE logging="verbose" script="{\n                                                               int batchSize=200000;//tune me\n                                                               int i=1;\n                                                                CREATE TABLE tmp AS SELECT OrderID FROM ORDERS UNION SELECT OrderID FROM CHILD_ORDERS UNION SELECT OrderID FROM MOGA_DISTRIBUTION;\n\n                                                               int rowCount=SELECT COUNT(*) FROM FIX_MESSAGES WHERE OrderID not IN (SELECT OrderID FROM tmp);\n\n                                                               for(int n=0;n<rowCount;n+=batchSize){\n\n                                                                 USE DS= \"AMI_HISTORY\" timeout = 10800000 INSERT INTO ARCHIVED_FIX_MESSAGES SELECT * FROM FIX_MESSAGES WHERE OrderID not IN (SELECT OrderID FROM tmp) LIMIT batchSize;\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t DELETE FROM FIX_MESSAGES WHERE OrderID not IN (SELECT OrderID FROM tmp) LIMIT batchSize;\n\n                                                                 SELECT (i*batchSize)+\" RECORDS INSERTED FROM FIX_MESSAGES INTO ARCHIVED_FIX_MESSAGES AND DELETED FROM FIX_MESSAGES TABLE.\";\n                                                                 ++i;\n                                                               }\n                                                                DROP TABLE tmp;\n                                                             };" arguments="";

CREATE PROCEDURE FIX_MSG_CLEANUP OFTYPE AMISCRIPT USE script="call ARCHIVE_AND_PURGE_FIX_MESSAGES_NEW()" arguments="";

CREATE PROCEDURE LOAD_QUEUED_ORDER_ALERTS_FOR_OMS_ERRORS OFTYPE AMISCRIPT USE script="create table tmp as  select CHILD_ORDERS.OrdLinkID  from CHILD_ORDERS , ORDERS   where CHILD_ORDERS.OrdLinkID == ORDERS.OrderID && ORDERS.TimeInForce not in (\"GOOD_TILL_CANCEL\",\"GOOD_TILL_DATE\") && ORDERS.OrdStatus not in (\"REJECTED\", \"FILLED\", \"EXPIRED\", \"CANCELED\",\"DONE_FOR_DAY\",\"PENDING_USER_ACTION\") &&  ORDERS.FlowType == \"NON_PASSTHRU\" && ORDERS.DestinationRegion == REGION_ && ORDERS.RoutingHub in (${ROUTING_HUBS_}) && formatDate(timestamp(),\"yyyyMMdd\", \"EST5EDT\") <= formatDate(ORDERS.ExpireTime/1000,\"yyyyMMdd\", \"EST5EDT\") && CHILD_ORDERS.TradeDate == formatDate(timestamp(),\"yyyyMMdd\", \"EST5EDT\"); INSERT INTO RISK_VIOLATIONS_WITH_ORDER_DETAILS(AllowedActions,AlertType,AlertStatus,AlertText,AlertCategory,ValidatorName,RequiresAction,Aggressive,OrdStatus , OrderID , OrdLinkID , CumQty , AvgPx , ReceiveTime , Account , ClOrdID , Currency , OrderQty , Price , OrdType , Side , Symbol , SecurityID , IDSource , OrderCapacity , TimeInForce , SubCustomerName , PrimarySales , SecondarySales , CustomerSlang , TradeDate , ConnectionName , InstanceName , OrderPlacer , RoutingHub , ExDestination , HandlInst , Text , PriceAtClose , Customer , OrderFlowCategory , SourceRegion , DestinationRegion ,BloomBergCode ,Country , SrcSystemID ,SecurityType , SMCPID , CustomerID , SwapFlag , SmartStrategy , AlgoConstraint , ClientTraderID ,SalesPersonID , ParentSide) FROM SELECT \"QUEUED\",\"QueuedOrderRequireAttention\",\"PendingApproval\",\"Child Orders missing in OMS\",\"QueuedOrderRequireAttention\",\"Queued_Parent_NoChild_Released\",\"True\",\"false\",OrdStatus , OrderID , OrdLinkID , CumQty , AvgPx , ReceiveTime , Account , ClOrdID , Currency , OrderQty , Price , OrdType , Side , Symbol , SecurityID , IDSource , OrderCapacity , TimeInForce , SubCustomerName , PrimarySales , SecondarySales , CustomerSlang , TradeDate , ConnectionName , InstanceName , OrderPlacer , RoutingHub , ExDestination , HandlInst , Text , PriceAtClose , Customer , OrderFlowCategory , SourceRegion , DestinationRegion ,BloomBergCode ,Country , SrcSystemID ,SecurityType , SMCPID , CustomerID , SwapFlag , SmartStrategy , AlgoConstraint , ClientTraderID ,SalesPersonID , ParentSide FROM ORDERS where TimeInForce not in (\"GOOD_TILL_CANCEL\",\"GOOD_TILL_DATE\") && OrdStatus not in (\"REJECTED\", \"FILLED\", \"EXPIRED\", \"CANCELED\",\"DONE_FOR_DAY\",\"PENDING_USER_ACTION\") && FlowType == \"NON_PASSTHRU\" && DestinationRegion == REGION_ && ORDERS.RoutingHub in (${ROUTING_HUBS_}) && formatDate(timestamp(),\"yyyyMMdd\", \"EST5EDT\") <= formatDate(ORDERS.ExpireTime/1000,\"yyyyMMdd\", \"EST5EDT\") && OrderID not in (select * from tmp )" arguments="String REGION_, String ROUTING_HUBS_";

CREATE PROCEDURE forcastLinear OFTYPE AMISCRIPT USE script="\n        Map row = SELECT cmPercent,liqPercent,cmLiqPrecent,cmSquare,cnt FROM riskConfigAggdCMLIQPercentsConfig LIMIT 1;\n        INT cnt = row.get(\"cnt\");\n        DOUBLE x = row.get(\"cmPercent\");\n        DOUBLE y = row.get(\"liqPercent\");\n        DOUBLE xy = row.get(\"cmLiqPrecent\");\n        DOUBLE xSq = row.get(\"cmSquare\");\n        // Following formula y = mx + b where x is the parameter passed in\n        DOUBLE m = (cnt*xy-x*y)/(cnt*xSq-(x*x));\n        DOUBLE b = (y-m*x)/cnt;\n        return m * variable + b;\n    " arguments="DOUBLE variable";


/*MULTI-TABLE TRIGGERS*/
CREATE TRIGGER aggregateAllPositionCountsByPortfolio OFTYPE AGGREGATE ON riskSimulatorPositions,positionCountsByPortfolio PRIORITY 1 USE selects="cnt=count(portfolioID)" groupBys="portfolioID=portfolioID";

CREATE TRIGGER aggregateCMAndLiquidationPercentsTrigger OFTYPE AGGREGATE ON riskConfigCMLIQPercentsConfig,riskConfigAggdCMLIQPercentsConfig PRIORITY 0 USE selects="cmPercent=sum(currentMarginPercent),liqPercent=sum(liquidationPercent),cmLiqPrecent=sum(currentMarginPercent*liquidationPercent),\n        cmSquare=sum(currentMarginPercent*currentMarginPercent),liqSquare=sum(liquidationPercent*liquidationPercent),cnt=count(aggID)" groupBys="I=\"\"+aggID";

CREATE TRIGGER Commodities_join_trigger OFTYPE JOIN ON CommoditiesData,FX,Commodities PRIORITY 0 USE type="LEFT" selects="Ticker=Ticker,  Currency=noNull(FX.Currency,\"USD\"), Price=Price, ContractValue=(CommoditiesData.ContractValue == \"#N/A Field Not Applicable\" ? CommoditiesData.Price : (double)(CommoditiesData.ContractValue)), PriceUSD=noNull(FX.Currency,\"USD\") == \"USD\" ? Price:Price/FX.Spot, DeltaTMinusOne=CommoditiesData.DeltaTMinusOne/100" on="CommoditiesData.Currency == FX.Currency";

CREATE TRIGGER CommoditiesJoin_join_trigger OFTYPE JOIN ON VolJoin,CommoditiesAgg,CommoditiesJoin PRIORITY 0 USE type="LEFT" selects="Name=VolJoin.Name,Category=VolJoin.Category,FXPnL=FXPnL,RatesPnL=RatesPnL,VolPnL=VolPnL,CommoditiesPnL=CommoditiesAgg.CommoditiesPnL" on="VolJoin.Name == CommoditiesAgg.Name";

CREATE TRIGGER dv01bundleenrich_nuw OFTYPE DECORATE ON BundleMetadata,RatesDV01V2 PRIORITY 0 USE selects="custom_1=custom_1, custom_2=custom_2,custom_3=custom_3, pm=pm, business_strategy=business_strategy" on="BundleMetadata.bundle == RatesDV01V2.bundle";

CREATE TRIGGER Equities_agg_trigger OFTYPE AGGREGATE ON EquitiesPnL,EquitiesAgg PRIORITY 0 USE selects="EquitiesPnL=sum(PnL)" groupBys="Name=Name";

CREATE TRIGGER Equities_join_trigger OFTYPE JOIN ON EquitiesData,FX,Equities PRIORITY 0 USE type="LEFT" selects="Ticker=Ticker,  Currency=noNull(FX.Currency,\"USD\"), Price=Price, ContractValue=(EquitiesData.ContractValue == \"#N/A Field Not Applicable\" ? EquitiesData.Price : (double)(EquitiesData.ContractValue)), PriceUSD=noNull(FX.Currency,\"USD\") == \"USD\" ? Price:Price/FX.Spot, DeltaTMinusOne=EquitiesData.DeltaTMinusOne/100" on="EquitiesData.Currency == FX.Currency";

CREATE TRIGGER EquitiesPnL_join_trigger OFTYPE JOIN ON EquitiesTickerSize,Equities,EquitiesPnL PRIORITY 0 USE type="LEFT" selects="Name=EquitiesTickerSize.PortfolioManager, Ticker=Equities.Ticker,  Size=Size, EquityDelta=EquitiesTickerSize.Size*PriceUSD/100000.0, PnL=EquitiesTickerSize.Size*PriceUSD*DeltaTMinusOne/1000.0" on="EquitiesTickerSize.Ticker == Equities.Ticker";

CREATE TRIGGER EquityODDAgg OFTYPE AGGREGATE ON EquityODD,EquityODDAgg PRIORITY 0 USE selects="DailyPNL=sum(DailyPNL),MTDPNL=sum(MTDPNL),YTDPNL=sum(YTDPNL)" groupBys="BundleGroup=BundleGroup,BusinessStrategy=BusinessStrategy";

CREATE TRIGGER EquityODDJoin1 OFTYPE JOIN ON EquityODDReport,EquityODDVaRReport,EquityODDIntermediate PRIORITY 0 USE type="LEFT" selects="Deal = EquityODDReport.Deal,Ticker = EquityODDReport.Ticker,Quantity = EquityODDReport.Quantity,DailyPNL = EquityODDReport.DailyPNL,MTDPNL = EquityODDReport.MTDPNL,YTDPNL = EquityODDReport.YTDPNL,LastPrice = EquityODDReport.LastPrice,NotionalAmount = EquityODDReport.NotionalAmount,Bundle = EquityODDReport.Bundle,BundleGroup = EquityODDReport.BundleGroup,BusinessStrategy = EquityODDReport.BusinessStrategy,Custom1 = EquityODDReport.Custom1,Custom2 = EquityODDReport.Custom2,ForecastVol = EquityODDVaRReport.ForecastVol,MarginalVol = EquityODDVaRReport.MarginalVol,`1D95VaR` = EquityODDVaRReport.`1D95VaR`,MarginalVaR = EquityODDVaRReport.MarginalVaR,StressVaR = EquityODDVaRReport.StressVaR" on="EquityODDReport.Deal==EquityODDVaRReport.Deal";

CREATE TRIGGER EquityODDJoin2_nuw OFTYPE JOIN ON EquityODDIntermediate,EquityODDSubPMContribution,EquityODD PRIORITY 0 USE selects="Deal = EquityODDIntermediate.Deal,Ticker = EquityODDIntermediate.Ticker,Quantity = EquityODDIntermediate.Quantity,DailyPNL = EquityODDIntermediate.DailyPNL,MTDPNL = EquityODDIntermediate.MTDPNL,YTDPNL = EquityODDIntermediate.YTDPNL,LastPrice = EquityODDIntermediate.LastPrice,NotionalAmount = EquityODDIntermediate.NotionalAmount,Bundle = EquityODDIntermediate.Bundle,BundleGroup = EquityODDIntermediate.BundleGroup,BusinessStrategy = EquityODDIntermediate.BusinessStrategy,Custom1 = EquityODDIntermediate.Custom1,Custom2 = EquityODDIntermediate.Custom2,ForecastVol = EquityODDIntermediate.ForecastVol,MarginalVol = EquityODDIntermediate.MarginalVol,`1D95VaR` = EquityODDIntermediate.`1D95VaR`,MarginalVaR = EquityODDIntermediate.MarginalVaR,StressVaR = EquityODDIntermediate.StressVaR, MarginalVaRSubPM = EquityODDSubPMContribution.MarginalVaR, MarginalVolSubPM = EquityODDSubPMContribution.MarginalVol" type="LEFT" wheres="true" on="EquityODDIntermediate.Deal==EquityODDSubPMContribution.Deal";

CREATE TRIGGER EquityODDJoinTemp OFTYPE JOIN ON EquityODDReport,EquityODDVaRReport,TempEquityODD PRIORITY 0 USE type="LEFT" selects="Deal = EquityODDReport.Deal,Ticker = EquityODDReport.Ticker,Quantity = EquityODDReport.Quantity,DailyPNL = EquityODDReport.DailyPNL,MTDPNL = EquityODDReport.MTDPNL,YTDPNL = EquityODDReport.YTDPNL,LastPrice = EquityODDReport.LastPrice,NotionalAmount = EquityODDReport.NotionalAmount,Bundle = EquityODDReport.Bundle,BundleGroup = EquityODDReport.BundleGroup,BusinessStrategy = EquityODDReport.BusinessStrategy,Custom1 = EquityODDReport.Custom1,Custom2 = EquityODDReport.Custom2,ForecastVol = EquityODDVaRReport.ForecastVol,MarginalVol = EquityODDVaRReport.MarginalVol,`_1D95VaR` = EquityODDVaRReport.`1D95VaR`,MarginalVaR = EquityODDVaRReport.MarginalVaR,StressVaR = EquityODDVaRReport.StressVaR" on="EquityODDReport.Deal==EquityODDVaRReport.Deal";

CREATE TRIGGER EquityODDJoinTemp2 OFTYPE JOIN ON EquityODDReport,EquityODDVaRReport,TempEquityODD2 PRIORITY 0 USE type="LEFT" selects="Deal = EquityODDReport.Deal,Ticker = EquityODDReport.Ticker,Quantity = EquityODDReport.Quantity,DailyPNL = EquityODDReport.DailyPNL,MTDPNL = EquityODDReport.MTDPNL,YTDPNL = EquityODDReport.YTDPNL,LastPrice = EquityODDReport.LastPrice,NotionalAmount = EquityODDReport.NotionalAmount,Bundle = EquityODDReport.Bundle,BundleGroup = EquityODDReport.BundleGroup,BusinessStrategy = EquityODDReport.BusinessStrategy,Custom1 = EquityODDReport.Custom1,Custom2 = EquityODDReport.Custom2,ForecastVol = EquityODDVaRReport.ForecastVol,MarginalVol = EquityODDVaRReport.MarginalVol,`_1D95VaR` = EquityODDVaRReport.`1D95VaR`,MarginalVaR = EquityODDVaRReport.MarginalVaR,StressVaR = EquityODDVaRReport.StressVaR" on="EquityODDReport.Deal==EquityODDVaRReport.Deal";

CREATE TRIGGER EXCHANGES OFTYPE AGGREGATE ON PRODUCT_DATA,EXCHANGES PRIORITY 1 USE selects="NumberOfProducts=count(*),LastUpdateTimestamp=max(Timestamp)" allowExternalUpdates="false" groupBys="PrimaryExchangeCode=PrimaryExchangeCode";

CREATE TRIGGER EXECUTION_SUMMARY OFTYPE AGGREGATE ON EXECUTIONS,EXECUTION_SUMMARY PRIORITY 0 USE selects="Count=count((Status != \"CANCELED\" && Status != \"CORRECTED\") ? \"true\" : null),ExecQty=sum((Status != \"CANCELED\" && Status != \"CORRECTED\") ? LastShares : 0),ExecNotional=sum((Status != \"CANCELED\" && Status != \"CORRECTED\") ? LastShares*LastPx : 0)" groupBys="Symbol=Symbol,Side=Side,LastMkt=LastMkt,SourceRegion=SourceRegion,DestinationRegion=DestinationRegion,SwapFlag=SwapFlag,PrimarySales=PrimarySales,OrderFlowCategory=OrderFlowCategory,SalesPersonID=SalesPersonID";

CREATE TRIGGER firmLevelInstrumentAgg OFTYPE AGGREGATE ON riskSimulatorPositions,riskFirmInstrumentAggregations PRIORITY 0 USE selects="notional=sum(positionNotional),unRealizedPnl=sum(unRealizedPnl),currentMargin=sum(currentMargin)/count(instrumentID),\n            currentMarginUsd=sum(currentMarginUsd),maintenanceMargin=sum(maintenanceMargin)/count(instrumentID),aggID=0" groupBys="instrumentID=instrumentID,baseSymbol=baseAsset,I=instrumentID";

CREATE TRIGGER FirmwideODDDecorate OFTYPE DECORATE ON FirmwideODDTemp,FirmwideODD PRIORITY 0 USE selects="DailyPNL=DailyPNL,MTDPNL=MTDPNL,YTDPNL=YTDPNL" on="(FirmwideODDTemp.BundleGroup==FirmwideODD.BundleGroup) && (FirmwideODDTemp.BusinessStrategy==FirmwideODD.BusinessStrategy)";

CREATE TRIGGER FirmwideODDTempProjection OFTYPE PROJECTION ON MacroODDAgg,EquityODDAgg,FirmwideODDTemp PRIORITY 0 USE selects="BundleGroup=BundleGroup,BusinessStrategy=BusinessStrategy,DailyPNL=DailyPNL,MTDPNL=MTDPNL,YTDPNL=YTDPNL";

CREATE TRIGGER FXAgg_agg_trigger OFTYPE AGGREGATE ON FXPnL,FXAgg PRIORITY 0 USE selects="FXPnL=sum(PnL)" groupBys="Name=Name";

CREATE TRIGGER fxdeltabundleenrich OFTYPE DECORATE ON BundleMetadata,FXDeltaExtract PRIORITY 0 USE selects="custom_1=custom_1, custom_2=custom_2,custom_3=custom_3, pm=pm, business_strategy=business_strategy" on="FXDeltaExtract.bundle==BundleMetadata.bundle";

CREATE TRIGGER FXDV01PnL_join_trigger OFTYPE JOIN ON XccyRates,FXDV01Risks,FXDV01PnL PRIORITY 0 USE type="RIGHT" selects="Currency=XccyRates.Currency, Name=FXDV01Risks.Name, OneMonth=XccyRates.OneMonth*FXDV01Risks.OneMonth/1000.0, ThreeMonth=XccyRates.ThreeMonth*FXDV01Risks.ThreeMonth/1000.0, SixMonth=XccyRates.SixMonth*FXDV01Risks.SixMonth/1000.0, OneYear=XccyRates.OneYear*FXDV01Risks.OneYear/1000.0, ThreeYear=XccyRates.ThreeYear*FXDV01Risks.ThreeYear/1000.0,  FiveYear=XccyRates.FiveYear*FXDV01Risks.FiveYear/1000.0, Total=XccyRates.OneMonth*FXDV01Risks.OneMonth/1000.0 + XccyRates.ThreeMonth*FXDV01Risks.ThreeMonth/1000.0 + XccyRates.SixMonth*FXDV01Risks.SixMonth/1000.0 + XccyRates.OneYear*FXDV01Risks.OneYear/1000.0 + XccyRates.ThreeYear*FXDV01Risks.ThreeYear/1000.0 + XccyRates.FiveYear*FXDV01Risks.FiveYear/1000.0;" on="XccyRates.Currency == FXDV01Risks.Currency";

CREATE TRIGGER FXJoin_join_trigger OFTYPE JOIN ON PortfolioManagers,FXAgg,FXJoin PRIORITY 0 USE type="LEFT" selects="Name=PortfolioManagers.Name,Category=PortfolioManagers.Category,FXPnL=FXPnL" on="PortfolioManagers.Name == FXAgg.Name";

CREATE TRIGGER FXPnL_join_trigger OFTYPE JOIN ON FX,FXDelta,FXPnL PRIORITY 0 USE type="RIGHT" selects="Currency=FX.Currency,Name=FXDelta.Name,PnL=FX.DeltaTMinusOne*FXDelta.Delta*100.0" on="FX.Currency == FXDelta.Currency";

CREATE TRIGGER IRSPnL_join_trigger OFTYPE JOIN ON IRSRates,IRSRisks,IRSPnL PRIORITY 0 USE type="RIGHT" selects="Currency=IRSRates.Currency, Name=IRSRisks.Name, OneYear=IRSRisks.OneYear*IRSRates.OneYear/1000.0, TwoYear=IRSRisks.TwoYear*IRSRates.TwoYear/1000.0, ThreeYear=IRSRisks.ThreeYear*IRSRates.ThreeYear/1000.0, FiveYear=IRSRisks.FiveYear*IRSRates.FiveYear/1000.0, TenYear=IRSRisks.TenYear*IRSRates.TenYear/1000.0, TwentyYear=IRSRisks.TwentyYear*IRSRates.TwentyYear/1000.0, Total=IRSRisks.OneYear*IRSRates.OneYear/1000.0 + IRSRisks.TwoYear*IRSRates.TwoYear/1000.0 + IRSRisks.ThreeYear*IRSRates.ThreeYear/1000.0 + IRSRisks.FiveYear*IRSRates.FiveYear/1000.0 + IRSRisks.TenYear*IRSRates.TenYear/1000.0 + IRSRisks.TwentyYear*IRSRates.TwentyYear/1000.0" on="IRSRates.Currency == IRSRisks.Currency";

CREATE TRIGGER IRVolPnL_join_trigger OFTYPE JOIN ON VolsChanges,VegaRisks,IRVolPnL PRIORITY 0 USE type="RIGHT" selects="Name=VegaRisks.Name, Currency=VolsChanges.Currency, Period=VolsChanges.Period, OneYear=noNull(VolsChanges.OneYear, 0) * noNull( VegaRisks.OneYear, 0) /1000000.0, TwoYear=noNull(VolsChanges.TwoYear, 0) * noNull( VegaRisks.TwoYear, 0) /1000000.0, ThreeYear=noNull(VolsChanges.ThreeYear, 0) * noNull( VegaRisks.ThreeYear, 0) /1000000.0, FourYear=noNull(VolsChanges.FourYear, 0) * noNull( VegaRisks.FourYear, 0) /1000000.0, FiveYear=noNull(VolsChanges.FiveYear, 0) * noNull( VegaRisks.FiveYear, 0) /1000000.0, SevenYear=noNull(VolsChanges.SevenYear, 0) * noNull( VegaRisks.SevenYear, 0) /1000000.0, TenYear=noNull(VolsChanges.TenYear, 0) * noNull( VegaRisks.TenYear, 0) /1000000.0, FifteenYear=noNull(VolsChanges.FifteenYear, 0) * noNull( VegaRisks.FifteenYear, 0) /1000000.0, TwentyYear=noNull(VolsChanges.TwentyYear, 0) * noNull(VegaRisks.TwentyYear, 0) /1000000.0, ThirtyYear=noNull(VolsChanges.ThirtyYear, 0) * noNull(VegaRisks.ThirtyYear, 0) /1000000.0" on="VolsChanges.Currency == VegaRisks.Currency && VolsChanges.Period == VegaRisks.Period";

CREATE TRIGGER MacroODDAgg OFTYPE AGGREGATE ON MacroODD,MacroODDAgg PRIORITY 0 USE selects="DailyPNL=sum(DailyPNL),MTDPNL=sum(MTDPNL),YTDPNL=sum(YTDPNL)" groupBys="BundleGroup=BundleGroup,BusinessStrategy=BusinessStrategy";

CREATE TRIGGER MacroODDJoin1 OFTYPE JOIN ON MacroODDReport,MacroODDVaRReport,MacroODDIntermediate PRIORITY 0 USE type="LEFT" selects="Deal = MacroODDReport.Deal,Description = MacroODDReport.Description,InstrumentType = MacroODDReport.InstrumentType,DailyPNL = MacroODDReport.DailyPNL,MTDPNL = MacroODDReport.MTDPNL,YTDPNL = MacroODDReport.YTDPNL,FXExposure = MacroODDReport.FXExposure,Delta = MacroODDReport.Delta,Gamma = MacroODDReport.Gamma,Vega = MacroODDReport.Vega,Theta = MacroODDReport.Theta,Bundle = MacroODDReport.Bundle,BundleGroup = MacroODDReport.BundleGroup,BusinessStrategy = MacroODDReport.BusinessStrategy,Custom1 = MacroODDReport.Custom1,Custom2 = MacroODDReport.Custom2,ForecastVol = MacroODDVaRReport.ForecastVol,MarginalVol = MacroODDVaRReport.MarginalVol,`1D95VaR` = MacroODDVaRReport.`1D95VaR`,MarginalVaR = MacroODDVaRReport.MarginalVaR,StressVaR = MacroODDVaRReport.StressVaR" on="MacroODDReport.Deal==MacroODDVaRReport.Deal";

CREATE TRIGGER MacroODDJoin2 OFTYPE JOIN ON MacroODDIntermediate,MacroODDSubPMContribution,MacroODD PRIORITY 0 USE type="LEFT" selects="Deal = MacroODDIntermediate.Deal,Description = MacroODDIntermediate.Description,InstrumentType = MacroODDIntermediate.InstrumentType,DailyPNL = MacroODDIntermediate.DailyPNL,MTDPNL = MacroODDIntermediate.MTDPNL,YTDPNL = MacroODDIntermediate.YTDPNL,FXExposure = MacroODDIntermediate.FXExposure,Delta = MacroODDIntermediate.Delta,Gamma = MacroODDIntermediate.Gamma,Vega = MacroODDIntermediate.Vega,Theta = MacroODDIntermediate.Theta,Bundle = MacroODDIntermediate.Bundle,BundleGroup = MacroODDIntermediate.BundleGroup,BusinessStrategy = MacroODDIntermediate.BusinessStrategy,Custom1 = MacroODDIntermediate.Custom1,Custom2 = MacroODDIntermediate.Custom2,ForecastVol = MacroODDIntermediate.ForecastVol,MarginalVol = MacroODDIntermediate.MarginalVol,`1D95VaR` = MacroODDIntermediate.`1D95VaR`,MarginalVaR = MacroODDIntermediate.MarginalVaR,StressVaR = MacroODDIntermediate.StressVaR, MarginalVaRSubPM = MacroODDSubPMContribution.MarginalVaR, MarginalVolSubPM = MacroODDSubPMContribution.MarginalVol" on="MacroODDIntermediate.Deal==MacroODDSubPMContribution.Deal";

CREATE TRIGGER MacroODDJoinTemp OFTYPE JOIN ON MacroODDReport,MacroODDVaRReport,TempMacroODD PRIORITY 0 USE type="LEFT" selects="Deal = MacroODDReport.Deal,Description = MacroODDReport.Description,InstrumentType = MacroODDReport.InstrumentType,DailyPNL = MacroODDReport.DailyPNL,MTDPNL = MacroODDReport.MTDPNL,YTDPNL = MacroODDReport.YTDPNL,FXExposure = MacroODDReport.FXExposure,Delta = MacroODDReport.Delta,Gamma = MacroODDReport.Gamma,Vega = MacroODDReport.Vega,Theta = MacroODDReport.Theta,Bundle = MacroODDReport.Bundle,BundleGroup = MacroODDReport.BundleGroup,BusinessStrategy = MacroODDReport.BusinessStrategy,Custom1 = MacroODDReport.Custom1,Custom2 = MacroODDReport.Custom2,ForecastVol = MacroODDVaRReport.ForecastVol,MarginalVol = MacroODDVaRReport.MarginalVol,`_1D95VaR` = MacroODDVaRReport.`1D95VaR`,MarginalVaR = MacroODDVaRReport.MarginalVaR,StressVaR = MacroODDVaRReport.StressVaR" on="MacroODDReport.Deal==MacroODDVaRReport.Deal";

CREATE TRIGGER MacroODDJoinTemp2 OFTYPE JOIN ON MacroODDReport,MacroODDVaRReport,TempMacroODD2 PRIORITY 0 USE type="LEFT" selects="Deal = MacroODDReport.Deal,Description = MacroODDReport.Description,InstrumentType = MacroODDReport.InstrumentType,DailyPNL = MacroODDReport.DailyPNL,MTDPNL = MacroODDReport.MTDPNL,YTDPNL = MacroODDReport.YTDPNL,FXExposure = MacroODDReport.FXExposure,Delta = MacroODDReport.Delta,Gamma = MacroODDReport.Gamma,Vega = MacroODDReport.Vega,Theta = MacroODDReport.Theta,Bundle = MacroODDReport.Bundle,BundleGroup = MacroODDReport.BundleGroup,BusinessStrategy = MacroODDReport.BusinessStrategy,Custom1 = MacroODDReport.Custom1,Custom2 = MacroODDReport.Custom2,ForecastVol = MacroODDVaRReport.ForecastVol,MarginalVol = MacroODDVaRReport.MarginalVol,`_1D95VaR` = MacroODDVaRReport.`1D95VaR`,MarginalVaR = MacroODDVaRReport.MarginalVaR,StressVaR = MacroODDVaRReport.StressVaR" on="MacroODDReport.Deal==MacroODDVaRReport.Deal";

CREATE TRIGGER MyTrigger22 OFTYPE JOIN ON Accounts1,Accounts2,UnmatchedAccounts PRIORITY 0 USE type="OUTER ONLY" selects="account1=Accounts1.account, account2=Accounts2.account" on="Accounts2.account==Accounts1.account";

CREATE TRIGGER ORDER_SUMMARY OFTYPE AGGREGATE ON ORDERS,ORDER_SUMMARY PRIORITY 0 USE selects="OrderQty=sum(OrderQty),ExecQty=sum(CumQty),OpenQty=sum(LeavesQty),Notional=sum(OrderQty*((Price != null && OrdType != \"MARKET\" && OrdType != \"STOP\" && OrdType != \"MARKET_ON_CLOSE\" && OrdType != \"FOREX_MARKET\") ? Price : (PriceAtClose >=0.0 ? PriceAtClose : 0.0))),ExecNotional=sum(CumQty*AvgPx),OpenNotional=sum(LeavesQty*((Price != null && OrdType != \"MARKET\" && OrdType != \"STOP\" && OrdType != \"MARKET_ON_CLOSE\" && OrdType != \"FOREX_MARKET\") ? Price : (PriceAtClose >=0.0 ? PriceAtClose : 0.0))),TotalOrders=count(*),Active=count((OrdStatus==\"NEW\" || OrdStatus==\"PARTIALLY_FILLED\" || OrdStatus==\"REPLACED\" || OrdStatus==\"QUEUED\" || OrdStatus==\"STOPPED\") ? \"true\" : null),Rejected=count((OrdStatus==\"REJECTED\") ? \"true\" : null),Canceled=count((OrdStatus==\"CANCELED\") ? \"true\" : null),OrderLatency=sum((InterruptionType==null) ? InboundLatency : 0),ResponseLatency=sum(OutboundLatency),OrderLatencyCount=count((InboundLatency!=null && InterruptionType==null) ? \"true\" : null),ResponseLatencyCount=count((OutboundLatency!=null) ? \"true\" : null), TotalNotionalExclCxld=(sum(CumQty*AvgPx) + sum(LeavesQty*((Price != null && OrdType != \"MARKET\" && OrdType != \"STOP\" && OrdType != \"MARKET_ON_CLOSE\" && OrdType != \"FOREX_MARKET\") ? Price : (PriceAtClose >=0.0 ? PriceAtClose : 0.0)))), NotionalValueUSD=sum((OrderQty*((Price != null && OrdType != \"MARKET\" && OrdType != \"STOP\" && OrdType != \"MARKET_ON_CLOSE\" && OrdType != \"FOREX_MARKET\") ? Price : (PriceAtClose >=0.0 ? PriceAtClose : 0.0)))/USDRate), ExecNotionalUSD=sum((CumQty*AvgPx)/USDRate), OpenNotionalUSD=sum((LeavesQty*((Price != null && OrdType != \"MARKET\" && OrdType != \"STOP\" && OrdType != \"MARKET_ON_CLOSE\" && OrdType != \"FOREX_MARKET\") ? Price : (PriceAtClose >=0.0 ? PriceAtClose : 0.0)))/USDRate), TotalNotionalExclCxldUSD=(sum((CumQty*AvgPx)/USDRate) + sum((LeavesQty*((Price != null && OrdType != \"MARKET\" && OrdType != \"STOP\" && OrdType != \"MARKET_ON_CLOSE\" && OrdType != \"FOREX_MARKET\") ? Price : (PriceAtClose >=0.0 ? PriceAtClose : 0.0)))/USDRate)),SynOrdQty=sum(SynOrdQty),SynExecQty=sum(SynExecQty),InMktOrdQty=sum(InMktOrdQty),InMktExecQty=sum(InMktExecQty), SynExecNotional=sum(SynExecQty*SynAvgPx), SynExecNotionalUSD=sum((SynExecQty*SynAvgPx)/USDRate), TotalEstimatedCommission=sum(CommFactor*switch(CommissionType,null,0,CumQty/OrderQty,1,CumQty,2,CumQty*AvgPx/100,4,CumQty*AvgPx/10000)), TotalCommission=sum(TotalCommission)" groupBys="OrdStatus=OrdStatus,Account=Account,Customer=Customer,RoutingHub=RoutingHub,Market=Market,OrderFlowCategory=OrderFlowCategory,Side=Side,TradeDate=TradeDate,Symbol=Symbol,TimeInForce=TimeInForce,SubCustomerName=SubCustomerName,OrdType=OrdType,OrderCapacity=OrderCapacity,ConnectionName=ConnectionName,Currency=Currency,CustomerSlang=CustomerSlang,CustomerAccount=CustomerAccount,CustomerID=CustomerID,ExDestination=ExDestination,InstanceName=InstanceName,SourceRegion=SourceRegion,DestinationRegion=DestinationRegion,Country=Country,SmartStrategy=SmartStrategy,BloomBergCode=BloomBergCode,ChannelName=ChannelName,SettlementCurrency=SettlementCurrency,TicketStatus=TicketStatus,ClientTraderID=ClientTraderID,ListID=ListID,SwapFlag=SwapFlag,OddLot=OddLot,PrimarySales=PrimarySales,SalesPersonID=SalesPersonID, FlowType=FlowType, HasDK=HasDK,Swag=Swag,LHEligible=LHEligible, OMSVendor=OMSVendor, SecurityType=SecurityType, ONCInstance=ONCInstance";

CREATE TRIGGER PnLSummary_join_trigger OFTYPE JOIN ON CommoditiesJoin,EquitiesAgg,PnLSummary PRIORITY 0 USE type="LEFT" selects="Name=CommoditiesJoin.Name,Category=CommoditiesJoin.Category,FXPnL=FXPnL,RatesPnL=RatesPnL,VolPnL=VolPnL,CommoditiesPnL=CommoditiesPnL,EquitiesPnL=EquitiesAgg.EquitiesPnL, TotalPnL=noNull(FXPnL,0.0)+noNull(RatesPnL, 0.0)+noNull(VolPnL,0.0)+noNull(CommoditiesPnL,0.0)+noNull(EquitiesAgg.EquitiesPnL, 0.0)" on="CommoditiesJoin.Name == EquitiesAgg.Name";

CREATE TRIGGER RatesAgg_agg_trigger OFTYPE AGGREGATE ON RatesPnL,RatesAgg PRIORITY 0 USE selects="RatesPnL=sum(PnL)" groupBys="Name=Name";

CREATE TRIGGER RatesJoin_join_trigger OFTYPE JOIN ON FXJoin,RatesAgg,RatesJoin PRIORITY 0 USE type="LEFT" selects="Name=FXJoin.Name,Category=FXJoin.Category,FXPnL=FXPnL,RatesPnL=RatesAgg.RatesPnL" on="FXJoin.Name == RatesAgg.Name";

CREATE TRIGGER RatesPnL_join_trigger OFTYPE JOIN ON IRSPnL,FXDV01PnL,RatesPnL PRIORITY 0 USE type="OUTER" selects="Name=noNull(IRSPnL.Name,FXDV01PnL.Name,\"\"), Currency=noNull(IRSPnL.Currency,FXDV01PnL.Currency,\"\"), PnL=noNull(IRSPnL.OneYear,0.0) + noNull(IRSPnL.TwoYear,0.0) + noNull(IRSPnL.ThreeYear,0.0) + noNull(IRSPnL.FiveYear,0.0) + noNull(IRSPnL.TenYear,0.0) + noNull(IRSPnL.TwentyYear,0.0) + noNull(FXDV01PnL.OneMonth,0.0) + noNull(FXDV01PnL.ThreeMonth,0.0) + noNull(FXDV01PnL.SixMonth,0.0) + noNull(FXDV01PnL.OneYear,0.0) + noNull(FXDV01PnL.ThreeYear,0.0) + noNull(FXDV01PnL.FiveYear,0.0)" on="IRSPnL.Name == FXDV01PnL.Name && IRSPnL.Currency == FXDV01PnL.Currency";

CREATE TRIGGER SecBundleJoinPM OFTYPE JOIN ON SecBundle,PMLevelData,SecBundlePM PRIORITY 0 USE type="LEFT" selects="`sec_Bundle ID` = SecBundle.`sec_Bundle ID`,sec_Bundle = SecBundle.sec_Bundle,`sec_P&L SPN` = SecBundle.`sec_P&L SPN`,`sec_Contract SPN` = SecBundle.`sec_Contract SPN`,sec_SPN = SecBundle.sec_SPN,sec_Book = SecBundle.sec_Book,sec_Strategy = SecBundle.sec_Strategy,`sec_Front Office Prime Broker` = SecBundle.`sec_Front Office Prime Broker`,`sec_Custodian Account` = SecBundle.`sec_Custodian Account`,`sec_Legal Enttiy` = SecBundle.`sec_Legal Enttiy`,`sec_Legal Entity Family` = SecBundle.`sec_Legal Entity Family`,`sec_Capital Alloc Fund Family` = SecBundle.`sec_Capital Alloc Fund Family`,`sec_Business Unit` = SecBundle.`sec_Business Unit`,`sec_Bundle Group` = SecBundle.`sec_Bundle Group`,`sec_BundleGroup Type` = SecBundle.`sec_BundleGroup Type`,`sec_Custodian Account Group` = SecBundle.`sec_Custodian Account Group`,`sec_Custodian Account Group Type` = SecBundle.`sec_Custodian Account Group Type`,sec_Date = SecBundle.sec_Date,`sec_Current Face` = SecBundle.`sec_Current Face`,`sec_Trade Date Quantity` = SecBundle.`sec_Trade Date Quantity`,sec_Status = SecBundle.sec_Status,`sec_Settle Date Quantity` = SecBundle.`sec_Settle Date Quantity`,sec_Price = SecBundle.sec_Price,`sec_Collateral SPN` = SecBundle.`sec_Collateral SPN`,`sec_Collateral Price` = SecBundle.`sec_Collateral Price`,`sec_Price USD` = SecBundle.`sec_Price USD`,`sec_Short Mkt. Value` = SecBundle.`sec_Short Mkt. Value`,`sec_Long Mkt. Value` = SecBundle.`sec_Long Mkt. Value`,`sec_Net Mkt. Value` = SecBundle.`sec_Net Mkt. Value`,`sec_Gross Mkt. Value` = SecBundle.`sec_Gross Mkt. Value`,`sec_Short Mkt. Value USD` = SecBundle.`sec_Short Mkt. Value USD`,`sec_Long Mkt. Value USD` = SecBundle.`sec_Long Mkt. Value USD`,`sec_Net Mkt. Value USD` = SecBundle.`sec_Net Mkt. Value USD`,`sec_Notional Local` = SecBundle.`sec_Notional Local`,`sec_Notional USD` = SecBundle.`sec_Notional USD`,`sec_Notional2 Local` = SecBundle.`sec_Notional2 Local`,`sec_Notional2 USD` = SecBundle.`sec_Notional2 USD`,`sec_Repo Quantity` = SecBundle.`sec_Repo Quantity`,`sec_Repo Type` = SecBundle.`sec_Repo Type`,`sec_Counterparty Entity` = SecBundle.`sec_Counterparty Entity`,`sec_Exposure Counterparty` = SecBundle.`sec_Exposure Counterparty`,`sec_Exposure Custodian Account` = SecBundle.`sec_Exposure Custodian Account`,sec_Description = SecBundle.sec_Description,sec_Currency = SecBundle.sec_Currency,sec_Country = SecBundle.sec_Country,sec_Market = SecBundle.sec_Market,`sec_FO Type` = SecBundle.`sec_FO Type`,sec_Subtype = SecBundle.sec_Subtype,`sec_TCA $MM` = SecBundle.`sec_TCA $MM`,`sec_TCA Utilized $mm` = SecBundle.`sec_TCA Utilized $mm`,`sec_Daily Vol $ mm` = SecBundle.`sec_Daily Vol $ mm`,`sec_Live PNL $` = SecBundle.`sec_Live PNL $`,`sec_PNL MTD $ mm` = SecBundle.`sec_PNL MTD $ mm`,`sec_PNL QTD $ mm` = SecBundle.`sec_PNL QTD $ mm`,`sec_PNL YTD $ mm` = SecBundle.`sec_PNL YTD $ mm`,`sec_Worst Stress` = SecBundle.`sec_Worst Stress`,`sec_Intraday PnL$` = SecBundle.`sec_Intraday PnL$`,`sec_Delta $` = SecBundle.`sec_Delta $`,`sec_Gamma $` = SecBundle.`sec_Gamma $`,`sec_Vega $` = SecBundle.`sec_Vega $`,`sec_Theta $` = SecBundle.`sec_Theta $`,`sec_FX Exposure $` = SecBundle.`sec_FX Exposure $`,`sec_Portfolio Vol Contribution %` = SecBundle.`sec_Portfolio Vol Contribution %`,`sec_Marginal Vol Contribution %` = SecBundle.`sec_Marginal Vol Contribution %`,`sec_VaR 95% Daily %` = SecBundle.`sec_VaR 95% Daily %`,`sec_Marginal Var %` = SecBundle.`sec_Marginal Var %`,bun_Book = SecBundle.bun_Book,`bun_Bundle ID` = SecBundle.`bun_Bundle ID`,`bun_Business Unit` = SecBundle.`bun_Business Unit`,`bun_Bundle Group` = SecBundle.`bun_Bundle Group`,`bun_Daily Vol $ mm` = SecBundle.`bun_Daily Vol $ mm`,`bun_Worst Stress` = SecBundle.`bun_Worst Stress`,`bun_Gamma $` = SecBundle.`bun_Gamma $`,`bun_Portfolio Vol Contribution %` = SecBundle.`bun_Portfolio Vol Contribution %`,`bun_Marginal Vol Contribution %` = SecBundle.`bun_Marginal Vol Contribution %`,`bun_VaR 95% Daily %` = SecBundle.`bun_VaR 95% Daily %`,`bun_Marginal Var %` = SecBundle.`bun_Marginal Var %`,pm_Book = PMLevelData.Book,`pm_Business Unit` = PMLevelData.`Business Unit`,`pm_Daily Vol $ mm` = PMLevelData.`Daily Vol $ mm`,`pm_Worst Stress` = PMLevelData.`Worst Stress`,`pm_Gamma $` = PMLevelData.`Gamma $`,`pm_Portfolio Vol Contribution %` = PMLevelData.`Portfolio Vol Contribution %`,`pm_Marginal Vol Contribution %` = PMLevelData.`Marginal Vol Contribution %`,`pm_VaR 95% Daily %` = PMLevelData.`VaR 95% Daily %`,`pm_Marginal Var %` = PMLevelData.`Marginal Var %`" on="SecBundle.`bun_Business Unit` == PMLevelData.`Business Unit`";

CREATE TRIGGER SecJoinBundle_nuwnuw OFTYPE JOIN ON SecurityLevelPositions,BundleLevelPositions,SecBundle PRIORITY 0 USE type="LEFT" selects="`sec_Bundle ID` = SecurityLevelPositions.`Bundle ID`,sec_Bundle = SecurityLevelPositions.Bundle,`sec_P&L SPN` = SecurityLevelPositions.`P&L SPN`,`sec_Contract SPN` = SecurityLevelPositions.`Contract SPN`,sec_SPN = SecurityLevelPositions.SPN,sec_Book = SecurityLevelPositions.Book,sec_Strategy = SecurityLevelPositions.Strategy,`sec_Front Office Prime Broker` = SecurityLevelPositions.`Front Office Prime Broker`,`sec_Custodian Account` = SecurityLevelPositions.`Custodian Account`,`sec_Legal Enttiy` = SecurityLevelPositions.`Legal Enttiy`,`sec_Legal Entity Family` = SecurityLevelPositions.`Legal Entity Family`,`sec_Capital Alloc Fund Family` = SecurityLevelPositions.`Capital Alloc Fund Family`,`sec_Business Unit` = SecurityLevelPositions.`Business Unit`,`sec_Bundle Group` = SecurityLevelPositions.`Bundle Group`,`sec_BundleGroup Type` = SecurityLevelPositions.`BundleGroup Type`,`sec_Custodian Account Group` = SecurityLevelPositions.`Custodian Account Group`,`sec_Custodian Account Group Type` = SecurityLevelPositions.`Custodian Account Group Type`,sec_Date = SecurityLevelPositions.Date,`sec_Current Face` = SecurityLevelPositions.`Current Face`,`sec_Trade Date Quantity` = SecurityLevelPositions.`Trade Date Quantity`,sec_Status = SecurityLevelPositions.Status,`sec_Settle Date Quantity` = SecurityLevelPositions.`Settle Date Quantity`,sec_Price = SecurityLevelPositions.Price,`sec_Collateral SPN` = SecurityLevelPositions.`Collateral SPN`,`sec_Collateral Price` = SecurityLevelPositions.`Collateral Price`,`sec_Price USD` = SecurityLevelPositions.`Price USD`,`sec_Short Mkt. Value` = SecurityLevelPositions.`Short Mkt. Value`,`sec_Long Mkt. Value` = SecurityLevelPositions.`Long Mkt. Value`,`sec_Net Mkt. Value` = SecurityLevelPositions.`Net Mkt. Value`,`sec_Gross Mkt. Value` = SecurityLevelPositions.`Gross Mkt. Value`,`sec_Short Mkt. Value USD` = SecurityLevelPositions.`Short Mkt. Value USD`,`sec_Long Mkt. Value USD` = SecurityLevelPositions.`Long Mkt. Value USD`,`sec_Net Mkt. Value USD` = SecurityLevelPositions.`Net Mkt. Value USD`,`sec_Notional Local` = SecurityLevelPositions.`Notional Local`,`sec_Notional USD` = SecurityLevelPositions.`Notional USD`,`sec_Notional2 Local` = SecurityLevelPositions.`Notional2 Local`,`sec_Notional2 USD` = SecurityLevelPositions.`Notional2 USD`,`sec_Repo Quantity` = SecurityLevelPositions.`Repo Quantity`,`sec_Repo Type` = SecurityLevelPositions.`Repo Type`,`sec_Counterparty Entity` = SecurityLevelPositions.`Counterparty Entity`,`sec_Exposure Counterparty` = SecurityLevelPositions.`Exposure Counterparty`,`sec_Exposure Custodian Account` = SecurityLevelPositions.`Exposure Custodian Account`,sec_Description = SecurityLevelPositions.Description,sec_Currency = SecurityLevelPositions.Currency,sec_Country = SecurityLevelPositions.Country,sec_Market = SecurityLevelPositions.Market,`sec_FO Type` = SecurityLevelPositions.`FO Type`,sec_Subtype = SecurityLevelPositions.Subtype,`sec_TCA $MM` = SecurityLevelPositions.`TCA $MM`,`sec_TCA Utilized $mm` = SecurityLevelPositions.`TCA Utilized $mm`,`sec_Daily Vol $ mm` = SecurityLevelPositions.`Daily Vol $ mm`,`sec_Live PNL $` = SecurityLevelPositions.`Live PNL $`,`sec_PNL MTD $ mm` = SecurityLevelPositions.`PNL MTD $ mm`,`sec_PNL QTD $ mm` = SecurityLevelPositions.`PNL QTD $ mm`,`sec_PNL YTD $ mm` = SecurityLevelPositions.`PNL YTD $ mm`,`sec_Worst Stress` = SecurityLevelPositions.`Worst Stress`,`sec_Intraday PnL$` = SecurityLevelPositions.`Intraday PnL$`,`sec_Delta $` = SecurityLevelPositions.`Delta $`,`sec_Gamma $` = SecurityLevelPositions.`Gamma $`,`sec_Vega $` = SecurityLevelPositions.`Vega $`,`sec_Theta $` = SecurityLevelPositions.`Theta $`,`sec_FX Exposure $` = SecurityLevelPositions.`FX Exposure $`,`sec_Portfolio Vol Contribution %` = SecurityLevelPositions.`Portfolio Vol Contribution %`,`sec_Marginal Vol Contribution %` = SecurityLevelPositions.`Marginal Vol Contribution %`,`sec_VaR 95% Daily %` = SecurityLevelPositions.`VaR 95% Daily %`,`sec_Marginal Var %` = SecurityLevelPositions.`Marginal Var %`,bun_Book = BundleLevelPositions.Book,`bun_Bundle ID` = BundleLevelPositions.`Bundle ID`,`bun_Business Unit` = BundleLevelPositions.`Business Unit`,`bun_Bundle Group` = BundleLevelPositions.`Bundle Group`,`bun_Daily Vol $ mm` = BundleLevelPositions.`Daily Vol $ mm`,`bun_Worst Stress` = BundleLevelPositions.`Worst Stress`,`bun_Gamma $` = BundleLevelPositions.`Gamma $`,`bun_Portfolio Vol Contribution %` = BundleLevelPositions.`Portfolio Vol Contribution %`,`bun_Marginal Vol Contribution %` = BundleLevelPositions.`Marginal Vol Contribution %`,`bun_VaR 95% Daily %` = BundleLevelPositions.`VaR 95% Daily %`,`bun_Marginal Var %` = BundleLevelPositions.`Marginal Var %`" on="SecurityLevelPositions.`Bundle ID`==BundleLevelPositions.`Bundle ID`";

CREATE TRIGGER VolAgg_agg_trigger OFTYPE AGGREGATE ON VolPnL,VolAgg PRIORITY 0 USE selects="VolPnL=sum(PnL)" groupBys="Name=Name";

CREATE TRIGGER VolJoin_join_trigger OFTYPE JOIN ON RatesJoin,VolAgg,VolJoin PRIORITY 0 USE type="LEFT" selects="Name=RatesJoin.Name,Category=RatesJoin.Category,FXPnL=FXPnL,RatesPnL=RatesPnL,VolPnL=VolAgg.VolPnL" on="RatesJoin.Name == VolAgg.Name";

CREATE TRIGGER VolPnL_agg_trigger OFTYPE AGGREGATE ON IRVolPnL,VolPnL PRIORITY 0 USE selects="PnL=noNull(sum(OneYear),0) + noNull(sum(TwoYear),0) + noNull(sum(ThreeYear), 0) + noNull(sum(FourYear), 0) + noNull(sum(FiveYear), 0) + noNull(sum(SevenYear), 0) + noNull(sum(TenYear), 0) + noNull(sum(FifteenYear), 0) + noNull(sum(TwentyYear),0) + noNull(sum(ThirtyYear),0)" groupBys="Name=Name,Currency=Currency";


/*DBOS*/
