{
  "includeFiles":[
  ],
  "metadata":{
    "amiScriptMethods":[
      "Integer alterShockDisplayTables(Map tableConfigs){\n",
      "   for (String tbl : tableConfigs.getKeys()) {\n",
      "        Map conf = tableConfigs.get(tbl);\n",
      "        String alterCol = (String)(conf.get(\"alterColumnDefinition\"));\n",
      "        if (strIsnt(alterCol)) continue;\n",
      "        logInfo(\"ALTERING TABLE ${tbl} WITH ALTER COLUMN ${alterCol}\");\n",
      "        ALTER TABLE ${tbl} ${alterCol};\n",
      "    }\n",
      "    return 1;\n",
      "};\n",
      "\n",
      "  Integer checkForInstrumentChanges(){\n",
      "    List tables = new List();\n",
      "    tables.add(\"riskInstrumentInputAssumptionsAQON\");\n",
      "    tables.add(\"riskInstrumentInputAssumptionsAQOFF\");\n",
      "\n",
      "    Table inst = USE ds=\"AMI\" EXECUTE SELECT instruments.baseAsset AS symbol\n",
      "        FROM instruments LEFT ONLY JOIN ${tables.get(0)}\n",
      "        ON instruments.baseAsset == ${tables.get(0)}.I\n",
      "        WHERE instruments.instrumentType==\"PERPETUAL_FUTURE\";\n",
      "    List rows = inst.getRows();\n",
      "    if (null == rows || 0 == rows.size()) return 0;\n",
      "    String values = \"VALUES\";\n",
      "    for (Row row : rows) {\n",
      "        String sym = row.getValue(\"symbol\");\n",
      "        values += \"(\\\"${sym}\\\",\\\"${sym}\\\", 0.0, 0.0),\";\n",
      "    }\n",
      "    values = values.beforeLast(\",\", false) + \";\";\n",
      "    if (null == values) return;\n",
      "\n",
      "    for (String targetTable : tables) {\n",
      "        String stmnt = \"INSERT INTO ${targetTable} (I, symbol, thirtyADQNotional, lspCapacityNotional) \" + values;\n",
      "        USE ds=\"AMI\" EXECUTE ${stmnt};\n",
      "    }\n",
      "    return 1;\n",
      "};\n",
      "\n",
      "  Table fetchTableauHyper(String tableauServerDS,String hyperDS,String shellDS,String tableauSiteName,String tableauDataSourceName){\n",
      " \n",
      "  Map credentials = new Map();\n",
      "  Map site = new Map();\n",
      "  Map params = new Map();\n",
      " \n",
      "  String user = use ds=AMI EXECUTE SELECT US FROM __DATASOURCE WHERE NM == \"${tableauServerDS}\";\n",
      "  String password = use ds=AMI EXECUTE SELECT strDecrypt(Password) FROM __DATASOURCE WHERE NM == \"${tableauServerDS}\";\n",
      " \n",
      "  site.put(\"contentUrl\", tableauSiteName);\n",
      "  credentials.put(\"name\", user);\n",
      "  credentials.put(\"password\", password);\n",
      "  credentials.put(\"site\", site);\n",
      "  params.put(\"credentials\", credentials);\n",
      " \n",
      "  CREATE TABLE signin,headers AS USE ds=\"${tableauServerDS}\" _method=\"POST\" _urlExtension=\"/auth/signin\" _header_Accept=\"application/json\" _params=\"${params.toJson()}\" _delim=\"||||\" _returnHeaders=\"true\" EXECUTE SELECT * FROM signin;\n",
      " \n",
      "  String json = select credentials from signin limit 1;\n",
      "  String siteId = jsonExtract(json, \"site.id\");\n",
      "  String token = jsonExtract(json, \"token\");\n",
      " \n",
      "  Map headers = new Map();\n",
      "  headers.put(\"X-Tableau-Auth\", token);\n",
      "  headers.put(\"Accept\", \"application/json\");\n",
      " \n",
      "  CREATE TABLE getDataSources,headers AS USE ds=\"${tableauServerDS}\" _method=\"GET\" _urlExtension=\"/sites/${siteId}/datasources\" _header_Accept=\"application/json\" _headers=\"${headers.toJson()}\" _param_pageSize=\"1000\" _delim=\"||||\" _returnHeaders=\"true\" EXECUTE SELECT * FROM getDataSources;\n",
      " \n",
      "  String dataSourcesJson = select datasources from getDataSources;\n",
      " \n",
      "  Map dataSourceMap = parseJson(dataSourcesJson);\n",
      " \n",
      "  List dataSourceList = dataSourceMap.get(\"datasource\");\n",
      " \n",
      "  String dataSourceId = \"\";\n",
      "  for(int i = 0; i < dataSourceList.size(); i++) {\n",
      "    Map dataSource = dataSourceList.get(i);\n",
      "    if(dataSource.get(\"name\") == tableauDataSourceName) {\n",
      "      dataSourceId = dataSource.get(\"id\");\n",
      "    }\n",
      "  }\n",
      " \n",
      "  String tableauServer = use ds=AMI EXECUTE SELECT UR FROM __DATASOURCE WHERE NM == \"${tableauServerDS}\";\n",
      " \n",
      "  String curlCommand = \"curl -v -H 'X-Tableau-Auth: ${token}' -o ${tableauDataSourceName}.tdsx ${tableauServer}/sites/${siteId}/datasources/${dataSourceId}/content?includeExtract=true\";\n",
      " \n",
      "  String unzipCommand = \"unzip -o -d ${tableauDataSourceName} ${tableauDataSourceName}.tdsx\";\n",
      " \n",
      "  CREATE TABLE stdoutCurl,stderrCurl,exitCodeCurl AS USE ds=\"${shellDS}\" _cmd=\"${curlCommand}\" EXECUTE SELECT * FROM cmd;\n",
      " \n",
      "  CREATE TABLE stdoutZip,stderrZip,exitCodeZip AS USE ds=\"${shellDS}\" _cmd=\"${unzipCommand}\" EXECUTE SELECT * FROM cmd;\n",
      " \n",
      "  List zipOutput = select line from stdoutZip;\n",
      " \n",
      "  List hyperFiles = new List();\n",
      " \n",
      "  for(int i = 0; i < zipOutput.size(); i++) {\n",
      "    String line = zipOutput.get(i);\n",
      "    if(line =~ \".hyper\") {\n",
      "      List lineTokens = line.split(\" \");\n",
      "      for(int j = 0; j < lineTokens.size(); j++) {\n",
      "        if(lineTokens.get(j) =~ \".hyper$\") {\n",
      "          hyperFiles.add(lineTokens.get(j));\n",
      "        }\n",
      "      }\n",
      "    }\n",
      " \n",
      "  }\n",
      "  String dir = use ds=AMI EXECUTE SELECT UR FROM __DATASOURCE WHERE NM == \"${shellDS}\";\n",
      " \n",
      "  String fullPathToHyper = dir + \"/\" + hyperFiles.get(0);\n",
      " \n",
      "  CREATE TABLE HyperOutput as use ds=${hyperDS} _file=\"${fullPathToHyper}\" EXECUTE SELECT * FROM \"Extract\".\"Extract\";\n",
      " \n",
      "  Table returnTable = select * from HyperOutput;\n",
      " \n",
      "  return returnTable;\n",
      " \n",
      "}\n",
      ";\n",
      "\n",
      "  Integer foo(Integer a){return 0;};\n",
      "\n",
      "  Integer hello(Integer a,Integer b){return a+b;};\n",
      "\n",
      "  Integer hello2(Integer a,Integer b){return a+b;};\n",
      "\n",
      "  Integer hello3(Integer a,Integer b){return a+b;};\n",
      "\n",
      "  Integer initAndSetupConfigs(){\n",
      "    syncScenarios();\n",
      "    syncInitRiskConfigurations();\n",
      "    syncActiveInstrumentAssumptions();\n",
      "    checkForInstrumentChanges();\n",
      "    return 1;\n",
      "};\n",
      "\n",
      "  boolean isScenarioDisabled(Map scenario,String callerName){\n",
      "    String name = scenario.get(\"scenarioName\");\n",
      "    if (\"DISABLED\" == name) {\n",
      "       logInfo(\"Scenario is disabled, skipping timer task ${callerName}\");\n",
      "       return true;\n",
      "    }\n",
      "    return false;\n",
      "};\n",
      "\n",
      "  Integer loadInstrumentAssumptions(Map instrumentAssumptions,String tableName){\n",
      "    Table instAssumptions = USE DS=\"AMI\" EXECUTE SELECT * FROM ${tableName};\n",
      "    for (Row row : instAssumptions.getRows()) {\n",
      "        Map rowMap = new Map();\n",
      "        rowMap.put(\"thirtyADQNotional\", row.getValue(\"thirtyADQNotional\"));\n",
      "        rowMap.put(\"lspCapacityNotional\", row.getValue(\"lspCapacityNotional\"));\n",
      "        instrumentAssumptions.put(row.getValue(\"symbol\"), rowMap);\n",
      "    }\n",
      "    return 1;\n",
      "};\n",
      "\n",
      "  Integer syncActiveInstrumentAssumptions(){\n",
      "    CREATE TABLE risk_ins_assum AS USE ds=\"StarbasePostgresDB\" EXECUTE SELECT * FROM risk_instrument_input_assumptions;\n",
      "    Table ins = SELECT * FROM risk_ins_assum;\n",
      "    List rows = ins.getRows();\n",
      "    if (null == rows || rows.size() == 0) return 0;\n",
      "    List vals = new List();\n",
      "    vals.add(\"\");\n",
      "    vals.add(\"\");\n",
      "    for (Row row : rows) {\n",
      "        String scenarioName = row.getValue(\"scenario_name\");\n",
      "        String symbol = row.getValue(\"symbol\");\n",
      "        Double thirtyAdq = row.getValue(\"thirty_adq_notional\");\n",
      "        Double lspCap = row.getValue(\"lsp_capacity_notional\");\n",
      "        String val = \"(\\\"${symbol}\\\",\\\"${symbol}\\\",${thirtyAdq},${lspCap}),\";\n",
      "        if (\"ALIQ_ON\" == scenarioName) {\n",
      "            vals.set(0,vals.get(0) + val);\n",
      "        } else {\n",
      "            vals.set(1,vals.get(1) + val);\n",
      "        }\n",
      "    }\n",
      "    String v = vals.get(0);\n",
      "    if (strIs(v)) {\n",
      "        v = v.beforeLast(\",\", false) + \";\";\n",
      "        INSERT INTO riskInstrumentInputAssumptionsAQON VALUES ${v};\n",
      "    }\n",
      "    v = vals.get(1);\n",
      "    if (strIs(v)) {\n",
      "        v = v.beforeLast(\",\", false) + \";\";\n",
      "        INSERT INTO riskInstrumentInputAssumptionsAQOFF VALUES ${v};\n",
      "    }\n",
      "    return 1;\n",
      "};\n",
      "\n",
      "  Integer syncInitRiskConfigurations(){\n",
      "    CREATE TABLE risk_configs_ins AS USE ds=\"StarbasePostgresDB\" EXECUTE SELECT * FROM risk_configuration_input_assumptions;\n",
      "    Table configs = SELECT * FROM risk_configs_ins;\n",
      "    List configRows = configs.getRows();\n",
      "    if (null == configRows || configRows.size() == 0) return 0;\n",
      "    List vals = new List();\n",
      "    vals.add(\"\");\n",
      "    vals.add(\"\");\n",
      "    for (Row r : configRows) {\n",
      "        String scenarioName = r.getValue(\"scenario_name\");\n",
      "        String val = \"(\\\"default\\\",${(Double)(r.getValue(\"adq_breach\"))},${(Double)(r.getValue(\"adq_liq_pcnt_of_adq_breach\"))},\n",
      "            ${(Double)(r.getValue(\"adq_liq_pcnt_of_adq_not_breach\"))},${(Double)(r.getValue(\"lsp_positive_equity\"))},${(Double)(r.getValue(\"lsp_negative_equity\"))},\n",
      "            ${(Double)(r.getValue(\"lsp_locked_cap_notional\"))},${(Double)(r.getValue(\"insurance_fund_contrib\"))},${(Double)(r.getValue(\"insurance_absorb_pcnt\"))}),\";\n",
      "        if (\"ALIQ_ON\" == scenarioName) {\n",
      "            vals.set(0,vals.get(0) + val);\n",
      "        } else {\n",
      "            vals.set(1,vals.get(1) + val);\n",
      "        }\n",
      "    }\n",
      "    String v = vals.get(0);\n",
      "    if (strIs(v)) {\n",
      "        v = v.beforeLast(\",\", false) + \";\";\n",
      "        INSERT INTO riskConfigurationInputAssumptionsAQON (I,adqBreach,autoLiqPcntOfADQBreach,autoLiqPcntOfADQNotBreach,lspPositiveEquity,lspNegativeEquity,lspLockedCapNotional,insuranceFundContrib,insuranceAbsorbPcnt)\n",
      "        VALUES ${v};\n",
      "    }\n",
      "        v = vals.get(1);\n",
      "    if (strIs(v)) {\n",
      "        v = v.beforeLast(\",\", false) + \";\";\n",
      "        INSERT INTO riskConfigurationInputAssumptionsAQOFF (I,adqBreach,autoLiqPcntOfADQBreach,autoLiqPcntOfADQNotBreach,lspPositiveEquity,lspNegativeEquity,lspLockedCapNotional,insuranceFundContrib,insuranceAbsorbPcnt)\n",
      "        VALUES ${v};\n",
      "    }\n",
      "    return 1;\n",
      "};\n",
      "\n",
      "  Integer syncScenarios(){\n",
      "    CREATE TABLE scenario_tmp AS USE ds=\"StarbasePostgresDB\" EXECUTE SELECT * FROM risk_scenarios;\n",
      "    Table sc = SELECT * FROM scenario_tmp;\n",
      "    List rows = sc.getRows();\n",
      "    for (Row r : rows) {\n",
      "        String name = r.getValue(\"scenario_name\");\n",
      "        INSERT INTO scenarios (active,scenarioName,activeConfigInputsAssumptionsTable,activeInstrumentAssumptionsTable, activeConfigCMLIQPercentsTable,I)\n",
      "        VALUES(r.getValue(\"active\"),name,r.getValue(\"config_inputs_assumptions_table\"),r.getValue(\"instrument_inputs_assumptions_table\"),r.getValue(\"config_cm_liq_percents_table\"),name);\n",
      "    }\n",
      "    return 1;\n",
      "};"
    ],
    "callbacks":{
      "entries":[
        {
          "amiscript":[
            "CREATE PUBLIC TABLE IRSRates(Currency String BITMAP, OneYear double, TwoYear double, ThreeYear double, FiveYear double, TenYear double, TwentyYear double);\n",
            "\n",
            "CREATE PUBLIC TABLE IRSRisks(Name String BITMAP, Currency String BITMAP, OneYear double, TwoYear double, ThreeYear double, FiveYear double, TenYear double, TwentyYear double, Total double) ;\n",
            "CREATE PUBLIC TABLE IRSPnL(Name String BITMAP, Currency String BITMAP, OneYear double, TwoYear double, ThreeYear double, FiveYear double, TenYear double, TwentyYear double, Total double);\n",
            "\n",
            "\n",
            "//CREATE TRIGGER IRSPnL_join_trigger OFTYPE JOIN ON IRSRates, IRSRisks, IRSPnL USE type=\"RIGHT\" on=\"IRSRates.Currency == IRSRisks.Currency\" selects=\"Currency=IRSRates.Currency, Name=IRSRisks.Name, OneYear=IRSRisks.OneYear*IRSRates.OneYear/1000.0, TwoYear=IRSRisks.TwoYear*IRSRates.TwoYear/1000.0, ThreeYear=IRSRisks.ThreeYear*IRSRates.ThreeYear/1000.0, FiveYear=IRSRisks.FiveYear*IRSRates.FiveYear/1000.0, TenYear=IRSRisks.TenYear*IRSRates.TenYear/1000.0, TwentyYear=IRSRisks.TwentyYear*IRSRates.TwentyYear/1000.0, Total=IRSRisks.OneYear*IRSRates.OneYear/1000.0 + IRSRisks.TwoYear*IRSRates.TwoYear/1000.0 + IRSRisks.ThreeYear*IRSRates.ThreeYear/1000.0 + IRSRisks.FiveYear*IRSRates.FiveYear/1000.0 + IRSRisks.TenYear*IRSRates.TenYear/1000.0 + IRSRisks.TwentyYear*IRSRates.TwentyYear/1000.0\";\n"
          ],
          "linkedVariables":[
          ],
          "name":"onAmiJsCallbackInTitlebar"
        },
        {
          "amiscript":"CREATE TABLE test(id int, id2 int);",
          "linkedVariables":[
          ],
          "name":"onAsyncCommandResponse",
          "schema":{
            "tbl":[
              {
                "cols":[
                  {
                    "nm":"id",
                    "tp":"Integer"
                  },
                  {
                    "nm":"id2",
                    "tp":"Integer"
                  }
                ],
                "nm":"test",
                "oc":"ask"
              }
            ]
          }
        }
      ]
    },
    "customPrefsImportMode":"reject",
    "dm":{
      "dms":[
        {
          "callbacks":{
            "entries":[
              {
                "amiscript":[
                  "{\n",
                  "  CREATE TABLE _PROPERTY AS EXECUTE SELECT * FROM __PROPERTY WHERE ${WHERE};\n",
                  "}\n"
                ],
                "defaultDs":"AMI",
                "hasDatamodel":true,
                "linkedVariables":[
                ],
                "name":"onProcess",
                "schema":{
                  "tbl":[
                    {
                      "cols":[
                        {
                          "nm":"PropertyName",
                          "tp":"String"
                        },
                        {
                          "nm":"PropertyValue",
                          "tp":"String"
                        }
                      ],
                      "nm":"_PROPERTY",
                      "oc":"ask"
                    }
                  ]
                }
              }
            ]
          },
          "datasources":[
            "AMI"
          ],
          "lbl":"__PROPERTY",
          "lower":[
          ],
          "queryMode":"startup",
          "test_input_type":"OPEN",
          "test_input_vars":"String WHERE=\"true\";"
        }
      ]
    },
    "fileVersion":3,
    "menubarPosition":"top",
    "rt":{
    },
    "stm":{
      "styles":[
        {
          "id":"LAYOUT_DEFAULT",
          "lb":"Layout Default",
          "pt":"DEFAULT"
        }
      ]
    },
    "transientIdPrefix":"TRANSIENT_"
  },
  "portletConfigs":[
    {
      "portletBuilderId":"amidesktop",
      "portletConfig":{
        "amiPanelId":"@DESKTOP",
        "amiStyle":{
          "pt":"LAYOUT_DEFAULT"
        },
        "windows":[
          {
            "header":true,
            "heightDflt":463,
            "hidden":false,
            "leftDflt":160,
            "portlet":"Div1",
            "pos":0,
            "stateDflt":"flt",
            "title":"Custom Table Column",
            "topDflt":180,
            "widthDflt":956,
            "zindexDflt":3
          },
          {
            "header":true,
            "heightDflt":501,
            "hidden":false,
            "leftDflt":80,
            "portlet":"__PROPERTY",
            "pos":1,
            "stateDflt":"flt",
            "title":"Window",
            "topDflt":100,
            "widthDflt":960,
            "zindexDflt":3
          }
        ]
      }
    },
    {
      "portletBuilderId":"div",
      "portletConfig":{
        "amiPanelId":"Div1",
        "amiStyle":{
          "pt":"LAYOUT_DEFAULT"
        },
        "child1":"sampleTablePanel",
        "child2":"tableCustomColumn",
        "dir":"v",
        "locked":false,
        "offset":0.28765,
        "upid":"Div1"
      }
    },
    {
      "portletBuilderId":"amichartgrid",
      "portletConfig":{
        "amiPanelId":"__PROPERTY",
        "amiStyle":{
          "pt":"LAYOUT_DEFAULT"
        },
        "amiTitle":"_PROPERTY",
        "axisBcnts":[
          1
        ],
        "axisConfig":{
          "B_0_0":{
            "amiStyle":{
              "pt":"LAYOUT_DEFAULT"
            },
            "autoMajorValue":true,
            "autoMaxValue":true,
            "autoMinValue":true,
            "autoMinorValue":true,
            "axisId":3,
            "fontStyle":"",
            "format":null,
            "formatType":5,
            "isGroupOrdered":true,
            "orientation":"T",
            "reverse":false,
            "title":"1"
          },
          "L_0_0":{
            "amiStyle":{
              "pt":"LAYOUT_DEFAULT"
            },
            "autoMajorValue":true,
            "autoMaxValue":true,
            "autoMinValue":true,
            "autoMinorValue":true,
            "axisId":2,
            "fontStyle":"",
            "format":null,
            "formatType":5,
            "isGroupOrdered":true,
            "orientation":"R",
            "reverse":true,
            "title":"1"
          }
        },
        "axisLcnts":[
          1
        ],
        "axisRcnts":[
          0
        ],
        "axisTcnts":[
          0
        ],
        "colsCount":1,
        "dm":[
          {
            "dmadn":"__PROPERTY",
            "dmtbid":[
              "_PROPERTY"
            ]
          }
        ],
        "mdivs":[
          {
            "mdivs":[
              {
                "mdivs":[
                  {
                    "p":-1,
                    "w":1.0
                  }
                ],
                "p":70,
                "w":1.0
              },
              {
                "p":-1,
                "w":1.0
              }
            ],
            "p":-1,
            "w":1.0
          },
          {
            "mdivs":[
              {
                "mdivs":[
                  {
                    "p":-1,
                    "w":1.0
                  }
                ],
                "p":70,
                "w":1.0
              },
              {
                "mdivs":[
                  {
                    "p":-1,
                    "w":1.0
                  }
                ],
                "p":-1,
                "w":1.0
              }
            ],
            "p":70,
            "w":1.0
          }
        ],
        "plotConfig":{
          "0_0":{
            "bgColor":"#ffffff",
            "layers":[
              {
                "amiStyle":{
                  "pt":"LAYOUT_DEFAULT"
                },
                "dmTableName":"_PROPERTY",
                "dmadn":"__PROPERTY",
                "id":0,
                "layers":[
                  {
                    "editorType":"2dLine",
                    "id":4,
                    "lineColor":{
                      "type":"const",
                      "value":"\"#1338BE\""
                    },
                    "lineSize":"1",
                    "mBorderColor":{
                      "type":"const",
                      "value":"\"#1338BE\""
                    },
                    "mBorderSize":"1",
                    "mColor":{
                      "type":"const",
                      "value":"\"#1338BE\""
                    },
                    "mHeight":"3",
                    "mShape":"\"circle\"",
                    "mWidth":"3",
                    "seriesName":"Layer",
                    "tooltip":"\"X: \"+formatNumber(1, \"#.000\", \"\")+\"<BR>Y: \"+formatNumber(1, \"#.000\", \"\")",
                    "xPos":"1",
                    "yPos":"1"
                  }
                ],
                "name":"Layer",
                "opac":100,
                "type":"Chart",
                "xAxisId":3,
                "yAxisId":2
              }
            ],
            "plotId":1,
            "selBoxBorderColor":"#404040ef",
            "selBoxFillColor":"#40404007",
            "selColor":"#bacbfb6e"
          }
        },
        "rowsCount":1,
        "titlePnl":{
          "title":"_PROPERTY"
        },
        "upid":"__PROPERTY"
      }
    },
    {
      "portletBuilderId":"amistatictable",
      "portletConfig":{
        "amiCols":[
          {
            "fm":"Symbol",
            "fw":false,
            "id":"Symbol",
            "location":0,
            "tl":"Symbol",
            "tp":"text",
            "width":53
          },
          {
            "fm":"Quantity",
            "fw":false,
            "id":"Quantity",
            "location":1,
            "pc":0,
            "tl":"Quantity",
            "tp":"numeric",
            "width":58
          },
          {
            "id":"D",
            "width":100
          }
        ],
        "amiPanelId":"sampleTablePanel",
        "amiStyle":{
          "pt":"LAYOUT_DEFAULT"
        },
        "amiTitle":"Sample",
        "curtimeUpdateFrequency":1000,
        "dm":[
          {
            "dmadn":"datamodel",
            "dmtbid":[
              "Sample"
            ]
          }
        ],
        "dynamicColumns":"false",
        "editDblClk":true,
        "editInplace":false,
        "editMenuTitle":"Edit Row(s)",
        "editMode":0,
        "editRerunDM":true,
        "filters":{
        },
        "pinCnt":0,
        "rollupEnabled":false,
        "scrollToBottomOnAppend":false,
        "showCommandMenu":true,
        "showLastRuntime":true,
        "titlePnl":{
          "title":"Sample"
        },
        "upid":"datamodel",
        "varTypes":{
          "Quantity":"Long",
          "Symbol":"String"
        }
      }
    },
    {
      "portletBuilderId":"amiform",
      "portletConfig":{
        "amiPanelId":"tableCustomColumn",
        "amiStyle":{
          "pt":"LAYOUT_DEFAULT"
        },
        "fields":[
          {
            "callbacks":{
              "entries":[
                {
                  "amiscript":[
                    "FormPanel fp = layout.getPanel(\"tableCustomColumn\");\n",
                    "String columnName = fp.getFieldValue(\"columnNameText\");\n",
                    "String display = fp.getFieldValue(\"displayText\");\n",
                    "String foregroundColor = fp.getFieldValue(\"foregroundColorPicker\");\n",
                    "String backgroundColor = fp.getFieldValue(\"backgroundColorPicker\");\n",
                    "\n",
                    "TablePanel tp = layout.getPanel(\"sampleTablePanel\");\n",
                    "tp.addColumn(columnName, \"numeric\");\n",
                    "TablePanelColumn tpc = tp.getColumn(columnName);\n",
                    "tpc.getFormula(\"display\").setAmiScript(display);\n",
                    "tpc.getFormula(\"backgroundColor\").setAmiScript(\"\\\"${backgroundColor}\\\"\");\n",
                    "tpc.getFormula(\"color\").setAmiScript(\"\\\"${foregroundColor}\\\"\");\n"
                  ],
                  "linkedVariables":[
                  ],
                  "name":"onChange"
                }
              ]
            },
            "heightPx":20,
            "l":"Apply",
            "leftPosPx":440,
            "n":"applyButton",
            "style":{
              "pt":"LAYOUT_DEFAULT"
            },
            "t":"buttonField",
            "topPosPx":60,
            "widthPx":200,
            "zidx":2
          },
          {
            "heightPx":20,
            "l":"Background Color",
            "leftPosPx":140,
            "n":"backgroundColorPicker",
            "style":{
              "pt":"LAYOUT_DEFAULT"
            },
            "t":"colorpicker",
            "topPosPx":140,
            "widthPx":200,
            "zidx":5
          },
          {
            "heightPx":20,
            "l":"Column Name",
            "leftPosPx":140,
            "n":"columnNameText",
            "style":{
              "pt":"LAYOUT_DEFAULT"
            },
            "t":"textField",
            "topPosPx":20,
            "widthPx":200,
            "zidx":3
          },
          {
            "heightPx":20,
            "l":"Display",
            "leftPosPx":140,
            "n":"displayText",
            "style":{
              "pt":"LAYOUT_DEFAULT"
            },
            "t":"textField",
            "topPosPx":60,
            "widthPx":200,
            "zidx":1
          },
          {
            "heightPx":20,
            "l":"Foreground Color",
            "leftPosPx":140,
            "n":"foregroundColorPicker",
            "style":{
              "pt":"LAYOUT_DEFAULT"
            },
            "t":"colorpicker",
            "topPosPx":100,
            "widthPx":200,
            "zidx":4
          }
        ],
        "snap":20,
        "upid":"Html1"
      }
    }
  ]
}